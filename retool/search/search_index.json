{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Retool Retool is a filter utility for Redump and No-Intro DAT files. By customizing the DAT files before you load them into a ROM manager, you can more effectively trim, consolidate, and deduplicate your ROM sets. Retool offers the following features: Superior One Game, One ROM (1G1R) functionality compared to other tools . Priority-based region and language filtering. Exclusions of unwanted title types like demos, applications, and more. Regular expression filters for including or excluding titles. CLI and GUI versions. You feed Retool an input DAT file, and it creates a new DAT from it with all your preferences, leaving the original intact. You can then load the new DAT in a ROM manager like CLRMamePro , RomVault , or Romcenter to do your file management \u2014 you just don't need to use their 1G1R modes, as Retool has already done the work for you. Download Retool","title":"Home"},{"location":"#retool","text":"Retool is a filter utility for Redump and No-Intro DAT files. By customizing the DAT files before you load them into a ROM manager, you can more effectively trim, consolidate, and deduplicate your ROM sets. Retool offers the following features: Superior One Game, One ROM (1G1R) functionality compared to other tools . Priority-based region and language filtering. Exclusions of unwanted title types like demos, applications, and more. Regular expression filters for including or excluding titles. CLI and GUI versions. You feed Retool an input DAT file, and it creates a new DAT from it with all your preferences, leaving the original intact. You can then load the new DAT in a ROM manager like CLRMamePro , RomVault , or Romcenter to do your file management \u2014 you just don't need to use their 1G1R modes, as Retool has already done the work for you. Download Retool","title":"Retool"},{"location":"beginners/","text":"Beginner's guide to ROM managers This guide is for those who've never used ROM managers before, and don't understand how to manage their files. For those new to dat managers, we'll cover one option in brief: CLRMAMEPro. Download and install CLRMAMEPro , then run it. The first screen you see is called the Profiler. This is where you load your various dats. Click Add DatFile . Select the Retool dat you created. CLRMAMEPro will ask you where you want to put the dat. This is just folder organization, if you want to keep your No-Intro dats separate from your Retool dats, for instance. Choose a location, then click OK . Click [NEW DATFILES] , then double click the Retool dat you added. On the next prompt, click Default . You should now see the main CLRMAMEPro panel: Click Settings . Optional setup: compression formats If you prefer compressing in RAR or 7z: Download and install WinRAR . Download and install 7zip . Copy WinRAR.exe from your WinRAR install folder to your CLRMAMEPro folder. Copy 7z.exe from your 7z install folder to your CLRMAMEPro folder. Return to CLRMAMEPro, then in the Settings window click Compressor . In the RAR tab, enter the following: Executable \u2014 winrar.exe Compress \u2014 a -y -r -ibck -m5 -s- %1 %2 Delete \u2014 d -y -ibck -m5 -s- %1 %2 Rename \u2014 rn -y -ibck -m5 -s- %1 %2 %3 In the 7z tab, enter the following: Executable \u2014 7z.exe Compress \u2014 a -y -r -ms=off -mx9 %1 %2 Delete \u2014 d -y -ms=off -mx9 %1 %2 NOTE: I could never get rename for 7z to work, all it seemed to do was recompress a brand new archive anyway, so it didn't seem worth the fuss. Also, this is max compression, so expect it to be very slow. 1. Click OK . 1. Click Save As Def. to make everything from Backup/Download and below your default settings. Now whenever you load a dat and select Default , these compression settings will load. Set up Rom- and Add-Paths From the top left dropdown, select Rom-Paths . This is where your ROM set will ultimately end up. Click Add to select your Rom-Paths folder. You have a choice here as to what type of folder you select: Point your Rom-Paths folder to an existing set with the intention to trim it. To do this, add the folder, close the settings, then head to the Scanner section of these instructions. Point your Roms-Paths folder to an empty folder, then build the set from scratch using the contents of one or more other folders. To do this, add the folder, then head to the Rebuilder section of these instructions. You can also use the rebuilder if you are slowly building/updating your set from various sources. Option A: Scanner CLRMAMEPro's scanner checks a folder against a dat for mismatches. It checks names, hashes, sizes, and other things, renaming and changing files where necessary. From the CLRMAMEPro panel, click Scanner . Below Fix , click the plus ( + ) button to enable all fixes. Click New Scan . Whenever prompted, click Yes To All . Any unneeded files should be moved to the backup folder. Note: CLRMAMEPro might give you a lot of warnings about renaming files to something that doesn't seem to be related to the original title. Usually there's no error here, it's just CLRMAMEPro not giving enough information as to what's happening. Just keep clicking Yes To All and you'll end up with a set that's fine when it finishes processing. When the scan is complete, you'll get a list of the files that you're missing in CLRMAMEPro's Scan results window. You can use the Rebuilder to integrate those into your set if you find them later. After your first scan, you can click Scan instead, which should be quicker than New Scan . Option B: Rebuilder CLRMAMEPro's Rebuilder checks one or more folders for files it might need as specified by a dat, then puts them where required. It can also be used if you decide you want to change how your files are compressed. In Settings , change the top left dropdown to Add-Paths . An Add-Path is where CLRMAMEPro checks for files it might need. Add the folders you want, then close settings. From the CLRMAMEPro panel, click Rebuilder . Click Use Add-Paths to use your Add-Paths as the source instead of an arbitrary folder. Note: CLRMAMEPro will also use your backup path automatically as an Add-Path. If you're going to be changing your Rom-Path a lot, it's usually a good idea to click Use 1 st RomPath before proceeding. Otherwise CLRMAMEPro remembers your old folder, and you'll get things going to the wrong place. Choose your compression settings, and whether or not you want to Remove Matched Sourcefiles . Click Rebuild . To check your progress after a rebuild, use the Scanner.","title":"Beginner's guide to ROM managers"},{"location":"beginners/#beginners-guide-to-rom-managers","text":"This guide is for those who've never used ROM managers before, and don't understand how to manage their files. For those new to dat managers, we'll cover one option in brief: CLRMAMEPro. Download and install CLRMAMEPro , then run it. The first screen you see is called the Profiler. This is where you load your various dats. Click Add DatFile . Select the Retool dat you created. CLRMAMEPro will ask you where you want to put the dat. This is just folder organization, if you want to keep your No-Intro dats separate from your Retool dats, for instance. Choose a location, then click OK . Click [NEW DATFILES] , then double click the Retool dat you added. On the next prompt, click Default . You should now see the main CLRMAMEPro panel: Click Settings .","title":"Beginner's guide to ROM managers"},{"location":"beginners/#optional-setup-compression-formats","text":"If you prefer compressing in RAR or 7z: Download and install WinRAR . Download and install 7zip . Copy WinRAR.exe from your WinRAR install folder to your CLRMAMEPro folder. Copy 7z.exe from your 7z install folder to your CLRMAMEPro folder. Return to CLRMAMEPro, then in the Settings window click Compressor . In the RAR tab, enter the following: Executable \u2014 winrar.exe Compress \u2014 a -y -r -ibck -m5 -s- %1 %2 Delete \u2014 d -y -ibck -m5 -s- %1 %2 Rename \u2014 rn -y -ibck -m5 -s- %1 %2 %3 In the 7z tab, enter the following: Executable \u2014 7z.exe Compress \u2014 a -y -r -ms=off -mx9 %1 %2 Delete \u2014 d -y -ms=off -mx9 %1 %2 NOTE: I could never get rename for 7z to work, all it seemed to do was recompress a brand new archive anyway, so it didn't seem worth the fuss. Also, this is max compression, so expect it to be very slow. 1. Click OK . 1. Click Save As Def. to make everything from Backup/Download and below your default settings. Now whenever you load a dat and select Default , these compression settings will load.","title":"Optional setup: compression formats"},{"location":"beginners/#set-up-rom-and-add-paths","text":"From the top left dropdown, select Rom-Paths . This is where your ROM set will ultimately end up. Click Add to select your Rom-Paths folder. You have a choice here as to what type of folder you select: Point your Rom-Paths folder to an existing set with the intention to trim it. To do this, add the folder, close the settings, then head to the Scanner section of these instructions. Point your Roms-Paths folder to an empty folder, then build the set from scratch using the contents of one or more other folders. To do this, add the folder, then head to the Rebuilder section of these instructions. You can also use the rebuilder if you are slowly building/updating your set from various sources.","title":"Set up Rom- and Add-Paths"},{"location":"beginners/#option-a-scanner","text":"CLRMAMEPro's scanner checks a folder against a dat for mismatches. It checks names, hashes, sizes, and other things, renaming and changing files where necessary. From the CLRMAMEPro panel, click Scanner . Below Fix , click the plus ( + ) button to enable all fixes. Click New Scan . Whenever prompted, click Yes To All . Any unneeded files should be moved to the backup folder. Note: CLRMAMEPro might give you a lot of warnings about renaming files to something that doesn't seem to be related to the original title. Usually there's no error here, it's just CLRMAMEPro not giving enough information as to what's happening. Just keep clicking Yes To All and you'll end up with a set that's fine when it finishes processing. When the scan is complete, you'll get a list of the files that you're missing in CLRMAMEPro's Scan results window. You can use the Rebuilder to integrate those into your set if you find them later. After your first scan, you can click Scan instead, which should be quicker than New Scan .","title":"Option A: Scanner"},{"location":"beginners/#option-b-rebuilder","text":"CLRMAMEPro's Rebuilder checks one or more folders for files it might need as specified by a dat, then puts them where required. It can also be used if you decide you want to change how your files are compressed. In Settings , change the top left dropdown to Add-Paths . An Add-Path is where CLRMAMEPro checks for files it might need. Add the folders you want, then close settings. From the CLRMAMEPro panel, click Rebuilder . Click Use Add-Paths to use your Add-Paths as the source instead of an arbitrary folder. Note: CLRMAMEPro will also use your backup path automatically as an Add-Path. If you're going to be changing your Rom-Path a lot, it's usually a good idea to click Use 1 st RomPath before proceeding. Otherwise CLRMAMEPro remembers your old folder, and you'll get things going to the wrong place. Choose your compression settings, and whether or not you want to Remove Matched Sourcefiles . Click Rebuild . To check your progress after a rebuild, use the Scanner.","title":"Option B: Rebuilder"},{"location":"clone-lists/","text":"Clone lists and metadata files Clone lists are JSON files that primarily define relationships between titles that Retool doesn't automatically pick up. They're useful both for matching titles of completely different names, and for overriding some of the default choices that Retool makes. Additionally, they can add more accurate filter criteria like different categories to titles. They are manually curated, and pull requests are welcome. Metadata files are also JSON files, contain scraped data from the No-Intro and Redump sites, and are used to provide extra language information not included in DAT files. They are generated, and as a general rule shouldn't be manually edited. Info No-Intro no longer provides DB downloads for some systems, such as Nintendo Entertainment System, Super Nintendo, and Nintendo 3DS. As such, some metadata files are out of date and the title names might not match those used in their respective DAT files. Although this is unfortunate, there are still many matches inside those metadata files which keep them relevant. Clone lists are stored in the clonelists subfolder, and metadata files are stored in the metadata folder. Retool selects the correct clone list and metadata files for the loaded DAT by checking the <name> and <url> tags in the header of the DAT file, and then looking for a matching filename with the release group appended in the clonelists and metadata folders \u2014 for example, Sony - PlayStation (Redump).json . If a matching file isn't found, then only Retool's automatic clone detection is used. Update clone lists Clone lists and metadata files are updated every now and then to match the latest DAT files. When processing new DAT files, it's a good idea to check for clone list updates first. Info Sometimes clone list functionality needs to be changed to support new features. To ensure things work as intended, make sure you're always running the latest version of Retool. To update clone lists and metadata files, complete the following instructions: GUI Command line Click File > Update clone lists . In your terminal or command prompt, enter the following command: retool.py --update Info Depending on your operating system, all Python commands in this guide might need to be prefixed with python or python3 to work. Edit and create clone lists You can contribute to Retool's clone lists to help make them more accurate.","title":"Clone lists and metadata files"},{"location":"clone-lists/#clone-lists-and-metadata-files","text":"Clone lists are JSON files that primarily define relationships between titles that Retool doesn't automatically pick up. They're useful both for matching titles of completely different names, and for overriding some of the default choices that Retool makes. Additionally, they can add more accurate filter criteria like different categories to titles. They are manually curated, and pull requests are welcome. Metadata files are also JSON files, contain scraped data from the No-Intro and Redump sites, and are used to provide extra language information not included in DAT files. They are generated, and as a general rule shouldn't be manually edited. Info No-Intro no longer provides DB downloads for some systems, such as Nintendo Entertainment System, Super Nintendo, and Nintendo 3DS. As such, some metadata files are out of date and the title names might not match those used in their respective DAT files. Although this is unfortunate, there are still many matches inside those metadata files which keep them relevant. Clone lists are stored in the clonelists subfolder, and metadata files are stored in the metadata folder. Retool selects the correct clone list and metadata files for the loaded DAT by checking the <name> and <url> tags in the header of the DAT file, and then looking for a matching filename with the release group appended in the clonelists and metadata folders \u2014 for example, Sony - PlayStation (Redump).json . If a matching file isn't found, then only Retool's automatic clone detection is used.","title":"Clone lists and metadata files"},{"location":"clone-lists/#update-clone-lists","text":"Clone lists and metadata files are updated every now and then to match the latest DAT files. When processing new DAT files, it's a good idea to check for clone list updates first. Info Sometimes clone list functionality needs to be changed to support new features. To ensure things work as intended, make sure you're always running the latest version of Retool. To update clone lists and metadata files, complete the following instructions: GUI Command line Click File > Update clone lists . In your terminal or command prompt, enter the following command: retool.py --update Info Depending on your operating system, all Python commands in this guide might need to be prefixed with python or python3 to work.","title":"Update clone lists"},{"location":"clone-lists/#edit-and-create-clone-lists","text":"You can contribute to Retool's clone lists to help make them more accurate.","title":"Edit and create clone lists"},{"location":"contribute-clone-lists/","text":"Create and edit clone lists Contributing to Retool's clone lists directly involves code and being familiar with Git and GitHub. If that's not something you're interested in, you can still request clone list changes by filing an issue . If you want to contribute directly, fork the clone lists and metadata repository , read the following guidelines, make your changes, and then submit a pull request . Before you begin If you want to create or edit clone lists, you need to understand JSON and the following data structures: Key/value pairs Strings Integers Arrays Objects It also helps to understand Retool's terminology , and the different names it assigns to titles to help match and group them together accurately. Finally, you should read How Retool works so you understand the order in which things are processed, and can solve problems using the correct clone list features. Titles that Retool automatically detects as clones Before referencing clone lists, Retool parses a DAT file and creates objects for all of its titles. If multiple titles have the same group name and short name , Retool assumes they're related to each other. Names should only be added to clone lists in the following situations: To link together titles that ordinarily would have different group/short names due to regional naming, for example Indigo Prophecy and Fahrenheit . To override Retool's default grouping. To assign categories to titles. To designate a title as missing in action (MIA). Clone list location and names Clone lists are found by default in the clonelists subfolder. What subfolder Retool looks for clone lists in is defined in config/internal-config.json in the cloneLists object: \"cloneLists\" : { \"localDir\" : \"clonelists\" } Retool selects the correct clone list and metadata files for the loaded DAT file by checking the <name> and <url> tags in the header of the DAT file, and then looking for a matching filename with the release group appended in the clone lists and metadata folders. For example, for Redump's Sony PlayStation DAT file, the <name> is Sony - PlayStation . Therefore Retool looks for the clone list Sony - PlayStation (Redump).json in the clone lists folder. If a matching file isn't found, then only Retool's automatic clone detection is used. Clone list structure Each clone list JSON file contains different top-level keys that determine how Retool treats the titles in the related input DAT file. The keys are as follows: description (obj[str, str]) categories (array[obj]) mias (array[str]) overrides (array[obj]) removes (array[obj]) variants (array[obj]) All keys are optional, except for description . They should be kept in the same order in the clone list as the previous list. Description The description object holds information related to the clone list itself, and is always at the top of the file. It is mandatory to include. A description object looks similar to the following example: \"description\" : { \"name\" : \"Sony - PlayStation (Redump)\" , \"lastUpdated\" : \"24 July 2022\" , \"minimumVersion\" : \"2.00\" } A description object contains the following keys: name (str) : The system name and release group of the DAT the clone list is related to. lastUpdated (str) : The last time the clone list was updated, in DD-MMMM-YYYY format. minimumVersion (str) : The minimum version of Retool required to understand all the features of the clone list. The minimumVersion key is the only data in the description used by Retool, the rest is to make parsing and updating the clone list easier for humans. Categories The categories array specifies titles that should have their categories reassigned. A category is a class of titles, like Demos , Games , and Multimedia . Multiple categories can be assigned to a title. A categories array looks similar to the following example: \"categories\" : [ // (1)! { \"searchTerm\" : \"Ace Combat 3 - Electrosphere - Direct Audio with AppenDisc\" , // (2)! \"nameType\" : \"short\" , // (3)! \"categories\" : [ \"Audio\" ] // (4)! }, { \"searchTerm\" : \"Arc the Lad III (Japan) (Demo 2)\" , \"nameType\" : \"full\" , \"categories\" : [ \"Demos\" , \"Multimedia\" ] }, { \"searchTerm\" : \"Derby Stallion Magazine Furoku.*\" , \"nameType\" : \"regex\" , \"categories\" : [ \"Coverdisc\" ] } ] The categories array. The search term used when looking for a title in an input DAT file. What name type the search term is, so Retool can match it accurately against names in the input DAT file. The categories to assign to the title if it's found in the input DAT file. Each object in the categories array can include the following keys: searchTerm (str) : The search term used when looking for a title in an input DAT file. nameType (str) : Optional, defaults to tagFree . What name type the search term is, so Retool can match it accurately against names in the input DAT file. Valid options include: full (str) : The full name . short (str) : The short name . regionFree (str) : The region-free name . tagFree (str) : The tag-free name . regex (str) : A regex match on the full name. categories (array[str]) : An array containing each category to assign to the title. Retool overrides existing categories, so if you want the original category to be kept, include it in the array. MIAs A missing in action (MIA) title is one that has had its sizes and hashes indexed, but the title itself hasn't been made available to the public. The mias array is only required in clone lists for Redump DAT files, as No-Intro specifies MIAs directly in its DAT files. MIAs are scraped from Redump's wiki , and as a general rule shouldn't be manually added or removed. An mias array looks similar to the following example: \"mias\" : [ // (1)! \"Arc the Lad III (Japan) (Demo 2)\" , // (2)! \"Cochons de GuerreLes (France) (Rev 1)\" ] The MIAs array. The full name of the title to search for in the input DAT file. MIAs only use full names to search for matching titles in the associated DAT file, and so an mias array only contains strings that match those full names. Overrides The overrides array assigns titles different group and short names , manually bundling together specific games instead of using Retool's automatic grouping. Because Retool groups together titles with the same short name by default, this is particularly useful to work around the problem where games have the same short name, but are entirely different in content. For example, the Japanese version of King's Field was never released in the USA. Japan's King's Field II was released in the USA, however it was given the original game's name, King's Field . By default, Retool sees King's Field (USA) and King's Field (Japan) , and incorrectly groups them together as the same title as they have the same short name, King's Field . To get around this, we can assign King's Field (Japan) a unique group and short name through the overrides array, to stop it being grouped automatically with King's Field (USA) . An overrides array looks similar to the following example: \"overrides\" : [ // (1)! { \"searchTerm\" : \"King's Field (Japan)\" , // (2)! \"newGroup\" : \"King's Field Japan\" // (3)! }, { \"searchTerm\" : \"Mobile Suit Gundam - Version 2.0 (.*)\" , \"nameType\" : \"regex\" , // (4)! \"newGroup\" : \"Mobile Suit Gundam - Version 2.0\" } ] The overrides array. The search term used when looking for a title in an input DAT file. The new group and short name to assign to the title, if it's found in an input DAT file. What name type the search term is, so Retool can match it accurately against names in the input DAT file. Each object in the overrides array can include the following keys: searchTerm (str) : The search term used when looking for a title in an input DAT file. nameType (str) : Optional, defaults to tagFree . What name type the search term is, so Retool can match it accurately against names in the input DAT file. Valid options include: full (str) : The full name . short (str) : The short name . regionFree (str) : The region-free name . tagFree (str) : The tag-free name . regex (str) : A regex match on the full name. newGroup (str) : The new group and short name to assign to the title. Caution To keep things easy, avoid parentheses () where possible in newGroup values. Additionally, avoid adding anything that looks like version string, for example, v2.00 . You want to do this because the group and short names assigned to overridden titles aren't an exact copy of the newGroup value. Instead, the value is used as a basis to generate these names using Retool's naming rules . Override conditions You can specify a condition as to whether or not an override should be implemented. The only condition supported is based on the user's region order. Conditions are rare, and are often only used to deal with clashes when outputting DAT files in legacy parent/clone format. A condition looks similar to the following example: \"overrides\" : [ { \"searchTerm\" : \"Tomb Raider III - (Adventures of|Les Aventures de) Lara Croft \\\\((Europe|France|Germany|Italy|Spain|USA)\\\\)(.*)?\" , \"nameType\" : \"regex\" , \"newGroup\" : \"Tomb Raider III - Adventures of Lara Croft (Disc 2) (International Version)\" , \"condition\" : { // (1)! \"regionOrder\" : { // (2)! \"higherRegions\" : [ \"Japan\" , \"Asia\" ], // (3)! \"lowerRegions\" : [ \"USA\" , \"Europe\" , \"France\" , \"Germany\" , \"Italy\" , \"Spain\" ], \"elseGroup\" : \"Tomb Raider III - Adventures of Lara Croft\" // (4)! } }, } ] The condition object. The regionOrder condition. If any of these regions is higher in the user order than all of the regions in the lowerRegions array, then the condition is True . If the condition is False , set the group and short name to this group instead of the newGroup value. A condition object can include the following keys: regionOrder (object) : Specifies to use the region order condition. higherRegions (array[str]) : If any of the regions in the higherRegions array is higher in the user region order than all of the regions in the lowerRegions array, then the condition is True . lowerRegions (array[str]) : If any of the regions in the higherRegions array is higher in the user region order than all of the regions in the lowerRegions array, then the condition is True . elseGroup (str) : Optional, defaults to the automatic group and short names assigned by Retool. If the condition is False , set the group and short name to this group instead of the newGroup value. priority (int) : Optional. If the condition is True , set the title to this clone list priority. If the condition is False , set the clone list priority to 2 . A priority directs Retool to choose one title over another if they are in the same region, and have the same group name and short name. Removes The removes array lists all titles to force remove from the output DAT for that particular system. It should only be used if overrides or variants can't achieve the same result. Caution The removes array should almost never be used, as any titles listed are completely removed from Retool's consideration during processing, and their relationship with other titles is destroyed. This makes it particularly hard to keep track of relationships when updating clone lists, and can frustrate any traces you perform to debug issues. A removes array looks similar to the following example: \"removes\" : [ { \"searchTerm\" : \"King of Fighters 2000-2001, The (Europe)\" , \"nameType\" : \"full\" } ] Each object in the removes array can include the following keys: searchTerm (str) : The search term used when looking for a title in an input DAT file. nameType (str) : Optional, defaults to tagFree . What name type the search term is, so Retool can match it accurately against names in the input DAT file. Valid options include: full (str) : The full name . short (str) : The short name . regionFree (str) : The region-free name . tagFree (str) : The tag-free name . Note Unlike other clone list features, the regex name type isn't supported for removes . Variants The variants array is where all the different regional names and variations for titles are stored, grouping titles together that Retool would otherwise miss. By default, Retool already groups together titles that have the same short name . A basic variants array looks similar to the following example: \"variants\" : [ // (1)! { \"group\" : \"Example Title\" , // (2)! \"titles\" : [ // (3)! { \"searchTerm\" : \"Example Title\" }, // (4)! { \"searchTerm\" : \"Exemple de Titre\" }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } // (5)! ] } ] The variants array. The new group and short name to assign to the contained titles, if they're found in an input DAT file. The titles array contains singular, standard titles that belong to this group. The search term used when looking for a title in an input DAT file. If there are two titles from the same region, a priority can determine which should be selected. Lower numbers are higher priority. If no priority is specified, the priority of the entry is 1 . Each object in the variants array can include the following keys: group (str) : The group value is used as the basis for a new group name and short name for all of the titles in the object. titles (array[obj]) : Optional. Contains singular, standard titles that belong to the group. supersets (array[obj]) : Optional. Contains singular titles that contain more content, or for some reason are superior to standard versions. This might include, for example, a Game of the Year edition, an all-in-one pack that bundles a game and all its DLC, or a DVD version of a title that was previously released on multiple CDs. compilations (array[obj]) : Optional. Contains titles that in themselves contain multiple titles. They might be from the same series of games, a single publisher, from a single genre, or otherwise. Caution The group and short names assigned to the contained titles aren't an exact copy of the top-level key. Instead, the key is used as a basis to generate these names. The rules for how these names are created are detailed in Retool's naming system . Each object in the titles , supersets , and compilations arrays can include the following keys: searchTerm (str) : The search term used when looking for a title in an input DAT file. nameType (str) : Optional, defaults to short . What name type the search term is, so Retool can match it accurately against names in the input DAT file. Valid options include: full (str) : The full name . short (str) : The short name . regionFree (str) : The region-free name . tagFree (str) : The tag-free name . regex (str) : A regex match on the full name. priority (int) : Optional, defaults to 1 . Lower numbers are considered higher priority, with 1 the highest priority. Typically, a title with a higher priority wins when Retool is choosing a 1G1R title> However, when priority is calculated in Retool's process, and how it interacts across titles , supersets , and compilations arrays can change the outcome. Read Example: working with priorities for more information. titlePosition (int) : Optional, defaults to none , compilations objects only. This determines whether a title comes first, second, third, or later in a compilation's name. This is only really useful for GameBoy Advance titles, as No-Intro's DAT differentiates languages supported by each title in a compilation by using a + symbol. Still, it's wise to include where possible in case that naming standard eventually makes it to other DAT files. Ordering variants arrays The order of variants arrays is always: titles supersets compilations . The group key in each array object should be based on one of the title names in the group, preferably from the USA version and in English. Some titles won't exist in all regions, so follow this order for the group name: USA name in English United Kingdom name in English European name in English Any other region in English Japanese name Spanish name Portuguese name French name German name Whatever name is available To ease maintenance, make sure the objects inside the titles , compilations , and supersets arrays are ordered by priority, and then alphabetically within those priorities. For example, this is correct: \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" }, { \"searchTerm\" : \"Exemple de Titre\" }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ] } ] This is incorrect: \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Exemple de Titre\" } ] } ] Warning Avoid setting a searchTerm with the same name as its group to a lower priority. For example: { \"group\" : \"Title\" , \"titles\" : [ { \"searchTerm\" : \"Title Director's Cut\" } { \"searchTerm\" : \"Title\" , \"priority\" : 2 } ] } In this scenario, Retool sees the first entry Title Director's Cut , and goes looking for titles with the short name title director's cut . When it finds a match, it changes that title's short name to match the group, title . When it gets to the second entry, Title , it goes looking for titles with the short name title ... but that's what we just renamed the Director's Cut short name to. Everything ends up being assigned a priority of 2 as a result. If you run into this situation, the easiest solution is to rename the group to match the higher priority title: { \"group\" : \"Title Director's Cut\" , \"titles\" : [ { \"searchTerm\" : \"Title Director's Cut\" } { \"searchTerm\" : \"Title\" , \"priority\" : 2 } ] } Example: working with titles If we have the following title names in a DAT file, that are all the same title across different regions: Example Title (USA) Example Title Budget Edition (USA) Example Title (Europe) Exemple de Titre (France) Titolo di Esempio (Italy) And a user selects the following region order: USA Europe United Kingdom France Italy Then Retool automatically links together Example Title (USA) and Example Title (Europe) , as they have the same short name, example title . However it misses the other titles, as by default they have different short names. A variants object like the following example links them all together: \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" }, { \"searchTerm\" : \"Exemple de Titre\" }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ] } ] Because no nameType is specified in each title object, Retool assumes the searchTerm is a short name, and looks in the related DAT for names that have the same short name. When it finds those titles, it assigns the same group and short name to them, example title , and then Retool knows they are related. The priority of 2 for Example Title Budget Edition indicates that when Retool is processing the USA region, to select Example Title (USA) over Example Title Budget Edition (USA) when Retool considers clone list priority. There are other factors that might eliminate a title before Retool gets to clone list priority \u2014 read How Retool works for the order in which Retool filters titles. In this example, because the user has set USA first in the region order, then Example Title (USA) is selected as the 1G1R title, and the others are discarded. Example: working with supersets Let's take the titles example, but add another title into the mix: Example Title - Game of the Year Edition (United Kingdom) . Example Title (USA) Example Title Budget Edition (USA) Example Title - Game of the Year Edition (United Kingdom) Example Title (Europe) Exemple de Titre (France) Titolo di Esempio (Italy) This edition contains the latest version of the game, plus all of its DLC, but was never released in the USA or Europe. If the user is an English speaker, then how do we make sure this title gets selected as the superior version of a game, even if the USA or Europe is higher up their region order? With the supersets array. \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" }, { \"searchTerm\" : \"Exemple de Titre\" }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title - Game of the Year Edition\" } ] } ] The objects in the supersets array list supersets . By default, supersets look at language support over region order. If a superset supports the top language found in a group of titles (in this example, that's English), then it's selected over other standard titles in higher regions as it's considered superior. In this example, because no language order is included but USA is listed first, Retool infers a preference for English, finds the superset Example Title - Game of the Year Edition (United Kingdom) , and selects it as the 1G1R title above the standard USA title, as it supports the same language and is considered superior due to having more content. Note A user can force adherence to region order with the Prefer regions over languages option. In that scenario, Example Title (USA) is selected at the cost of losing the extra content in Example Title - Game of the Year Edition (United Kingdom) . Supersets are also useful to manage things like DVD releases of titles that were previously distributed on multiple CDs. For example, if a DAT contains the following title names, all of which represent the same title: Example Title (Disc 1) (USA) Example Title (Disc 2) (USA) Example Title (Disc 3) (USA) Beispieltitel (Disc 1) (Germany) Beispieltitel (Disc 2) (Germany) Beispieltitel (Disc 3) (Germany) Example Title (USA) And Example Title (USA) is the DVD version of the three-disc CD release Example Title and Beispieltitel , then you can set up a variants object as follows: \"variants\" : [ { \"group\" : \"Example Title (Disc 1)\" , \"titles\" : [ { \"searchTerm\" : \"Example Title (Disc 1)\" }, { \"searchTerm\" : \"Beispieltitel (Disc 1)\" } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title\" } ] }, { \"group\" : \"Example Title (Disc 2)\" , \"titles\" : [ { \"searchTerm\" : \"Example Title (Disc 2)\" }, { \"searchTerm\" : \"Beispieltitel (Disc 2)\" } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title\" } ] }, { \"group\" : \"Example Title (Disc 3)\" , \"titles\" : [ { \"searchTerm\" : \"Example Title (Disc 3)\" }, { \"searchTerm\" : \"Beispieltitel (Disc 3)\" } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title\" } ] } ] Note that the Example Title superset is in all three groups. In this scenario, if a user selects USA as their highest region, then Example Title (USA) is selected as the 1G1R title over the original, multidisc CD version. If they select Germany, then the three German discs are chosen instead. Example: working with compilations Retool automatically considers individual titles and compilations that are related, and chooses the solution that results in the fewest duplicate titles (and therefore lowest storage requirement). Compilations in a variants array are handled in a similar way to the following example: \"variants\" : [ { \"group\" : \"3-D Ultra Pinball\" , \"titles\" : [ { \"searchTerm\" : \"3-D Ultra Pinball\" } ], \"compilations\" : [ { \"searchTerm\" : \"3-D Ultra Pinball & Trophy Bass\" , \"titlePosition\" : 1 } ] }, { \"group\" : \"Trophy Bass\" , \"compilations\" : [ { \"searchTerm\" : \"3-D Ultra Pinball & Trophy Bass\" , \"titlePosition\" : 2 } ] } ] Note that 3-D Ultra Pinball & Trophy Bass belongs to both the 3-D Ultra Pinball and Trophy Bass groups. During processing, Retool splits compilations into virtual versions of their consituent titles. This means that when you add a compilation to a variant object, it's only being judged on the individual title associated with that group, not all titles in the compilation. As far as Retool is concerned in this example, 3-D Ultra Pinball & Trophy Bass in the 3-D Ultra Pinball group is just another version of 3-D Ultra Pinball , and 3-D Ultra Pinball & Trophy Bass in the Trophy Bass group is just another version of Trophy Bass . It's important to list a compilation in all groups it's related to, even if a standalone title doesn't exist. This way Retool knows which titles make up the compilation and can make more accurate choices. In this example, if a related DAT contains the following title names: 3-D Ultra Pinball (Europe) 3-D Ultra Pinball & Trophy Bass (USA) And a user selects the following region order: USA Europe Then Retool selects 3-D Ultra Pinball & Trophy Bass (USA) as the 1G1R title, as that solution is the one with the least duplication. Example: working with priorities It's useful to understand how priorities work across the titles , supersets , and compilations arrays. Titles If you use priority in a titles array, it's taken into account for titles in the same region, with same group and short name. The priority does not take effect for titles in different regions. For example, if a DAT file contains the following title names: Example Title (USA) Example Title Budget Edition (USA) Example Title (Europe) And the following variants array is in the related clone list: { \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" } { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ] } ] } Then both Example Title (USA) and Example Title (Europe) receive a priority of 1, as no priority has been specified. Example Title Budget Edition (USA) is assigned a priority of 2 as defined by the clone list. Because Retool first bundles games from the same region together for comparison, Example Title (USA) and Example Title Budget Edition (USA) are compared, and the latter is dropped because it has a lower priority of 2. Afterwards cross-region comparisons are made, so Example Title (USA) and Example Title (Europe) are compared, however priority is not taken into account here, only things like user region and language order. Supersets While the behavior for priorities in supersets is similar to that in titles, superset priorities are only compared against other superset priorities, and compilation priorities. For example, if a DAT file contains the following title names: Example Title (USA) Example Title Budget Edition (USA) Example Title - Special Edition (Europe) Example Title - Super Special Edition (Europe) A user selects the following region order: USA Europe And the following variants array is in the related clone list: { \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" } { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title - Super Special Edition\" } { \"searchTerm\" : \"Example Title - Special Edition\" , \"priority\" : 2 } ] } ] } Then the following happens: Because the supersets are in English (and English is this user's highest language in their implied language order), they get selected over the standard titles even though they are from Europe, a lower ordered region. This has nothing to do with priority set in the clone list \u2014 it's just how supersets work. Example Title - Super Special Edition (Europe) then gets chosen over Example Title - Special Edition , as the latter has a lower priority. Compilations Priorities affect compilations slightly differently, as Retool splits compilations into individual virtual titles to compare against the other titles. For example, if a DAT file contains the following title names: Example Title (USA) Example Title (Europe) Example Title 2 - Special Edition (USA) Example Title 1 & 2 (Europe) A user selects the following region order: USA Europe And the following variants array is in the related clone list: { \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" } ], \"compilations\" : [ { \"searchTerm\" : \"Example Title 1 & 2\" } ] }, { \"group\" : \"Example Title 2\" , \"titles\" : [ { \"searchTerm\" : \"Example Title 2 - Special Edition\" } ], \"compilations\" : [ { \"searchTerm\" : \"Example Title 1 & 2\" , \"priority\" : 2 } ] } ] } Then the following happens with the compilations: Retool looks at the Example Title group, and finds Example Title 1 & 2 (Europe) in the DAT via the compilations search term Example Title 1 & 2 . That compilation is then assigned a virtual name that matches the group name, and includes region and language information: :V: Example Title (Europe) (En) . This effectively splits out that indvidual title from the compilation for comparison, meaning the second title in the compilation isn't considered when comparing titles in this group. Because no priority is defined, the virtual title is assigned a priority of 1. Retool looks at the Example Title 2 group, and finds Example Title 1 & 2 (Europe) in the DAT via the compilations search term Example Title 1 & 2 . Although it's the same compilation as before, it's assigned a virtual name that matches the Example Title 2 group name: :V: Example Title 2 (Europe) (En) . This means the first title in the compilation isn't considered when comparing titles in this group. The virtual title is assigned a priority of 2, as specified in the clone list. Retool compares the virtual compilation titles against the individual titles in the same groups: Example Title (USA) is compared against :V: Example Title (Europe) (En) . The USA title wins due to region priority. Example Title 2 - Special Edition (USA) is compared against :V: Example Title 2 (Europe) (En) . The latter is discarded because it has a lower priority (which is assessed before region order). Ultimately Example Title (USA) and Example Title 2 - Special Edition (USA) become the 1G1R titles, and Example Title 1 & 2 (Europe) is discarded. Note Superset priority is compared directly against compilation priority, just like title priority is. Format clone lists Clone lists follow a particular format to keep maintainence easy: Valid JSON. Tabbed indenting. LF line endings. Top-level keys should be kept in the order listed in this guide . Object keys should be in the order shown in the examples in this guide. Array contents should be in alphabetical order, sorted by an object's top key. This is either going to be searchTerm or group . Make sure your format is correct before submitting a pull request. Test clone lists Before submitting a pull request, it's important to test your changes to make sure they're correct. Test your clone list update against the newest version of a DAT from No-Intro or Redump, and enable the following settings: GUI Command line In the Global settings tab, click Options . Enable Report clone list warnings during processing and Pause on clone list warnings . --warnings --warningpause Run Retool on the DAT file, and fix your clone list until no warnings are given. Hashing for updates Retool manages clone list updates via the hash.json file in the clone lists subfolder. When looking for updates, the newest hash.json is downloaded from from the location specified in internal-config.json : \"cloneListMetadataUrl\" : \"https://raw.githubusercontent.com/unexpectedpanda/retool-clonelists-metadata/\" , The SHA256 hashes in that file are then compared against the clone lists on the local disk. If a clone list hash doesn't match, then a new version of that file is downloaded from the same location as listed above. When submitting PRs for clone lists, make sure to also update the appropriate hash.json file with the SHA256 hash of the updated or new clone list.","title":"Clone lists"},{"location":"contribute-clone-lists/#create-and-edit-clone-lists","text":"Contributing to Retool's clone lists directly involves code and being familiar with Git and GitHub. If that's not something you're interested in, you can still request clone list changes by filing an issue . If you want to contribute directly, fork the clone lists and metadata repository , read the following guidelines, make your changes, and then submit a pull request .","title":"Create and edit clone lists"},{"location":"contribute-clone-lists/#before-you-begin","text":"If you want to create or edit clone lists, you need to understand JSON and the following data structures: Key/value pairs Strings Integers Arrays Objects It also helps to understand Retool's terminology , and the different names it assigns to titles to help match and group them together accurately. Finally, you should read How Retool works so you understand the order in which things are processed, and can solve problems using the correct clone list features.","title":"Before you begin"},{"location":"contribute-clone-lists/#titles-that-retool-automatically-detects-as-clones","text":"Before referencing clone lists, Retool parses a DAT file and creates objects for all of its titles. If multiple titles have the same group name and short name , Retool assumes they're related to each other. Names should only be added to clone lists in the following situations: To link together titles that ordinarily would have different group/short names due to regional naming, for example Indigo Prophecy and Fahrenheit . To override Retool's default grouping. To assign categories to titles. To designate a title as missing in action (MIA).","title":"Titles that Retool automatically detects as clones"},{"location":"contribute-clone-lists/#clone-list-location-and-names","text":"Clone lists are found by default in the clonelists subfolder. What subfolder Retool looks for clone lists in is defined in config/internal-config.json in the cloneLists object: \"cloneLists\" : { \"localDir\" : \"clonelists\" } Retool selects the correct clone list and metadata files for the loaded DAT file by checking the <name> and <url> tags in the header of the DAT file, and then looking for a matching filename with the release group appended in the clone lists and metadata folders. For example, for Redump's Sony PlayStation DAT file, the <name> is Sony - PlayStation . Therefore Retool looks for the clone list Sony - PlayStation (Redump).json in the clone lists folder. If a matching file isn't found, then only Retool's automatic clone detection is used.","title":"Clone list location and names"},{"location":"contribute-clone-lists/#clone-list-structure","text":"Each clone list JSON file contains different top-level keys that determine how Retool treats the titles in the related input DAT file. The keys are as follows: description (obj[str, str]) categories (array[obj]) mias (array[str]) overrides (array[obj]) removes (array[obj]) variants (array[obj]) All keys are optional, except for description . They should be kept in the same order in the clone list as the previous list.","title":"Clone list structure"},{"location":"contribute-clone-lists/#description","text":"The description object holds information related to the clone list itself, and is always at the top of the file. It is mandatory to include. A description object looks similar to the following example: \"description\" : { \"name\" : \"Sony - PlayStation (Redump)\" , \"lastUpdated\" : \"24 July 2022\" , \"minimumVersion\" : \"2.00\" } A description object contains the following keys: name (str) : The system name and release group of the DAT the clone list is related to. lastUpdated (str) : The last time the clone list was updated, in DD-MMMM-YYYY format. minimumVersion (str) : The minimum version of Retool required to understand all the features of the clone list. The minimumVersion key is the only data in the description used by Retool, the rest is to make parsing and updating the clone list easier for humans.","title":"Description"},{"location":"contribute-clone-lists/#categories","text":"The categories array specifies titles that should have their categories reassigned. A category is a class of titles, like Demos , Games , and Multimedia . Multiple categories can be assigned to a title. A categories array looks similar to the following example: \"categories\" : [ // (1)! { \"searchTerm\" : \"Ace Combat 3 - Electrosphere - Direct Audio with AppenDisc\" , // (2)! \"nameType\" : \"short\" , // (3)! \"categories\" : [ \"Audio\" ] // (4)! }, { \"searchTerm\" : \"Arc the Lad III (Japan) (Demo 2)\" , \"nameType\" : \"full\" , \"categories\" : [ \"Demos\" , \"Multimedia\" ] }, { \"searchTerm\" : \"Derby Stallion Magazine Furoku.*\" , \"nameType\" : \"regex\" , \"categories\" : [ \"Coverdisc\" ] } ] The categories array. The search term used when looking for a title in an input DAT file. What name type the search term is, so Retool can match it accurately against names in the input DAT file. The categories to assign to the title if it's found in the input DAT file. Each object in the categories array can include the following keys: searchTerm (str) : The search term used when looking for a title in an input DAT file. nameType (str) : Optional, defaults to tagFree . What name type the search term is, so Retool can match it accurately against names in the input DAT file. Valid options include: full (str) : The full name . short (str) : The short name . regionFree (str) : The region-free name . tagFree (str) : The tag-free name . regex (str) : A regex match on the full name. categories (array[str]) : An array containing each category to assign to the title. Retool overrides existing categories, so if you want the original category to be kept, include it in the array.","title":"Categories"},{"location":"contribute-clone-lists/#mias","text":"A missing in action (MIA) title is one that has had its sizes and hashes indexed, but the title itself hasn't been made available to the public. The mias array is only required in clone lists for Redump DAT files, as No-Intro specifies MIAs directly in its DAT files. MIAs are scraped from Redump's wiki , and as a general rule shouldn't be manually added or removed. An mias array looks similar to the following example: \"mias\" : [ // (1)! \"Arc the Lad III (Japan) (Demo 2)\" , // (2)! \"Cochons de GuerreLes (France) (Rev 1)\" ] The MIAs array. The full name of the title to search for in the input DAT file. MIAs only use full names to search for matching titles in the associated DAT file, and so an mias array only contains strings that match those full names.","title":"MIAs"},{"location":"contribute-clone-lists/#overrides","text":"The overrides array assigns titles different group and short names , manually bundling together specific games instead of using Retool's automatic grouping. Because Retool groups together titles with the same short name by default, this is particularly useful to work around the problem where games have the same short name, but are entirely different in content. For example, the Japanese version of King's Field was never released in the USA. Japan's King's Field II was released in the USA, however it was given the original game's name, King's Field . By default, Retool sees King's Field (USA) and King's Field (Japan) , and incorrectly groups them together as the same title as they have the same short name, King's Field . To get around this, we can assign King's Field (Japan) a unique group and short name through the overrides array, to stop it being grouped automatically with King's Field (USA) . An overrides array looks similar to the following example: \"overrides\" : [ // (1)! { \"searchTerm\" : \"King's Field (Japan)\" , // (2)! \"newGroup\" : \"King's Field Japan\" // (3)! }, { \"searchTerm\" : \"Mobile Suit Gundam - Version 2.0 (.*)\" , \"nameType\" : \"regex\" , // (4)! \"newGroup\" : \"Mobile Suit Gundam - Version 2.0\" } ] The overrides array. The search term used when looking for a title in an input DAT file. The new group and short name to assign to the title, if it's found in an input DAT file. What name type the search term is, so Retool can match it accurately against names in the input DAT file. Each object in the overrides array can include the following keys: searchTerm (str) : The search term used when looking for a title in an input DAT file. nameType (str) : Optional, defaults to tagFree . What name type the search term is, so Retool can match it accurately against names in the input DAT file. Valid options include: full (str) : The full name . short (str) : The short name . regionFree (str) : The region-free name . tagFree (str) : The tag-free name . regex (str) : A regex match on the full name. newGroup (str) : The new group and short name to assign to the title. Caution To keep things easy, avoid parentheses () where possible in newGroup values. Additionally, avoid adding anything that looks like version string, for example, v2.00 . You want to do this because the group and short names assigned to overridden titles aren't an exact copy of the newGroup value. Instead, the value is used as a basis to generate these names using Retool's naming rules .","title":"Overrides"},{"location":"contribute-clone-lists/#override-conditions","text":"You can specify a condition as to whether or not an override should be implemented. The only condition supported is based on the user's region order. Conditions are rare, and are often only used to deal with clashes when outputting DAT files in legacy parent/clone format. A condition looks similar to the following example: \"overrides\" : [ { \"searchTerm\" : \"Tomb Raider III - (Adventures of|Les Aventures de) Lara Croft \\\\((Europe|France|Germany|Italy|Spain|USA)\\\\)(.*)?\" , \"nameType\" : \"regex\" , \"newGroup\" : \"Tomb Raider III - Adventures of Lara Croft (Disc 2) (International Version)\" , \"condition\" : { // (1)! \"regionOrder\" : { // (2)! \"higherRegions\" : [ \"Japan\" , \"Asia\" ], // (3)! \"lowerRegions\" : [ \"USA\" , \"Europe\" , \"France\" , \"Germany\" , \"Italy\" , \"Spain\" ], \"elseGroup\" : \"Tomb Raider III - Adventures of Lara Croft\" // (4)! } }, } ] The condition object. The regionOrder condition. If any of these regions is higher in the user order than all of the regions in the lowerRegions array, then the condition is True . If the condition is False , set the group and short name to this group instead of the newGroup value. A condition object can include the following keys: regionOrder (object) : Specifies to use the region order condition. higherRegions (array[str]) : If any of the regions in the higherRegions array is higher in the user region order than all of the regions in the lowerRegions array, then the condition is True . lowerRegions (array[str]) : If any of the regions in the higherRegions array is higher in the user region order than all of the regions in the lowerRegions array, then the condition is True . elseGroup (str) : Optional, defaults to the automatic group and short names assigned by Retool. If the condition is False , set the group and short name to this group instead of the newGroup value. priority (int) : Optional. If the condition is True , set the title to this clone list priority. If the condition is False , set the clone list priority to 2 . A priority directs Retool to choose one title over another if they are in the same region, and have the same group name and short name.","title":"Override conditions"},{"location":"contribute-clone-lists/#removes","text":"The removes array lists all titles to force remove from the output DAT for that particular system. It should only be used if overrides or variants can't achieve the same result. Caution The removes array should almost never be used, as any titles listed are completely removed from Retool's consideration during processing, and their relationship with other titles is destroyed. This makes it particularly hard to keep track of relationships when updating clone lists, and can frustrate any traces you perform to debug issues. A removes array looks similar to the following example: \"removes\" : [ { \"searchTerm\" : \"King of Fighters 2000-2001, The (Europe)\" , \"nameType\" : \"full\" } ] Each object in the removes array can include the following keys: searchTerm (str) : The search term used when looking for a title in an input DAT file. nameType (str) : Optional, defaults to tagFree . What name type the search term is, so Retool can match it accurately against names in the input DAT file. Valid options include: full (str) : The full name . short (str) : The short name . regionFree (str) : The region-free name . tagFree (str) : The tag-free name . Note Unlike other clone list features, the regex name type isn't supported for removes .","title":"Removes"},{"location":"contribute-clone-lists/#variants","text":"The variants array is where all the different regional names and variations for titles are stored, grouping titles together that Retool would otherwise miss. By default, Retool already groups together titles that have the same short name . A basic variants array looks similar to the following example: \"variants\" : [ // (1)! { \"group\" : \"Example Title\" , // (2)! \"titles\" : [ // (3)! { \"searchTerm\" : \"Example Title\" }, // (4)! { \"searchTerm\" : \"Exemple de Titre\" }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } // (5)! ] } ] The variants array. The new group and short name to assign to the contained titles, if they're found in an input DAT file. The titles array contains singular, standard titles that belong to this group. The search term used when looking for a title in an input DAT file. If there are two titles from the same region, a priority can determine which should be selected. Lower numbers are higher priority. If no priority is specified, the priority of the entry is 1 . Each object in the variants array can include the following keys: group (str) : The group value is used as the basis for a new group name and short name for all of the titles in the object. titles (array[obj]) : Optional. Contains singular, standard titles that belong to the group. supersets (array[obj]) : Optional. Contains singular titles that contain more content, or for some reason are superior to standard versions. This might include, for example, a Game of the Year edition, an all-in-one pack that bundles a game and all its DLC, or a DVD version of a title that was previously released on multiple CDs. compilations (array[obj]) : Optional. Contains titles that in themselves contain multiple titles. They might be from the same series of games, a single publisher, from a single genre, or otherwise. Caution The group and short names assigned to the contained titles aren't an exact copy of the top-level key. Instead, the key is used as a basis to generate these names. The rules for how these names are created are detailed in Retool's naming system . Each object in the titles , supersets , and compilations arrays can include the following keys: searchTerm (str) : The search term used when looking for a title in an input DAT file. nameType (str) : Optional, defaults to short . What name type the search term is, so Retool can match it accurately against names in the input DAT file. Valid options include: full (str) : The full name . short (str) : The short name . regionFree (str) : The region-free name . tagFree (str) : The tag-free name . regex (str) : A regex match on the full name. priority (int) : Optional, defaults to 1 . Lower numbers are considered higher priority, with 1 the highest priority. Typically, a title with a higher priority wins when Retool is choosing a 1G1R title> However, when priority is calculated in Retool's process, and how it interacts across titles , supersets , and compilations arrays can change the outcome. Read Example: working with priorities for more information. titlePosition (int) : Optional, defaults to none , compilations objects only. This determines whether a title comes first, second, third, or later in a compilation's name. This is only really useful for GameBoy Advance titles, as No-Intro's DAT differentiates languages supported by each title in a compilation by using a + symbol. Still, it's wise to include where possible in case that naming standard eventually makes it to other DAT files.","title":"Variants"},{"location":"contribute-clone-lists/#ordering-variants-arrays","text":"The order of variants arrays is always: titles supersets compilations . The group key in each array object should be based on one of the title names in the group, preferably from the USA version and in English. Some titles won't exist in all regions, so follow this order for the group name: USA name in English United Kingdom name in English European name in English Any other region in English Japanese name Spanish name Portuguese name French name German name Whatever name is available To ease maintenance, make sure the objects inside the titles , compilations , and supersets arrays are ordered by priority, and then alphabetically within those priorities. For example, this is correct: \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" }, { \"searchTerm\" : \"Exemple de Titre\" }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ] } ] This is incorrect: \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Exemple de Titre\" } ] } ] Warning Avoid setting a searchTerm with the same name as its group to a lower priority. For example: { \"group\" : \"Title\" , \"titles\" : [ { \"searchTerm\" : \"Title Director's Cut\" } { \"searchTerm\" : \"Title\" , \"priority\" : 2 } ] } In this scenario, Retool sees the first entry Title Director's Cut , and goes looking for titles with the short name title director's cut . When it finds a match, it changes that title's short name to match the group, title . When it gets to the second entry, Title , it goes looking for titles with the short name title ... but that's what we just renamed the Director's Cut short name to. Everything ends up being assigned a priority of 2 as a result. If you run into this situation, the easiest solution is to rename the group to match the higher priority title: { \"group\" : \"Title Director's Cut\" , \"titles\" : [ { \"searchTerm\" : \"Title Director's Cut\" } { \"searchTerm\" : \"Title\" , \"priority\" : 2 } ] }","title":"Ordering variants arrays"},{"location":"contribute-clone-lists/#example-working-with-titles","text":"If we have the following title names in a DAT file, that are all the same title across different regions: Example Title (USA) Example Title Budget Edition (USA) Example Title (Europe) Exemple de Titre (France) Titolo di Esempio (Italy) And a user selects the following region order: USA Europe United Kingdom France Italy Then Retool automatically links together Example Title (USA) and Example Title (Europe) , as they have the same short name, example title . However it misses the other titles, as by default they have different short names. A variants object like the following example links them all together: \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" }, { \"searchTerm\" : \"Exemple de Titre\" }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ] } ] Because no nameType is specified in each title object, Retool assumes the searchTerm is a short name, and looks in the related DAT for names that have the same short name. When it finds those titles, it assigns the same group and short name to them, example title , and then Retool knows they are related. The priority of 2 for Example Title Budget Edition indicates that when Retool is processing the USA region, to select Example Title (USA) over Example Title Budget Edition (USA) when Retool considers clone list priority. There are other factors that might eliminate a title before Retool gets to clone list priority \u2014 read How Retool works for the order in which Retool filters titles. In this example, because the user has set USA first in the region order, then Example Title (USA) is selected as the 1G1R title, and the others are discarded.","title":"Example: working with titles"},{"location":"contribute-clone-lists/#example-working-with-supersets","text":"Let's take the titles example, but add another title into the mix: Example Title - Game of the Year Edition (United Kingdom) . Example Title (USA) Example Title Budget Edition (USA) Example Title - Game of the Year Edition (United Kingdom) Example Title (Europe) Exemple de Titre (France) Titolo di Esempio (Italy) This edition contains the latest version of the game, plus all of its DLC, but was never released in the USA or Europe. If the user is an English speaker, then how do we make sure this title gets selected as the superior version of a game, even if the USA or Europe is higher up their region order? With the supersets array. \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" }, { \"searchTerm\" : \"Exemple de Titre\" }, { \"searchTerm\" : \"Titolo di Esempio\" }, { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title - Game of the Year Edition\" } ] } ] The objects in the supersets array list supersets . By default, supersets look at language support over region order. If a superset supports the top language found in a group of titles (in this example, that's English), then it's selected over other standard titles in higher regions as it's considered superior. In this example, because no language order is included but USA is listed first, Retool infers a preference for English, finds the superset Example Title - Game of the Year Edition (United Kingdom) , and selects it as the 1G1R title above the standard USA title, as it supports the same language and is considered superior due to having more content. Note A user can force adherence to region order with the Prefer regions over languages option. In that scenario, Example Title (USA) is selected at the cost of losing the extra content in Example Title - Game of the Year Edition (United Kingdom) . Supersets are also useful to manage things like DVD releases of titles that were previously distributed on multiple CDs. For example, if a DAT contains the following title names, all of which represent the same title: Example Title (Disc 1) (USA) Example Title (Disc 2) (USA) Example Title (Disc 3) (USA) Beispieltitel (Disc 1) (Germany) Beispieltitel (Disc 2) (Germany) Beispieltitel (Disc 3) (Germany) Example Title (USA) And Example Title (USA) is the DVD version of the three-disc CD release Example Title and Beispieltitel , then you can set up a variants object as follows: \"variants\" : [ { \"group\" : \"Example Title (Disc 1)\" , \"titles\" : [ { \"searchTerm\" : \"Example Title (Disc 1)\" }, { \"searchTerm\" : \"Beispieltitel (Disc 1)\" } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title\" } ] }, { \"group\" : \"Example Title (Disc 2)\" , \"titles\" : [ { \"searchTerm\" : \"Example Title (Disc 2)\" }, { \"searchTerm\" : \"Beispieltitel (Disc 2)\" } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title\" } ] }, { \"group\" : \"Example Title (Disc 3)\" , \"titles\" : [ { \"searchTerm\" : \"Example Title (Disc 3)\" }, { \"searchTerm\" : \"Beispieltitel (Disc 3)\" } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title\" } ] } ] Note that the Example Title superset is in all three groups. In this scenario, if a user selects USA as their highest region, then Example Title (USA) is selected as the 1G1R title over the original, multidisc CD version. If they select Germany, then the three German discs are chosen instead.","title":"Example: working with supersets"},{"location":"contribute-clone-lists/#example-working-with-compilations","text":"Retool automatically considers individual titles and compilations that are related, and chooses the solution that results in the fewest duplicate titles (and therefore lowest storage requirement). Compilations in a variants array are handled in a similar way to the following example: \"variants\" : [ { \"group\" : \"3-D Ultra Pinball\" , \"titles\" : [ { \"searchTerm\" : \"3-D Ultra Pinball\" } ], \"compilations\" : [ { \"searchTerm\" : \"3-D Ultra Pinball & Trophy Bass\" , \"titlePosition\" : 1 } ] }, { \"group\" : \"Trophy Bass\" , \"compilations\" : [ { \"searchTerm\" : \"3-D Ultra Pinball & Trophy Bass\" , \"titlePosition\" : 2 } ] } ] Note that 3-D Ultra Pinball & Trophy Bass belongs to both the 3-D Ultra Pinball and Trophy Bass groups. During processing, Retool splits compilations into virtual versions of their consituent titles. This means that when you add a compilation to a variant object, it's only being judged on the individual title associated with that group, not all titles in the compilation. As far as Retool is concerned in this example, 3-D Ultra Pinball & Trophy Bass in the 3-D Ultra Pinball group is just another version of 3-D Ultra Pinball , and 3-D Ultra Pinball & Trophy Bass in the Trophy Bass group is just another version of Trophy Bass . It's important to list a compilation in all groups it's related to, even if a standalone title doesn't exist. This way Retool knows which titles make up the compilation and can make more accurate choices. In this example, if a related DAT contains the following title names: 3-D Ultra Pinball (Europe) 3-D Ultra Pinball & Trophy Bass (USA) And a user selects the following region order: USA Europe Then Retool selects 3-D Ultra Pinball & Trophy Bass (USA) as the 1G1R title, as that solution is the one with the least duplication.","title":"Example: working with compilations"},{"location":"contribute-clone-lists/#example-working-with-priorities","text":"It's useful to understand how priorities work across the titles , supersets , and compilations arrays.","title":"Example: working with priorities"},{"location":"contribute-clone-lists/#titles","text":"If you use priority in a titles array, it's taken into account for titles in the same region, with same group and short name. The priority does not take effect for titles in different regions. For example, if a DAT file contains the following title names: Example Title (USA) Example Title Budget Edition (USA) Example Title (Europe) And the following variants array is in the related clone list: { \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" } { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ] } ] } Then both Example Title (USA) and Example Title (Europe) receive a priority of 1, as no priority has been specified. Example Title Budget Edition (USA) is assigned a priority of 2 as defined by the clone list. Because Retool first bundles games from the same region together for comparison, Example Title (USA) and Example Title Budget Edition (USA) are compared, and the latter is dropped because it has a lower priority of 2. Afterwards cross-region comparisons are made, so Example Title (USA) and Example Title (Europe) are compared, however priority is not taken into account here, only things like user region and language order.","title":"Titles"},{"location":"contribute-clone-lists/#supersets","text":"While the behavior for priorities in supersets is similar to that in titles, superset priorities are only compared against other superset priorities, and compilation priorities. For example, if a DAT file contains the following title names: Example Title (USA) Example Title Budget Edition (USA) Example Title - Special Edition (Europe) Example Title - Super Special Edition (Europe) A user selects the following region order: USA Europe And the following variants array is in the related clone list: { \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" } { \"searchTerm\" : \"Example Title Budget Edition\" , \"priority\" : 2 } ], \"supersets\" : [ { \"searchTerm\" : \"Example Title - Super Special Edition\" } { \"searchTerm\" : \"Example Title - Special Edition\" , \"priority\" : 2 } ] } ] } Then the following happens: Because the supersets are in English (and English is this user's highest language in their implied language order), they get selected over the standard titles even though they are from Europe, a lower ordered region. This has nothing to do with priority set in the clone list \u2014 it's just how supersets work. Example Title - Super Special Edition (Europe) then gets chosen over Example Title - Special Edition , as the latter has a lower priority.","title":"Supersets"},{"location":"contribute-clone-lists/#compilations","text":"Priorities affect compilations slightly differently, as Retool splits compilations into individual virtual titles to compare against the other titles. For example, if a DAT file contains the following title names: Example Title (USA) Example Title (Europe) Example Title 2 - Special Edition (USA) Example Title 1 & 2 (Europe) A user selects the following region order: USA Europe And the following variants array is in the related clone list: { \"variants\" : [ { \"group\" : \"Example Title\" , \"titles\" : [ { \"searchTerm\" : \"Example Title\" } ], \"compilations\" : [ { \"searchTerm\" : \"Example Title 1 & 2\" } ] }, { \"group\" : \"Example Title 2\" , \"titles\" : [ { \"searchTerm\" : \"Example Title 2 - Special Edition\" } ], \"compilations\" : [ { \"searchTerm\" : \"Example Title 1 & 2\" , \"priority\" : 2 } ] } ] } Then the following happens with the compilations: Retool looks at the Example Title group, and finds Example Title 1 & 2 (Europe) in the DAT via the compilations search term Example Title 1 & 2 . That compilation is then assigned a virtual name that matches the group name, and includes region and language information: :V: Example Title (Europe) (En) . This effectively splits out that indvidual title from the compilation for comparison, meaning the second title in the compilation isn't considered when comparing titles in this group. Because no priority is defined, the virtual title is assigned a priority of 1. Retool looks at the Example Title 2 group, and finds Example Title 1 & 2 (Europe) in the DAT via the compilations search term Example Title 1 & 2 . Although it's the same compilation as before, it's assigned a virtual name that matches the Example Title 2 group name: :V: Example Title 2 (Europe) (En) . This means the first title in the compilation isn't considered when comparing titles in this group. The virtual title is assigned a priority of 2, as specified in the clone list. Retool compares the virtual compilation titles against the individual titles in the same groups: Example Title (USA) is compared against :V: Example Title (Europe) (En) . The USA title wins due to region priority. Example Title 2 - Special Edition (USA) is compared against :V: Example Title 2 (Europe) (En) . The latter is discarded because it has a lower priority (which is assessed before region order). Ultimately Example Title (USA) and Example Title 2 - Special Edition (USA) become the 1G1R titles, and Example Title 1 & 2 (Europe) is discarded. Note Superset priority is compared directly against compilation priority, just like title priority is.","title":"Compilations"},{"location":"contribute-clone-lists/#format-clone-lists","text":"Clone lists follow a particular format to keep maintainence easy: Valid JSON. Tabbed indenting. LF line endings. Top-level keys should be kept in the order listed in this guide . Object keys should be in the order shown in the examples in this guide. Array contents should be in alphabetical order, sorted by an object's top key. This is either going to be searchTerm or group . Make sure your format is correct before submitting a pull request.","title":"Format clone lists"},{"location":"contribute-clone-lists/#test-clone-lists","text":"Before submitting a pull request, it's important to test your changes to make sure they're correct. Test your clone list update against the newest version of a DAT from No-Intro or Redump, and enable the following settings: GUI Command line In the Global settings tab, click Options . Enable Report clone list warnings during processing and Pause on clone list warnings . --warnings --warningpause Run Retool on the DAT file, and fix your clone list until no warnings are given.","title":"Test clone lists"},{"location":"contribute-clone-lists/#hashing-for-updates","text":"Retool manages clone list updates via the hash.json file in the clone lists subfolder. When looking for updates, the newest hash.json is downloaded from from the location specified in internal-config.json : \"cloneListMetadataUrl\" : \"https://raw.githubusercontent.com/unexpectedpanda/retool-clonelists-metadata/\" , The SHA256 hashes in that file are then compared against the clone lists on the local disk. If a clone list hash doesn't match, then a new version of that file is downloaded from the same location as listed above. When submitting PRs for clone lists, make sure to also update the appropriate hash.json file with the SHA256 hash of the updated or new clone list.","title":"Hashing for updates"},{"location":"dat-support/","text":"DAT support While Retool understands both LogiqX and CLRMAMEPro -formatted DAT files, it only has support for DAT files released by certain groups based on their naming conventions. Supported DAT files are supported from the following groups. No-Intro No-Intro DAT files are supported, in both LogiqX(ish) and their newer XSD-validated format. Clone lists exist for the more popular sets, and contributions are always welcome for both maintenance and providing new lists. Redump Redump DAT files are supported in both LogiqX(ish) and CLRMAMEPro formats. DAT files derived from Redump that keep the same title names, such as those from dats.site , are also supported. Clone lists exist for most sets except IBM PC Compatible, which is too huge and has far too much activity without community contribution to maintain. Unsupported While anything not in the supported list should be considered unsupported, there are two sets in particular that need to be called out, as from time to time there are requests to add support. It is unlikely Retool will ever support these DAT files. MAME and other arcade sets Filtering MAME DAT files is an entirely different beast, and a massive undertaking to do well. The naming scheme is different, the things you can filter on are different, and whether arcade or software list support, huge amounts of data need to be parsed to do it justice. It's more than enough work just keeping up with No-Intro and Redump. Thankfully there are other options for MAME filtering: Do a web search for All killer no filler . These are lists and tools that filter MAME's ROMs to only the top games as defined by their authors. Arcade Manager can handle filtering MAME sets, including removing bad and non-working ROMs, and comes with built-in lists for the \"top\" sets and \"all killer no filler\". RomLister and Lightspeed Game List Generator haven't been updated for a long time, but there are a lot of options in them to sate your filtering desires. TOSEC While TOSEC DAT files are in LogiqX format, support for their naming system hasn't been built into Retool. Support is technically possible, but largely pointless to implement without also supplying clone lists. This isn't a small effort \u2014 with over 3,000 TOSEC DAT files as of 2022, and with TOSEC's tendency to include many, many variants, there'd have to be significant community effort not only to bridge that gap, but to test the clone lists too. At this point in time, the momentum doesn't exist to justify the work.","title":"DAT support"},{"location":"dat-support/#dat-support","text":"While Retool understands both LogiqX and CLRMAMEPro -formatted DAT files, it only has support for DAT files released by certain groups based on their naming conventions.","title":"DAT support"},{"location":"dat-support/#supported","text":"DAT files are supported from the following groups.","title":"Supported"},{"location":"dat-support/#no-intro","text":"No-Intro DAT files are supported, in both LogiqX(ish) and their newer XSD-validated format. Clone lists exist for the more popular sets, and contributions are always welcome for both maintenance and providing new lists.","title":" No-Intro"},{"location":"dat-support/#redump","text":"Redump DAT files are supported in both LogiqX(ish) and CLRMAMEPro formats. DAT files derived from Redump that keep the same title names, such as those from dats.site , are also supported. Clone lists exist for most sets except IBM PC Compatible, which is too huge and has far too much activity without community contribution to maintain.","title":" Redump"},{"location":"dat-support/#unsupported","text":"While anything not in the supported list should be considered unsupported, there are two sets in particular that need to be called out, as from time to time there are requests to add support. It is unlikely Retool will ever support these DAT files.","title":"Unsupported"},{"location":"dat-support/#mame-and-other-arcade-sets","text":"Filtering MAME DAT files is an entirely different beast, and a massive undertaking to do well. The naming scheme is different, the things you can filter on are different, and whether arcade or software list support, huge amounts of data need to be parsed to do it justice. It's more than enough work just keeping up with No-Intro and Redump. Thankfully there are other options for MAME filtering: Do a web search for All killer no filler . These are lists and tools that filter MAME's ROMs to only the top games as defined by their authors. Arcade Manager can handle filtering MAME sets, including removing bad and non-working ROMs, and comes with built-in lists for the \"top\" sets and \"all killer no filler\". RomLister and Lightspeed Game List Generator haven't been updated for a long time, but there are a lot of options in them to sate your filtering desires.","title":" MAME and other arcade sets"},{"location":"dat-support/#tosec","text":"While TOSEC DAT files are in LogiqX format, support for their naming system hasn't been built into Retool. Support is technically possible, but largely pointless to implement without also supplying clone lists. This isn't a small effort \u2014 with over 3,000 TOSEC DAT files as of 2022, and with TOSEC's tendency to include many, many variants, there'd have to be significant community effort not only to bridge that gap, but to test the clone lists too. At this point in time, the momentum doesn't exist to justify the work.","title":" TOSEC"},{"location":"download/","text":"Download and install Retool is supported on Windows 10+, Ubuntu 20+, and macOS 10+ on x86 processors. It likely works on M1 MacBooks too, however I don't own the hardware to test it. How you download and install Retool will depend on your level of comfort with code. Windows binary Git and Python If you're a Windows user and want the easiest path, you can get Retool going in a few easy steps: Download the Windows binary ZIP file: retool-2.00.0-beta-1-win-x86-64.zip SHA256: 1ea7f9476c80acd67586573d8b98859d81116fe0c622a7f9b241fe6554ebd94d Extract the ZIP file to a folder of your choosing. In that folder, double click retool-gui.exe . A Command Prompt window opens, which shows the output when Retool is running. Don't close it, as this also closes the GUI. Click File > Update clone lists to download the latest clone lists and metadata files. Note Retool's binary is UPX packed to reduce its size on disk. This means that some over-zealous anti-virus software might pick it up as a false positive. If the SHA256 of the downloaded ZIP matches the checksum on this page, you're likely safe to mark an exception in your anti-virus software. If you're more comfortable with the command line, or are running on a non-Windows platform, then this option is for you. Download and install Python 3.9 or higher , if you haven't already. Clone Retool from its repository: git clone https://github.com/unexpectedpanda/retool.git For the v2 beta, make sure to switch to the v2 branch: git checkout v2 When out of beta, v2 will be migrated to the main branch. Install Retool's dependencies, either with Pip or Poetry : Pip Poetry pip install alive-progress lxml psutil pyside6 strictyaml validators Install Poetry if you haven't already: pip install poetry Install Retool's dependencies: poetry install Enter the Poetry virtual environment: poetry shell Info On systems that have both Python 2 and 3 installed, you might need to run pip3 instead of pip . Download the latest clone lists and metadata files: retool.py --update Info On some operating systems you might need to prefix Python files with python3 or python to run them. You can now run retool.py or retool-gui.py with Python. Linux issues If you get a libxcb error in Linux when launching retool-gui.py , this fixed the problem for me in Ubuntu 20.04: sudo apt-get install libxcb-randr0-dev \\ libxcb-xtest0-dev libxcb-xinerama0-dev libxcb-shape0-dev libxcb-xkb-dev","title":"Download and install"},{"location":"download/#download-and-install","text":"Retool is supported on Windows 10+, Ubuntu 20+, and macOS 10+ on x86 processors. It likely works on M1 MacBooks too, however I don't own the hardware to test it. How you download and install Retool will depend on your level of comfort with code. Windows binary Git and Python If you're a Windows user and want the easiest path, you can get Retool going in a few easy steps: Download the Windows binary ZIP file: retool-2.00.0-beta-1-win-x86-64.zip SHA256: 1ea7f9476c80acd67586573d8b98859d81116fe0c622a7f9b241fe6554ebd94d Extract the ZIP file to a folder of your choosing. In that folder, double click retool-gui.exe . A Command Prompt window opens, which shows the output when Retool is running. Don't close it, as this also closes the GUI. Click File > Update clone lists to download the latest clone lists and metadata files. Note Retool's binary is UPX packed to reduce its size on disk. This means that some over-zealous anti-virus software might pick it up as a false positive. If the SHA256 of the downloaded ZIP matches the checksum on this page, you're likely safe to mark an exception in your anti-virus software. If you're more comfortable with the command line, or are running on a non-Windows platform, then this option is for you. Download and install Python 3.9 or higher , if you haven't already. Clone Retool from its repository: git clone https://github.com/unexpectedpanda/retool.git For the v2 beta, make sure to switch to the v2 branch: git checkout v2 When out of beta, v2 will be migrated to the main branch. Install Retool's dependencies, either with Pip or Poetry : Pip Poetry pip install alive-progress lxml psutil pyside6 strictyaml validators Install Poetry if you haven't already: pip install poetry Install Retool's dependencies: poetry install Enter the Poetry virtual environment: poetry shell Info On systems that have both Python 2 and 3 installed, you might need to run pip3 instead of pip . Download the latest clone lists and metadata files: retool.py --update Info On some operating systems you might need to prefix Python files with python3 or python to run them. You can now run retool.py or retool-gui.py with Python. Linux issues If you get a libxcb error in Linux when launching retool-gui.py , this fixed the problem for me in Ubuntu 20.04: sudo apt-get install libxcb-randr0-dev \\ libxcb-xtest0-dev libxcb-xinerama0-dev libxcb-shape0-dev libxcb-xkb-dev","title":"Download and install"},{"location":"how-retool-works/","text":"How Retool works To be completed.","title":"How Retool works"},{"location":"how-retool-works/#how-retool-works","text":"To be completed.","title":"How Retool works"},{"location":"how-to-use-retool-cli/","text":"How to use Retool CLI What follows is a step-by-step walkthrough of using Retool CLI and all of its features. If you're new to DAT management, it might be beneficial to spend some time reading about terminology , and after you've filtered a DAT file with Retool, check out the Beginner's guide to ROM managers . Info Depending on your operating system, all Python commands in this guide might need to be prefixed with python or python3 to work. Get started The following sections cover the initial setup for Retool. Download DAT files and Retool Before you can filter DAT files, they need to be on your hard drive. Download the DAT files for the system you want to verify. Retool supports DAT files from the following groups: No-Intro Redump You might need to extract a ZIP file containing the DAT files to access them. Download Retool , and follow the installation and update instructions for your platform. Basic usage In your terminal/Command Prompt, change the folder to where Retool is installed, and then run the following command: retool.py -h This shows all the options available to you. To process a DAT file without any options, enter the following command: retool.py PATH_TO_DAT_FILE The user-config.yaml file This file is user-editable, and contains the following configuration options for Retool. By default it is found in the config folder. See an example of a user-config.yaml file . Language order Optional. This is defined by the language order array. If you leave all languages commented out (preceded by a # ), then Retool includes all languages during processing, and uses an implied language order derived from your region order. Order is important. For example, if you have the following title names in an input DAT file: This is a title (Europe) (En,Fr,De) This is a title (Europe) (En,Fr,De,Es,It) This is a title (Europe) (Es) This is a title (Europe) (Fr,De,Es,It) And the following language order: English Spanish Italian Then the following title is selected as the 1G1R title: This is a title (Europe) (En,Fr,De,Es,It) And these titles are removed from consideration: This is a title (Europe) (Es) This is a title (Europe) (Fr,De,Es,It) This is a title (Europe) (En,Fr,De) This is because This is a title (Europe) (En,Fr,De,Es,It) supports all three languages. The array doesn't just define an order \u2014 languages are also treated like filters. This means if you only add English as a language, for example, then only titles that support English or have unknown languages are included by Retool in the final result. The language order array is only used by Retool if you pass the -l command line option, otherwise it assumes you want all languages. Region order This is defined by the region order array. At least one region must be uncommented. Video order This is defined by the video order array. Video standards are processed after regions, languages, and many other criteria like versions and supersets. Additionally, a video standard is only determined by an explicit tag in a title's name, for example This is a title (World) (NTSC) . As such, the video order is effectively only used as a tie-breaker when choosing between two titles that both specify a video standard in their names. Don't expect to get NTSC titles if you prioritize NTSC as a video standard, but put Europe first in your region order. List prefix and suffix Optional. Defined by the list prefix and list suffix arrays. Only one entry is permitted per array. If you are using the --listnames option, this defines the prefix and suffix to add to each line. If a prefix starts with http:// , https:// , or ftp:// , then each line in the output file is URL encoded. Global exclude and include filters Optional. Defined by the exclude and include arrays. User filters override the default choices Retool makes by force including or excluding titles whose names match a certain string. Each filter must be on its own line. Note If Retool has genuinely missed a relationship between titles, please don't just create a filter \u2014 create an issue too so the clone lists or Retool can be updated. There are three different match types: Plain text indicates a partial string match. A prefix of / indicates a regular expression match. A prefix of | indicates a full string match. Additionally, you can wrap any of these strings in <> to also remove any match's related clones. Warning If you need to use a backslash ( \\ ) or double quote ( \" ) in your filters, you must escape them with a backslash. For example: \\\\ \\\" Additionally, there are rules when it comes to user filters, and how they interact at the global settings and system settings level: System includes override all excludes. System excludes override global includes. Global includes override global excludes. Partial matches If a line isn't prefixed with | (full match) or / (regular expression) in an Exclude or Include , then it's interpreted as a partial match. A partial match looks for the specified text inside all title names. For example, if an input DAT contains the following title names: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And your user-config.yaml has the following excludes: exclude: - \"Hot\" - \"Cold\" Every title in the example list is excluded from the output DAT file. This is because Cold matches It's Pretty Cold (Japan) , and Hot matches every other title, as it's found in both the word Hot and Hotel . Now let's add an include: exclude: - \"Hot\" - \"Cold\" include: - \"Ho\" The behavior changes again: The include for Ho overrides the exclude for Hot . The include for Ho prevents Retool from assigning Do You Think it's Hot (USA) (Alt) to Do You Think it's Hot (USA) as a clone, meaning both titles end up in the output DAT file. As you can see, you need to be careful when using partial matches. Regular expressions If you're familiar with regular expressions, also known as \"regexes\", you know the power (and pain) that they can bring. To define an include or exclude as a regex, prefix it with a forward slash ( / ). Tip If you don't know regex, you can learn the basics at regexlearn.com . You want to be well practiced before using them, as without proper care they can lead to unintended consequences. For example, if an input DAT contains the following title names: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And your user-config.yaml has the following exclude: exclude: - \"/^I All titles beginning with I are excluded from the output DAT file. Now let's add an include: exclude: - \"/^I include: - \"/\\(USA\\)\" Here all USA titles are kept, even if they start with I , because includes override excludes. In our example list the (Alt) title is usually removed by Retool as a clone of the original, but the include filter of /\\(USA\\) makes sure it's kept. Full matches Full matches only apply to titles with the exact same name. To define an include or exclude as a full match, prefix it with a pipe ( | ). For example, if an input DAT contains the following titles: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And your user-config.yaml has the following exclude: exclude: - \"|Do You Think it's Hot (USA)\" Then that title is excluded from the output DAT file. If you remove the exclude, and then put the following include in: include: - \"|Do You Think it's Hot (USA) (Alt)\" Then that title is kept in the output DAT file, and the final titles chosen are: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) In our example list the (Alt) title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept. GUI settings Don't edit these. They are used by the GUI and ignored during CLI operation. System settings config files Settings are available at two levels in Retool: global and system. Global settings are applied to every DAT Retool processes, so long as system settings don't override them. These are stored in config/user-config.yaml . System settings are applied to a specific system named in a DAT file. For example, you can have settings for just the Sony - PlayStation DAT file from Redump. System settings are mostly the same as global settings, although their config files are slightly different. They are stored in the config/systems folder, and are YAML files named after their system and release group. See an example of a system settings config file . While it's possible to construct a system settings file by hand, it's more convenient to set the options in Retool's GUI and let it generate one for you. After the system config file exists, Retool CLI references it every time it processes that system. Command line options In addition to the settings found in user-config.yaml , you can pass other settings via command line options. Options These options change how Retool handles certain titles. -d Disable 1G1R filtering Ignore clone lists, and treat each title as unique. Useful if you want to keep everything from a specific set of regions and/or languages. You can use this in combination with --regionsplit to treat Retool as a region splitter and nothing more. This option isn't compatible with --legacy . -e Include titles without hashes or sizes specified in the input DAT file Some DAT files don't list any hashes or sizes for some files, and Retool filters these out by default. This option makes sure those files are kept. -l Filter by languages using a list If a title doesn't support any of the languages on the list, it's removed (see config/user-config.yaml ). -r Prefer regions over languages By default, if a title from a higher priority region doesn't support your preferred languages but a lower priority region does, Retool selects the latter. This option disables this behavior, forcing strict adherence to region priority regardless of language support This option also overrides similar behavior in superset selection, which means you might get a title that was released in your preferred region that has less content, instead of one that was released in another region that contains more content and supports your preferred languages. -y Prefer licensed versions over unlicensed, aftermarket, or homebrew titles Sometimes games are rereleased long after the lifespan of a console, in regions they weren't originally available in. By default Retool selects these titles if they match your preferred region/language priorities. Enable this option to choose a production version of a title over the unlicensed/aftermarket/homebrew title if possible. This might select titles from a lower priority region, or with lower priority languages, or with less features. -z Prefer titles ripped from modern rereleases over original system releases For the sake of emulator compatibility, Retool prefers versions of games released on the original system instead of those ripped from rereleases on platforms like Virtual Console and Steam. This option reverses that behavior. --nofilters Disable global and system user filters Ignore both global and system user filters. Exclusions Retool can exclude specific types of titles from the output DAT file. These exclusions are either based on the <category> tag found in DAT files, or on a string in the title's name. To add exclusions, use the --exclude option followed by the single letter filters that indicate each title type. For example, --exclude aAbcdD . The available exclusions are as follows: a Applications Titles with the DAT category Applications , or with the following text in the name: (Program) (Test Program) Check Program Sample Program A Audio Titles with the DAT category Audio . These might be used as soundtracks by games. b Bad dumps Titles marked as bad dumps with a [b] in the name. B BIOS and other chips Titles with the DAT category Console , or with the following text in the name: [BIOS] (Enhancement Chip) c Coverdiscs Titles with the DAT category Coverdiscs . These were discs that were attached to the front of magazines, and could contain demos, or rarely, full games. d Demos, kiosks, and samples Titles with the DAT category Demos , or with the following text in the name: @barai (Demo [1-9]) (Demo-CD) (GameCube Preview) (Kiosk *|* Kiosk) (Preview) Kiosk Demo Disc PS2 Kiosk PSP System Kiosk Sample Taikenban Trial Edition D Add-ons Titles with the DAT category Add-Ons . This includes expansion packs and additional materials for titles. e Educational Titles with the DAT category Educational . k MIA Titles or ROMs declared as missing in action in the clone lists or DAT files. m Manuals Titles with (Manual) in the name. M Multimedia Titles with the DAT category Multimedia . These might include games. o Bonus discs Titles with the DAT category Bonus Discs . These could be anything other than the main title content, like patches, manuals, collector discs, or otherwise. p Pirate Titles with (Pirate) in the name. P Preproduction Titles with the DAT category Preproduction , or with the following text in the name: (Alpha [0-99]) (Beta [0-99]) (Pre-Production) (Possible Proto) (Proto [0-99]) (Review Code) r Promotional Titles with the DAT category Promotional , or with the following text in the name: (Promo) EPK Press Kit u Unlicensed Titles unauthorized by console manufacturers, marked by the following text in the name: (Unl) (Aftermarket) (Homebrew) v Video Titles with the DAT category Video . Outputs --listnames Also output a TXT file of just the kept title names See config/user-config.yaml to add a prefix and/or suffix to each line. --log Also output a TXT file of what titles have been kept, removed, and set as clones --output <folder> Set an output folder where the new 1G1R DAT file/s will be created --regionsplit Split the result into multiple DAT files based on region Use with -d to only split by region with no 1G1R processing. Not compatible with --legacy . --removesdat Also output a DAT file containing the titles that were removed from the 1G1R DAT file Debug --config <file> Set a custom user config file to use instead of the default Useful for testing. --clonelist <file> Set a custom clone list to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT file and the clone list isn't automatically detected anymore. Often used together with --metadata . --metadata <file> Set a custom metadata file to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT file and the metadata file isn't automatically detected anymore. Often used together with --clonelist . --legacy Output DAT file/s in legacy parent/clone format Not recommended unless you're debugging or comparing outputs between DAT versions. Not compatible with -d . --nodtd Bypass DTD validation Skips DTD validation of DAT files, useful if validation is causing issues. --singlecpu Disable multiprocessor usage br>Forces Retool to use only a single CPU core, at the cost of performance. This can be useful when debugging Retool, as multiprocessor doesn't cope well with input statements. --trace [ ...] Trace a title through the Retool process for debugging Follows a title through Retool's selection process for debugging. Accepts a regular expression. To function properly, this disables using multiple processors during parent selection. Usage: --trace \"regex of titles to trace\" --warnings Report clone list warnings during processing --warningpause Pause when a clone list warning is found Useful when batch processing DAT files. Tip If you don't know regular expressions, also known as \"regexes\", you can learn the basics at regexlearn.com . You want to be well practiced before using them, as without proper care they can lead to unintended consequences.","title":"Retool CLI"},{"location":"how-to-use-retool-cli/#how-to-use-retool-cli","text":"What follows is a step-by-step walkthrough of using Retool CLI and all of its features. If you're new to DAT management, it might be beneficial to spend some time reading about terminology , and after you've filtered a DAT file with Retool, check out the Beginner's guide to ROM managers . Info Depending on your operating system, all Python commands in this guide might need to be prefixed with python or python3 to work.","title":"How to use Retool CLI"},{"location":"how-to-use-retool-cli/#get-started","text":"The following sections cover the initial setup for Retool.","title":"Get started"},{"location":"how-to-use-retool-cli/#download-dat-files-and-retool","text":"Before you can filter DAT files, they need to be on your hard drive. Download the DAT files for the system you want to verify. Retool supports DAT files from the following groups: No-Intro Redump You might need to extract a ZIP file containing the DAT files to access them. Download Retool , and follow the installation and update instructions for your platform.","title":"Download DAT files and Retool"},{"location":"how-to-use-retool-cli/#basic-usage","text":"In your terminal/Command Prompt, change the folder to where Retool is installed, and then run the following command: retool.py -h This shows all the options available to you. To process a DAT file without any options, enter the following command: retool.py PATH_TO_DAT_FILE","title":"Basic usage"},{"location":"how-to-use-retool-cli/#the-user-configyaml-file","text":"This file is user-editable, and contains the following configuration options for Retool. By default it is found in the config folder. See an example of a user-config.yaml file .","title":"The user-config.yaml file"},{"location":"how-to-use-retool-cli/#language-order","text":"Optional. This is defined by the language order array. If you leave all languages commented out (preceded by a # ), then Retool includes all languages during processing, and uses an implied language order derived from your region order. Order is important. For example, if you have the following title names in an input DAT file: This is a title (Europe) (En,Fr,De) This is a title (Europe) (En,Fr,De,Es,It) This is a title (Europe) (Es) This is a title (Europe) (Fr,De,Es,It) And the following language order: English Spanish Italian Then the following title is selected as the 1G1R title: This is a title (Europe) (En,Fr,De,Es,It) And these titles are removed from consideration: This is a title (Europe) (Es) This is a title (Europe) (Fr,De,Es,It) This is a title (Europe) (En,Fr,De) This is because This is a title (Europe) (En,Fr,De,Es,It) supports all three languages. The array doesn't just define an order \u2014 languages are also treated like filters. This means if you only add English as a language, for example, then only titles that support English or have unknown languages are included by Retool in the final result. The language order array is only used by Retool if you pass the -l command line option, otherwise it assumes you want all languages.","title":"Language order"},{"location":"how-to-use-retool-cli/#region-order","text":"This is defined by the region order array. At least one region must be uncommented.","title":"Region order"},{"location":"how-to-use-retool-cli/#video-order","text":"This is defined by the video order array. Video standards are processed after regions, languages, and many other criteria like versions and supersets. Additionally, a video standard is only determined by an explicit tag in a title's name, for example This is a title (World) (NTSC) . As such, the video order is effectively only used as a tie-breaker when choosing between two titles that both specify a video standard in their names. Don't expect to get NTSC titles if you prioritize NTSC as a video standard, but put Europe first in your region order.","title":"Video order"},{"location":"how-to-use-retool-cli/#list-prefix-and-suffix","text":"Optional. Defined by the list prefix and list suffix arrays. Only one entry is permitted per array. If you are using the --listnames option, this defines the prefix and suffix to add to each line. If a prefix starts with http:// , https:// , or ftp:// , then each line in the output file is URL encoded.","title":"List prefix and suffix"},{"location":"how-to-use-retool-cli/#global-exclude-and-include-filters","text":"Optional. Defined by the exclude and include arrays. User filters override the default choices Retool makes by force including or excluding titles whose names match a certain string. Each filter must be on its own line. Note If Retool has genuinely missed a relationship between titles, please don't just create a filter \u2014 create an issue too so the clone lists or Retool can be updated. There are three different match types: Plain text indicates a partial string match. A prefix of / indicates a regular expression match. A prefix of | indicates a full string match. Additionally, you can wrap any of these strings in <> to also remove any match's related clones. Warning If you need to use a backslash ( \\ ) or double quote ( \" ) in your filters, you must escape them with a backslash. For example: \\\\ \\\" Additionally, there are rules when it comes to user filters, and how they interact at the global settings and system settings level: System includes override all excludes. System excludes override global includes. Global includes override global excludes.","title":"Global exclude and include filters"},{"location":"how-to-use-retool-cli/#partial-matches","text":"If a line isn't prefixed with | (full match) or / (regular expression) in an Exclude or Include , then it's interpreted as a partial match. A partial match looks for the specified text inside all title names. For example, if an input DAT contains the following title names: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And your user-config.yaml has the following excludes: exclude: - \"Hot\" - \"Cold\" Every title in the example list is excluded from the output DAT file. This is because Cold matches It's Pretty Cold (Japan) , and Hot matches every other title, as it's found in both the word Hot and Hotel . Now let's add an include: exclude: - \"Hot\" - \"Cold\" include: - \"Ho\" The behavior changes again: The include for Ho overrides the exclude for Hot . The include for Ho prevents Retool from assigning Do You Think it's Hot (USA) (Alt) to Do You Think it's Hot (USA) as a clone, meaning both titles end up in the output DAT file. As you can see, you need to be careful when using partial matches.","title":"Partial matches"},{"location":"how-to-use-retool-cli/#regular-expressions","text":"If you're familiar with regular expressions, also known as \"regexes\", you know the power (and pain) that they can bring. To define an include or exclude as a regex, prefix it with a forward slash ( / ). Tip If you don't know regex, you can learn the basics at regexlearn.com . You want to be well practiced before using them, as without proper care they can lead to unintended consequences. For example, if an input DAT contains the following title names: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And your user-config.yaml has the following exclude: exclude: - \"/^I All titles beginning with I are excluded from the output DAT file. Now let's add an include: exclude: - \"/^I include: - \"/\\(USA\\)\" Here all USA titles are kept, even if they start with I , because includes override excludes. In our example list the (Alt) title is usually removed by Retool as a clone of the original, but the include filter of /\\(USA\\) makes sure it's kept.","title":"Regular expressions"},{"location":"how-to-use-retool-cli/#full-matches","text":"Full matches only apply to titles with the exact same name. To define an include or exclude as a full match, prefix it with a pipe ( | ). For example, if an input DAT contains the following titles: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And your user-config.yaml has the following exclude: exclude: - \"|Do You Think it's Hot (USA)\" Then that title is excluded from the output DAT file. If you remove the exclude, and then put the following include in: include: - \"|Do You Think it's Hot (USA) (Alt)\" Then that title is kept in the output DAT file, and the final titles chosen are: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) In our example list the (Alt) title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept.","title":"Full matches"},{"location":"how-to-use-retool-cli/#gui-settings","text":"Don't edit these. They are used by the GUI and ignored during CLI operation.","title":"GUI settings"},{"location":"how-to-use-retool-cli/#system-settings-config-files","text":"Settings are available at two levels in Retool: global and system. Global settings are applied to every DAT Retool processes, so long as system settings don't override them. These are stored in config/user-config.yaml . System settings are applied to a specific system named in a DAT file. For example, you can have settings for just the Sony - PlayStation DAT file from Redump. System settings are mostly the same as global settings, although their config files are slightly different. They are stored in the config/systems folder, and are YAML files named after their system and release group. See an example of a system settings config file . While it's possible to construct a system settings file by hand, it's more convenient to set the options in Retool's GUI and let it generate one for you. After the system config file exists, Retool CLI references it every time it processes that system.","title":"System settings config files"},{"location":"how-to-use-retool-cli/#command-line-options","text":"In addition to the settings found in user-config.yaml , you can pass other settings via command line options.","title":"Command line options"},{"location":"how-to-use-retool-cli/#options","text":"These options change how Retool handles certain titles. -d Disable 1G1R filtering Ignore clone lists, and treat each title as unique. Useful if you want to keep everything from a specific set of regions and/or languages. You can use this in combination with --regionsplit to treat Retool as a region splitter and nothing more. This option isn't compatible with --legacy . -e Include titles without hashes or sizes specified in the input DAT file Some DAT files don't list any hashes or sizes for some files, and Retool filters these out by default. This option makes sure those files are kept. -l Filter by languages using a list If a title doesn't support any of the languages on the list, it's removed (see config/user-config.yaml ). -r Prefer regions over languages By default, if a title from a higher priority region doesn't support your preferred languages but a lower priority region does, Retool selects the latter. This option disables this behavior, forcing strict adherence to region priority regardless of language support This option also overrides similar behavior in superset selection, which means you might get a title that was released in your preferred region that has less content, instead of one that was released in another region that contains more content and supports your preferred languages. -y Prefer licensed versions over unlicensed, aftermarket, or homebrew titles Sometimes games are rereleased long after the lifespan of a console, in regions they weren't originally available in. By default Retool selects these titles if they match your preferred region/language priorities. Enable this option to choose a production version of a title over the unlicensed/aftermarket/homebrew title if possible. This might select titles from a lower priority region, or with lower priority languages, or with less features. -z Prefer titles ripped from modern rereleases over original system releases For the sake of emulator compatibility, Retool prefers versions of games released on the original system instead of those ripped from rereleases on platforms like Virtual Console and Steam. This option reverses that behavior. --nofilters Disable global and system user filters Ignore both global and system user filters.","title":"Options"},{"location":"how-to-use-retool-cli/#exclusions","text":"Retool can exclude specific types of titles from the output DAT file. These exclusions are either based on the <category> tag found in DAT files, or on a string in the title's name. To add exclusions, use the --exclude option followed by the single letter filters that indicate each title type. For example, --exclude aAbcdD . The available exclusions are as follows: a Applications Titles with the DAT category Applications , or with the following text in the name: (Program) (Test Program) Check Program Sample Program A Audio Titles with the DAT category Audio . These might be used as soundtracks by games. b Bad dumps Titles marked as bad dumps with a [b] in the name. B BIOS and other chips Titles with the DAT category Console , or with the following text in the name: [BIOS] (Enhancement Chip) c Coverdiscs Titles with the DAT category Coverdiscs . These were discs that were attached to the front of magazines, and could contain demos, or rarely, full games. d Demos, kiosks, and samples Titles with the DAT category Demos , or with the following text in the name: @barai (Demo [1-9]) (Demo-CD) (GameCube Preview) (Kiosk *|* Kiosk) (Preview) Kiosk Demo Disc PS2 Kiosk PSP System Kiosk Sample Taikenban Trial Edition D Add-ons Titles with the DAT category Add-Ons . This includes expansion packs and additional materials for titles. e Educational Titles with the DAT category Educational . k MIA Titles or ROMs declared as missing in action in the clone lists or DAT files. m Manuals Titles with (Manual) in the name. M Multimedia Titles with the DAT category Multimedia . These might include games. o Bonus discs Titles with the DAT category Bonus Discs . These could be anything other than the main title content, like patches, manuals, collector discs, or otherwise. p Pirate Titles with (Pirate) in the name. P Preproduction Titles with the DAT category Preproduction , or with the following text in the name: (Alpha [0-99]) (Beta [0-99]) (Pre-Production) (Possible Proto) (Proto [0-99]) (Review Code) r Promotional Titles with the DAT category Promotional , or with the following text in the name: (Promo) EPK Press Kit u Unlicensed Titles unauthorized by console manufacturers, marked by the following text in the name: (Unl) (Aftermarket) (Homebrew) v Video Titles with the DAT category Video .","title":"Exclusions"},{"location":"how-to-use-retool-cli/#outputs","text":"--listnames Also output a TXT file of just the kept title names See config/user-config.yaml to add a prefix and/or suffix to each line. --log Also output a TXT file of what titles have been kept, removed, and set as clones --output <folder> Set an output folder where the new 1G1R DAT file/s will be created --regionsplit Split the result into multiple DAT files based on region Use with -d to only split by region with no 1G1R processing. Not compatible with --legacy . --removesdat Also output a DAT file containing the titles that were removed from the 1G1R DAT file","title":"Outputs"},{"location":"how-to-use-retool-cli/#debug","text":"--config <file> Set a custom user config file to use instead of the default Useful for testing. --clonelist <file> Set a custom clone list to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT file and the clone list isn't automatically detected anymore. Often used together with --metadata . --metadata <file> Set a custom metadata file to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT file and the metadata file isn't automatically detected anymore. Often used together with --clonelist . --legacy Output DAT file/s in legacy parent/clone format Not recommended unless you're debugging or comparing outputs between DAT versions. Not compatible with -d . --nodtd Bypass DTD validation Skips DTD validation of DAT files, useful if validation is causing issues. --singlecpu Disable multiprocessor usage br>Forces Retool to use only a single CPU core, at the cost of performance. This can be useful when debugging Retool, as multiprocessor doesn't cope well with input statements. --trace [ ...] Trace a title through the Retool process for debugging Follows a title through Retool's selection process for debugging. Accepts a regular expression. To function properly, this disables using multiple processors during parent selection. Usage: --trace \"regex of titles to trace\" --warnings Report clone list warnings during processing --warningpause Pause when a clone list warning is found Useful when batch processing DAT files. Tip If you don't know regular expressions, also known as \"regexes\", you can learn the basics at regexlearn.com . You want to be well practiced before using them, as without proper care they can lead to unintended consequences.","title":"Debug"},{"location":"how-to-use-retool-gui/","text":"How to use Retool GUI What follows is a step-by-step walkthrough of using Retool GUI and all of its features. If you're new to DAT management, it might be beneficial to spend some time reading about terminology , and after you've filtered a DAT file with Retool, check out the Beginner's guide to ROM managers . Info Depending on your operating system, all Python commands in this guide might need to be prefixed with python or python3 to work. Get started The following sections cover the initial setup for Retool. Download DAT files and Retool Before you can filter DAT files, they need to be on your hard drive. Download the DAT files for the system you want to verify. Retool supports DAT files from the following groups: No-Intro Redump You might need to extract a ZIP file containing the DAT files to access them. Download Retool , and follow the installation and update instructions for your platform. Open Retool Windows binary Python GUI Navigate to the folder you extracted Retool to, and double click retool-gui.exe . A terminal window shows, which in turn loads the GUI. Don't close the terminal window, as it's used for output. In your terminal/Command Prompt, change the folder to where Retool is installed, and then run the following command: retool-gui.py Add or remove DAT files To process DAT files, you first need to add them to your list: Click Add DAT files to the list to add individual files to the list. Click Add a folder of DAT files to the list to add all the DAT files in a single folder to the list. Click Add a folder of DAT files recursively to the list to add all the DAT files in a folder and its subfolders to the list. You can also remove DAT files from your list: Select one or more DAT files in the list, and then click Remove selected DAT files from the list to remove the DAT files from the list. Click Remove all DAT files from the list to clear the list. You must have at least one DAT file in the list for the Process DAT files button to be enabled. Set an output folder Click Choose an output folder to set where you want Retool to output processed DAT files. Retool doesn't modify any of the DAT files added to the list; instead, it creates new versions of them in the specified folder. Global and system settings Settings are available at two levels in Retool: global and system. Global settings are applied to every DAT Retool processes, so long as system settings don't override them. System settings are applied to a specific system named in a DAT file. For example, you can have settings for just the Sony - PlayStation DAT file from Redump. System settings mostly mirror what's available in the global settings, although there are some unique features. Priorities Retool supports three different types of priorities: regions, languages, and video. Regions You must have at least one region in the Filter by these regions box for the Process DAT files button to be enabled. Only regions in Filter by these regions box are considered when Retool is processing a DAT file. If a title is from another region, it's removed from the output DAT file. Order in the Filter by these regions box is important. For example, if you place USA above Europe, and the title exists in both regions, during processing Retool chooses the USA title. Change the region order To view the regions, in the Global settings or System settings tab, click the Regions tab. You can move regions from the Available regions box to the Filter by these regions box in the following ways: Drag and drop with the mouse. Select one or more regions in the Available regions box, and then click Add regions . Click Add remaining regions , which adds the regions in the Available regions box to the end of the list in the Filter by these regions box. Click Use default order for English speakers to add the recommended region order if English is your first language. This also attempts to prioritize NTSC regions over PAL regions. You can move regions from the Filter by these regions box to the Available regions box in the following ways: Drag and drop with the mouse. Select one or more regions in the Filter by these regions box, and then click Remove regions . Click Remove all regions , which returns all regions to the Available regions box. You can change the order of the regions in the Filter by these regions box in the following ways: Drag and drop with the mouse. Select one or more regions in the Filter by these regions box, and then click Up or Down . Tip A combination of Ctrl ( Cmd on macOS), Shift , and clicking allows for multiple region selections. Languages If no languages are in the Filter by these languages box, then Retool considers all languages during processing, and infers a language order from your region order. If you add languages to the Filter by these languages box, then only those languages are considered when Retool is processing a DAT file. If a title doesn't support a language in that list, it's removed from the output DAT file unless the language is unknown. Order in the Filter by these languages box is important. For example, if you have the following title names in an input DAT file: This is a title (Europe) (En,Fr,De) This is a title (Europe) (En,Fr,De,Es,It) This is a title (Europe) (Es) This is a title (Europe) (Fr,De,Es,It) And the following language order: English Spanish Italian Then the following title is selected as the 1G1R title: This is a title (Europe) (En,Fr,De,Es,It) And these titles are removed from consideration: This is a title (Europe) (Es) This is a title (Europe) (Fr,De,Es,It) This is a title (Europe) (En,Fr,De) This is because This is a title (Europe) (En,Fr,De,Es,It) supports all three languages. Change the language order To view the languages, in the Global settings or Sytem settings tab, click the Languages tab. You can move languages from the Available languages box to the Filter by these languages box in the following ways: Drag and drop with the mouse. Select one or more languages in the Available languages box, and then click Add languages . Click Add remaining languages , which adds the languages in the Available languages box to the end of the list in the Filter by these languages box. You can move languages from the Filter by these languages box to the Available languages box in the following ways: Drag and drop with the mouse. Select one or more languages in the Filter by these languages box, and then click Remove languages . Click Remove all languages , which returns all languages to the Available languages box. You can change the order of the languages in the Filter by these languages box in the following ways: Drag and drop with the mouse. Select one or more languages in the Filter by these languages box, and then click Up or Down . Tip A combination of Ctrl ( Cmd on macOS), Shift , and clicking allows for multiple language selections. Video Video standards are processed after regions, languages, and many other criteria like versions and supersets. Additionally, a video standard is only determined by an explicit tag in a title's name, for example This is a title (World) (NTSC) . As such, the video order is effectively only used as a tie-breaker when choosing between two titles that both specify a video standard in their names. Don't expect to get NTSC titles if you prioritize NTSC as a video standard, but put Europe first in your region order. Change the video order To view the video order, in the Global settings or Sytem settings tab, click the Video tab. You can change the order of the video standards in the Video order box in the following ways: Drag and drop with the mouse. Select one or more video standards in the Video order box, and then click Up or Down . Tip A combination of Ctrl ( Cmd on macOS), Shift , and clicking allows for multiple language selections. Exclusions Retool can exclude specific types of titles from the output DAT file. These exclusions are either based on the <category> tag found in DAT files, or on a string in the title's name. To add exclusions, in the Global settings or System settings tab, click the Exclusions tab. The available exclusions are as follows: Add-ons Titles with the DAT category Add-Ons . This includes expansion packs and additional materials for titles. Applications Titles with the DAT category Applications , or with the following text in the name: (Program) (Test Program) Check Program Sample Program Audio Titles with the DAT category Audio . These might be used as soundtracks by games. Bad dumps Titles marked as bad dumps with a [b] in the name. BIOS and other chips Titles with the DAT category Console , or with the following text in the name: [BIOS] (Enhancement Chip) Bonus discs Titles with the DAT category Bonus Discs . These could be anything other than the main title content, like patches, manuals, collector discs, or otherwise. Coverdiscs Titles with the DAT category Coverdiscs . These were discs that were attached to the front of magazines, and could contain demos, or rarely, full games. Demos, kiosks, and samples Titles with the DAT category Demos , or with the following text in the name: @barai (Demo [1-9]) (Demo-CD) (GameCube Preview) (Kiosk *|* Kiosk) (Preview) Kiosk Demo Disc PS2 Kiosk PSP System Kiosk Sample Taikenban Trial Edition Educational Titles with the DAT category Educational . Manuals Titles with (Manual) in the name. MIA Titles or ROMs declared as missing in action in the clone lists or DAT files. Multimedia Titles with the DAT category Multimedia . These might include games. Pirate Titles with (Pirate) in the name. Preproduction Titles with the DAT category Preproduction , or with the following text in the name: (Alpha [0-99]) (Beta [0-99]) (Pre-Production) (Possible Proto) (Proto [0-99]) (Review Code) Promotional Titles with the DAT category Promotional , or with the following text in the name: (Promo) EPK Press Kit Unlicensed Titles unauthorized by console manufacturers, marked by the following text in the name: (Unl) (Aftermarket) (Homebrew) Video Titles with the DAT category Video . Options Options change Retool's behavior either at the title level, or the broader DAT level. To set options, in the Global settings or System settings tab, click the Options tab. Title options These options change how Retool handles certain titles. Disable 1G1R filtering Ignore clone lists, and treat each title as unique. Useful if you want to keep everything from a specific set of regions and/or languages. You can use this in combination with Split the output into multiple DAT files based on region to treat Retool as a region splitter and nothing more. If this option is disabled, it's because you've enabled Output DAT in legacy parent/clone format , which isn't compatible with this feature. Prefer regions over languages By default, if a title from a higher priority region doesn't support your preferred languages but a lower priority region does, Retool selects the latter. This option disables this behavior, forcing strict adherence to region priority regardless of language support This option also overrides similar behavior in superset selection, which means you might get a title that was released in your preferred region that has less content, instead of one that was released in another region that contains more content and supports your preferred languages. Include titles without hashes or sizes specified in the input DAT file Some DAT files don't list any hashes or sizes for some files, and Retool filters these out by default. This option makes sure those files are kept. Prefer titles ripped from modern rereleases over original system releases For the sake of emulator compatibility, Retool prefers versions of games released on the original system instead of those ripped from rereleases on platforms like Virtual Console and Steam. This option reverses that behavior. Prefer licensed versions over unlicensed, aftermarket, or homebrew titles Sometimes games are rereleased long after the lifespan of a console, in regions they weren't originally available in. By default Retool selects these titles if they match your preferred region/language priorities. Enable this option to choose a production version of a title over the unlicensed/aftermarket/homebrew title if possible. This might select titles from a lower priority region, or with lower priority languages, or with less features. Disable global and system user filters Ignore both global and system user filters. Output options These options change the files that Retool outputs as part of its process. Split the output into multiple DAT files based on region Instead of one output DAT containing all the filtered results, split the output into multiple DAT files based on the regions you've selected. If this is disabled, it's because you've enabled Output DAT in legacy parent/clone format , which isn't compatible with this option. Also output a DAT file of all the removed titles In addition to the output DAT file, create another DAT file containing the titles Retool removed. Also output lists of what titles have been kept and removed In addition to the output DAT file, produce a TXT file that lists what titles have been kept, and what titles have been removed. Also output a list of just the title names from the output DAT file In addition to the output DAT file, produce a TXT file that lists only the name of each title in the output DAT file, and optionally add a prefix and suffix to each name. If you add a prefix that starts with http:// , https:// or ftp:// , each line in the file is URL encoded. Debug options These options are useful for developing and testing Retool. Report clone list warnings during processing Turn on warnings when there are mismatches between the clone list and the DAT file. Pause on clone list warnings Pause Retool each time a clone list warning is issued. Output DAT in legacy parent/clone format Not recommended unless you're debugging or comparing outputs between DAT versions. If this is disabled, it's because you've disabled 1G1R filtering or chosen to split by region, which isn't compatible with this option. Bypass DTD validation Skips DTD validation of DAT files, useful if validation is causing issues. Disable multiprocessor usage Forces Retool to use only a single CPU core, at the cost of performance. This can be useful when debugging Retool, as multiprocessor doesn't cope well with input statements. Trace a title through Retool's process Follows a title through Retool's selection process for debugging. Accepts a regular expression. To function properly, this disables using multiple processors during parent selection. Tip If you don't know regular expressions, also known as \"regexes\", you can learn the basics at regexlearn.com . You want to be well practiced before using them, as without proper care they can lead to unintended consequences. User filters User filters override the default choices Retool makes by force including or excluding titles whose names match a certain string. Each filter must be on its own line. Note If Retool has genuinely missed a relationship between titles, please don't just create a filter \u2014 create an issue too so the clone lists or Retool can be updated. There are three different match types: Plain text indicates a partial string match. A prefix of / indicates a regular expression match. A prefix of | indicates a full string match. Additionally, you can wrap any of these strings in <> to also remove any match's related clones. Additionally, there are rules when it comes to user filters, and how they interact at the global settings and system settings level: System includes override all excludes. System excludes override global includes. Global includes override global excludes. To set user filters, in the Global settings or System settings tab, click the User filters tab. Partial matches If a line isn't prefixed with | (full match) or / (regular expression) in an Exclude or Include box, then it's interpreted as a partial match. A partial match looks for the specified text inside all title names. For example, if an input DAT contains the following title names: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And you put the following text in the Exclude box: Hot Cold Every title in the example list is excluded from the output DAT file. This is because Cold matches It's Pretty Cold (Japan) , and Hot matches every other title, as it's found in both the word Hot and Hotel . If we also add the following text to the Include box: Ho The behavior changes again: The include for Ho overrides the exclude for Hot . The include for Ho prevents Retool from assigning Do You Think it's Hot (USA) (Alt) to Do You Think it's Hot (USA) as a clone, meaning both titles end up in the output DAT file. As you can see, you need to be careful when using partial matches. Regular expressions If you're familiar with regular expressions, also known as \"regexes\", you know the power (and pain) that they can bring. To define an include or exclude as a regex, prefix it with a forward slash ( / ). Tip If you don't know regex, you can learn the basics at regexlearn.com . You want to be well practiced before using them, as without proper care they can lead to unintended consequences. For example, if an input DAT file contains the following title names: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And you put the following text in an Exclude box: /^I All titles beginning with I are excluded from the output DAT file. If you also put the following text in an Include box: /\\(USA\\) All USA titles are kept, even if they start with I . In our example list the (Alt) title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept. Full matches Full matches only apply to titles with the exact same name. To define an include or exclude as a full match, prefix it with a pipe ( | ). For example, if an input DAT file contains the following titles: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And you put the following text in an Exclude box: |Do You Think it's Hot (USA) Then that title is excluded from the output DAT file. If you remove the exclude, and then put the following text in an Include box: |Do You Think it's Hot (USA) (Alt) Then that title is kept in the output DAT file, and the final titles chosen are: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) In our example list the (Alt) title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept. System settings To view a DAT file's system settings, click the System settings tab, and then click a DAT file that you've added to your list. System settings are applied to a specific system named in a DAT file. For example, you can have settings for just the Sony - PlayStation DAT file from Redump. When you load a different version of that DAT file in Retool, so long as the system name and release group haven't changed, the system settings still apply. On most system settings tabs there is an Override global settings checkbox. When selected, this means that the system settings are used for those settings instead of the global ones whenever that DAT file is processed. System settings mostly mirror what's available in the global settings, although there are some unique features. Paths The Paths tab is unique to system settings, and lets you select a custom output folder, clone list, and metadata file for the selected system. If the override checkbox is selected and a path hasn't been chosen for one of these options, then that option uses the default or global setting instead. System user filters The User filters tab in the system settings has no override checkbox. Instead, it interacts with the global settings user filters. See User filters for how the global and system user filters interact, and the rules for creating the filters.","title":"Retool GUI"},{"location":"how-to-use-retool-gui/#how-to-use-retool-gui","text":"What follows is a step-by-step walkthrough of using Retool GUI and all of its features. If you're new to DAT management, it might be beneficial to spend some time reading about terminology , and after you've filtered a DAT file with Retool, check out the Beginner's guide to ROM managers . Info Depending on your operating system, all Python commands in this guide might need to be prefixed with python or python3 to work.","title":"How to use Retool GUI"},{"location":"how-to-use-retool-gui/#get-started","text":"The following sections cover the initial setup for Retool.","title":"Get started"},{"location":"how-to-use-retool-gui/#download-dat-files-and-retool","text":"Before you can filter DAT files, they need to be on your hard drive. Download the DAT files for the system you want to verify. Retool supports DAT files from the following groups: No-Intro Redump You might need to extract a ZIP file containing the DAT files to access them. Download Retool , and follow the installation and update instructions for your platform.","title":"Download DAT files and Retool"},{"location":"how-to-use-retool-gui/#open-retool","text":"Windows binary Python GUI Navigate to the folder you extracted Retool to, and double click retool-gui.exe . A terminal window shows, which in turn loads the GUI. Don't close the terminal window, as it's used for output. In your terminal/Command Prompt, change the folder to where Retool is installed, and then run the following command: retool-gui.py","title":"Open Retool"},{"location":"how-to-use-retool-gui/#add-or-remove-dat-files","text":"To process DAT files, you first need to add them to your list: Click Add DAT files to the list to add individual files to the list. Click Add a folder of DAT files to the list to add all the DAT files in a single folder to the list. Click Add a folder of DAT files recursively to the list to add all the DAT files in a folder and its subfolders to the list. You can also remove DAT files from your list: Select one or more DAT files in the list, and then click Remove selected DAT files from the list to remove the DAT files from the list. Click Remove all DAT files from the list to clear the list. You must have at least one DAT file in the list for the Process DAT files button to be enabled.","title":"Add or remove DAT files"},{"location":"how-to-use-retool-gui/#set-an-output-folder","text":"Click Choose an output folder to set where you want Retool to output processed DAT files. Retool doesn't modify any of the DAT files added to the list; instead, it creates new versions of them in the specified folder.","title":"Set an output folder"},{"location":"how-to-use-retool-gui/#global-and-system-settings","text":"Settings are available at two levels in Retool: global and system. Global settings are applied to every DAT Retool processes, so long as system settings don't override them. System settings are applied to a specific system named in a DAT file. For example, you can have settings for just the Sony - PlayStation DAT file from Redump. System settings mostly mirror what's available in the global settings, although there are some unique features.","title":"Global and system settings"},{"location":"how-to-use-retool-gui/#priorities","text":"Retool supports three different types of priorities: regions, languages, and video.","title":"Priorities"},{"location":"how-to-use-retool-gui/#regions","text":"You must have at least one region in the Filter by these regions box for the Process DAT files button to be enabled. Only regions in Filter by these regions box are considered when Retool is processing a DAT file. If a title is from another region, it's removed from the output DAT file. Order in the Filter by these regions box is important. For example, if you place USA above Europe, and the title exists in both regions, during processing Retool chooses the USA title.","title":"Regions"},{"location":"how-to-use-retool-gui/#change-the-region-order","text":"To view the regions, in the Global settings or System settings tab, click the Regions tab. You can move regions from the Available regions box to the Filter by these regions box in the following ways: Drag and drop with the mouse. Select one or more regions in the Available regions box, and then click Add regions . Click Add remaining regions , which adds the regions in the Available regions box to the end of the list in the Filter by these regions box. Click Use default order for English speakers to add the recommended region order if English is your first language. This also attempts to prioritize NTSC regions over PAL regions. You can move regions from the Filter by these regions box to the Available regions box in the following ways: Drag and drop with the mouse. Select one or more regions in the Filter by these regions box, and then click Remove regions . Click Remove all regions , which returns all regions to the Available regions box. You can change the order of the regions in the Filter by these regions box in the following ways: Drag and drop with the mouse. Select one or more regions in the Filter by these regions box, and then click Up or Down . Tip A combination of Ctrl ( Cmd on macOS), Shift , and clicking allows for multiple region selections.","title":"Change the region order"},{"location":"how-to-use-retool-gui/#languages","text":"If no languages are in the Filter by these languages box, then Retool considers all languages during processing, and infers a language order from your region order. If you add languages to the Filter by these languages box, then only those languages are considered when Retool is processing a DAT file. If a title doesn't support a language in that list, it's removed from the output DAT file unless the language is unknown. Order in the Filter by these languages box is important. For example, if you have the following title names in an input DAT file: This is a title (Europe) (En,Fr,De) This is a title (Europe) (En,Fr,De,Es,It) This is a title (Europe) (Es) This is a title (Europe) (Fr,De,Es,It) And the following language order: English Spanish Italian Then the following title is selected as the 1G1R title: This is a title (Europe) (En,Fr,De,Es,It) And these titles are removed from consideration: This is a title (Europe) (Es) This is a title (Europe) (Fr,De,Es,It) This is a title (Europe) (En,Fr,De) This is because This is a title (Europe) (En,Fr,De,Es,It) supports all three languages.","title":"Languages"},{"location":"how-to-use-retool-gui/#change-the-language-order","text":"To view the languages, in the Global settings or Sytem settings tab, click the Languages tab. You can move languages from the Available languages box to the Filter by these languages box in the following ways: Drag and drop with the mouse. Select one or more languages in the Available languages box, and then click Add languages . Click Add remaining languages , which adds the languages in the Available languages box to the end of the list in the Filter by these languages box. You can move languages from the Filter by these languages box to the Available languages box in the following ways: Drag and drop with the mouse. Select one or more languages in the Filter by these languages box, and then click Remove languages . Click Remove all languages , which returns all languages to the Available languages box. You can change the order of the languages in the Filter by these languages box in the following ways: Drag and drop with the mouse. Select one or more languages in the Filter by these languages box, and then click Up or Down . Tip A combination of Ctrl ( Cmd on macOS), Shift , and clicking allows for multiple language selections.","title":"Change the language order"},{"location":"how-to-use-retool-gui/#video","text":"Video standards are processed after regions, languages, and many other criteria like versions and supersets. Additionally, a video standard is only determined by an explicit tag in a title's name, for example This is a title (World) (NTSC) . As such, the video order is effectively only used as a tie-breaker when choosing between two titles that both specify a video standard in their names. Don't expect to get NTSC titles if you prioritize NTSC as a video standard, but put Europe first in your region order.","title":"Video"},{"location":"how-to-use-retool-gui/#change-the-video-order","text":"To view the video order, in the Global settings or Sytem settings tab, click the Video tab. You can change the order of the video standards in the Video order box in the following ways: Drag and drop with the mouse. Select one or more video standards in the Video order box, and then click Up or Down . Tip A combination of Ctrl ( Cmd on macOS), Shift , and clicking allows for multiple language selections.","title":"Change the video order"},{"location":"how-to-use-retool-gui/#exclusions","text":"Retool can exclude specific types of titles from the output DAT file. These exclusions are either based on the <category> tag found in DAT files, or on a string in the title's name. To add exclusions, in the Global settings or System settings tab, click the Exclusions tab. The available exclusions are as follows: Add-ons Titles with the DAT category Add-Ons . This includes expansion packs and additional materials for titles. Applications Titles with the DAT category Applications , or with the following text in the name: (Program) (Test Program) Check Program Sample Program Audio Titles with the DAT category Audio . These might be used as soundtracks by games. Bad dumps Titles marked as bad dumps with a [b] in the name. BIOS and other chips Titles with the DAT category Console , or with the following text in the name: [BIOS] (Enhancement Chip) Bonus discs Titles with the DAT category Bonus Discs . These could be anything other than the main title content, like patches, manuals, collector discs, or otherwise. Coverdiscs Titles with the DAT category Coverdiscs . These were discs that were attached to the front of magazines, and could contain demos, or rarely, full games. Demos, kiosks, and samples Titles with the DAT category Demos , or with the following text in the name: @barai (Demo [1-9]) (Demo-CD) (GameCube Preview) (Kiosk *|* Kiosk) (Preview) Kiosk Demo Disc PS2 Kiosk PSP System Kiosk Sample Taikenban Trial Edition Educational Titles with the DAT category Educational . Manuals Titles with (Manual) in the name. MIA Titles or ROMs declared as missing in action in the clone lists or DAT files. Multimedia Titles with the DAT category Multimedia . These might include games. Pirate Titles with (Pirate) in the name. Preproduction Titles with the DAT category Preproduction , or with the following text in the name: (Alpha [0-99]) (Beta [0-99]) (Pre-Production) (Possible Proto) (Proto [0-99]) (Review Code) Promotional Titles with the DAT category Promotional , or with the following text in the name: (Promo) EPK Press Kit Unlicensed Titles unauthorized by console manufacturers, marked by the following text in the name: (Unl) (Aftermarket) (Homebrew) Video Titles with the DAT category Video .","title":"Exclusions"},{"location":"how-to-use-retool-gui/#options","text":"Options change Retool's behavior either at the title level, or the broader DAT level. To set options, in the Global settings or System settings tab, click the Options tab.","title":"Options"},{"location":"how-to-use-retool-gui/#title-options","text":"These options change how Retool handles certain titles. Disable 1G1R filtering Ignore clone lists, and treat each title as unique. Useful if you want to keep everything from a specific set of regions and/or languages. You can use this in combination with Split the output into multiple DAT files based on region to treat Retool as a region splitter and nothing more. If this option is disabled, it's because you've enabled Output DAT in legacy parent/clone format , which isn't compatible with this feature. Prefer regions over languages By default, if a title from a higher priority region doesn't support your preferred languages but a lower priority region does, Retool selects the latter. This option disables this behavior, forcing strict adherence to region priority regardless of language support This option also overrides similar behavior in superset selection, which means you might get a title that was released in your preferred region that has less content, instead of one that was released in another region that contains more content and supports your preferred languages. Include titles without hashes or sizes specified in the input DAT file Some DAT files don't list any hashes or sizes for some files, and Retool filters these out by default. This option makes sure those files are kept. Prefer titles ripped from modern rereleases over original system releases For the sake of emulator compatibility, Retool prefers versions of games released on the original system instead of those ripped from rereleases on platforms like Virtual Console and Steam. This option reverses that behavior. Prefer licensed versions over unlicensed, aftermarket, or homebrew titles Sometimes games are rereleased long after the lifespan of a console, in regions they weren't originally available in. By default Retool selects these titles if they match your preferred region/language priorities. Enable this option to choose a production version of a title over the unlicensed/aftermarket/homebrew title if possible. This might select titles from a lower priority region, or with lower priority languages, or with less features. Disable global and system user filters Ignore both global and system user filters.","title":"Title options"},{"location":"how-to-use-retool-gui/#output-options","text":"These options change the files that Retool outputs as part of its process. Split the output into multiple DAT files based on region Instead of one output DAT containing all the filtered results, split the output into multiple DAT files based on the regions you've selected. If this is disabled, it's because you've enabled Output DAT in legacy parent/clone format , which isn't compatible with this option. Also output a DAT file of all the removed titles In addition to the output DAT file, create another DAT file containing the titles Retool removed. Also output lists of what titles have been kept and removed In addition to the output DAT file, produce a TXT file that lists what titles have been kept, and what titles have been removed. Also output a list of just the title names from the output DAT file In addition to the output DAT file, produce a TXT file that lists only the name of each title in the output DAT file, and optionally add a prefix and suffix to each name. If you add a prefix that starts with http:// , https:// or ftp:// , each line in the file is URL encoded.","title":"Output options"},{"location":"how-to-use-retool-gui/#debug-options","text":"These options are useful for developing and testing Retool. Report clone list warnings during processing Turn on warnings when there are mismatches between the clone list and the DAT file. Pause on clone list warnings Pause Retool each time a clone list warning is issued. Output DAT in legacy parent/clone format Not recommended unless you're debugging or comparing outputs between DAT versions. If this is disabled, it's because you've disabled 1G1R filtering or chosen to split by region, which isn't compatible with this option. Bypass DTD validation Skips DTD validation of DAT files, useful if validation is causing issues. Disable multiprocessor usage Forces Retool to use only a single CPU core, at the cost of performance. This can be useful when debugging Retool, as multiprocessor doesn't cope well with input statements. Trace a title through Retool's process Follows a title through Retool's selection process for debugging. Accepts a regular expression. To function properly, this disables using multiple processors during parent selection. Tip If you don't know regular expressions, also known as \"regexes\", you can learn the basics at regexlearn.com . You want to be well practiced before using them, as without proper care they can lead to unintended consequences.","title":"Debug options"},{"location":"how-to-use-retool-gui/#user-filters","text":"User filters override the default choices Retool makes by force including or excluding titles whose names match a certain string. Each filter must be on its own line. Note If Retool has genuinely missed a relationship between titles, please don't just create a filter \u2014 create an issue too so the clone lists or Retool can be updated. There are three different match types: Plain text indicates a partial string match. A prefix of / indicates a regular expression match. A prefix of | indicates a full string match. Additionally, you can wrap any of these strings in <> to also remove any match's related clones. Additionally, there are rules when it comes to user filters, and how they interact at the global settings and system settings level: System includes override all excludes. System excludes override global includes. Global includes override global excludes. To set user filters, in the Global settings or System settings tab, click the User filters tab.","title":"User filters"},{"location":"how-to-use-retool-gui/#partial-matches","text":"If a line isn't prefixed with | (full match) or / (regular expression) in an Exclude or Include box, then it's interpreted as a partial match. A partial match looks for the specified text inside all title names. For example, if an input DAT contains the following title names: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And you put the following text in the Exclude box: Hot Cold Every title in the example list is excluded from the output DAT file. This is because Cold matches It's Pretty Cold (Japan) , and Hot matches every other title, as it's found in both the word Hot and Hotel . If we also add the following text to the Include box: Ho The behavior changes again: The include for Ho overrides the exclude for Hot . The include for Ho prevents Retool from assigning Do You Think it's Hot (USA) (Alt) to Do You Think it's Hot (USA) as a clone, meaning both titles end up in the output DAT file. As you can see, you need to be careful when using partial matches.","title":"Partial matches"},{"location":"how-to-use-retool-gui/#regular-expressions","text":"If you're familiar with regular expressions, also known as \"regexes\", you know the power (and pain) that they can bring. To define an include or exclude as a regex, prefix it with a forward slash ( / ). Tip If you don't know regex, you can learn the basics at regexlearn.com . You want to be well practiced before using them, as without proper care they can lead to unintended consequences. For example, if an input DAT file contains the following title names: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And you put the following text in an Exclude box: /^I All titles beginning with I are excluded from the output DAT file. If you also put the following text in an Include box: /\\(USA\\) All USA titles are kept, even if they start with I . In our example list the (Alt) title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept.","title":"Regular expressions"},{"location":"how-to-use-retool-gui/#full-matches","text":"Full matches only apply to titles with the exact same name. To define an include or exclude as a full match, prefix it with a pipe ( | ). For example, if an input DAT file contains the following titles: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) And you put the following text in an Exclude box: |Do You Think it's Hot (USA) Then that title is excluded from the output DAT file. If you remove the exclude, and then put the following text in an Include box: |Do You Think it's Hot (USA) (Alt) Then that title is kept in the output DAT file, and the final titles chosen are: Do You Think it's Hot (USA) Do You Think it's Hot (USA) (Alt) It's Pretty Cold (Japan) I Can't Find My Hotel (Europe) In our example list the (Alt) title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept.","title":"Full matches"},{"location":"how-to-use-retool-gui/#system-settings","text":"To view a DAT file's system settings, click the System settings tab, and then click a DAT file that you've added to your list. System settings are applied to a specific system named in a DAT file. For example, you can have settings for just the Sony - PlayStation DAT file from Redump. When you load a different version of that DAT file in Retool, so long as the system name and release group haven't changed, the system settings still apply. On most system settings tabs there is an Override global settings checkbox. When selected, this means that the system settings are used for those settings instead of the global ones whenever that DAT file is processed. System settings mostly mirror what's available in the global settings, although there are some unique features.","title":"System settings"},{"location":"how-to-use-retool-gui/#paths","text":"The Paths tab is unique to system settings, and lets you select a custom output folder, clone list, and metadata file for the selected system. If the override checkbox is selected and a path hasn't been chosen for one of these options, then that option uses the default or global setting instead.","title":"Paths"},{"location":"how-to-use-retool-gui/#system-user-filters","text":"The User filters tab in the system settings has no override checkbox. Instead, it interacts with the global settings user filters. See User filters for how the global and system user filters interact, and the rules for creating the filters.","title":"System user filters"},{"location":"integrate/","text":"Integrate Retool into your own software Retool CLI supports stdout redirects instead of writing to DAT files, meaning it can be used as an intermediary filter tool for existing software workflows. If you'd prefer not to integrate Retool itself but find value in its clone lists, they are kept in a separate repository from the main program and are free to use.","title":"Integrate Retool into your own software"},{"location":"integrate/#integrate-retool-into-your-own-software","text":"Retool CLI supports stdout redirects instead of writing to DAT files, meaning it can be used as an intermediary filter tool for existing software workflows. If you'd prefer not to integrate Retool itself but find value in its clone lists, they are kept in a separate repository from the main program and are free to use.","title":"Integrate Retool into your own software"},{"location":"naming-system/","text":"Retool's naming system Retool generates multiple names for each title in a DAT to help match and group together titles more accurately. These names are used directly in the code, and also clone lists . Tip Retool's different naming conventions can take a while to get used to. To help you start, you can use the title tool in Retool GUI. Open Retool GUI, then click File > Title tool to launch it. Paste in the full name you've found in the DAT you're working on, and it shows you the other names Retool assigns to that title by default. Full names Full names are the names of titles as presented in the DAT file, including tags. For example: This is a title (USA) (En,Fr) (Disc A) (Best Collection) Group names Group names are how Retool bundles together similar titles to compare against each other. Group names take only the content before the first ( in full names, and are in lowercase. Additionally, any string that looks like a version is stripped. For example, the following full names: This is a title v1.00 (USA) (En,Fr) (Disc A) (Best Collection) This is a title v1.00 (USA) (En,Fr) (Disc B) (Best Collection) Are both assigned to the same group by default: this is a title Group names are derived from three places: The full name of a title (default). group values in the renames array in a clone list. newGroup or elseGroup values in the overrides array in a clone list. Region-free names Region-free names are the same as full names, except their regions and languages have been stripped. For example, the following full name: This is a title (USA) (En,Fr) (Disc A) (Best Collection) Has the following region-free name: This is a title (Disc A) (Best Collection) Tag-free names Tag-free names are the same as full names, except they have normalized disc names , and tags have been stripped from them as defined in the ignore_tags , promote_editions , demote_editions , and modern_editions arrays in config/internal-config.json . Tag-free names still include regions and languages. For example, the following full name: This is a title (USA) (En,Fr) (Disc A) (Best Collection) Has the following tag-free name: This is a title (USA) (En,Fr) (Disc 1) Normalized disc names For tag-free names (and as a consequence, short names), Retool attempts to align all naming variants for discs to the one standard for better automated matching of titles. That is, variants like (Disc 1) , (Disc A) , (Disco Uno) , and (Side A) are all (Disc 1) as far as Retool is concerned. This is also true if you're using tag-free or short names in clone lists. The replace strings for normalized disc names are in the disc_rename object in config/internal-config.json . This is not a 1:1 mapping of what the disc name is and what it should be. Instead, it's a sequential set of string replacements that's iterated over when processing a title's full name, so the order is important. Short names Short names are a shortened version of full names, most often used in clone lists as a handy way to reference many titles at once without having to list the full name of every variant. The short name is built by first getting the tag-free name (which also normalizes disc names), and then getting the region-free name from that. It is then converted to lowercase to avoid casing issues. The short name also acts as a differentiator for titles that get bundled into the same group, but shouldn't be treated as 1:1 matches. For example, the following full names: This is a title (USA) (En,Fr) (Disc A) (Best Collection) This is a title (USA) (En,Fr) (Disc B) (Best Collection) Are both assigned to the same group by default: this is a title However, because they are different discs from the same set and not equivalent titles, they get assigned different short names: this is a title (disc 1) this is a title (disc 2) This prevents them from being considered as clones of each other.","title":"Retool's naming system"},{"location":"naming-system/#retools-naming-system","text":"Retool generates multiple names for each title in a DAT to help match and group together titles more accurately. These names are used directly in the code, and also clone lists . Tip Retool's different naming conventions can take a while to get used to. To help you start, you can use the title tool in Retool GUI. Open Retool GUI, then click File > Title tool to launch it. Paste in the full name you've found in the DAT you're working on, and it shows you the other names Retool assigns to that title by default.","title":"Retool's naming system"},{"location":"naming-system/#full-names","text":"Full names are the names of titles as presented in the DAT file, including tags. For example: This is a title (USA) (En,Fr) (Disc A) (Best Collection)","title":"Full names"},{"location":"naming-system/#group-names","text":"Group names are how Retool bundles together similar titles to compare against each other. Group names take only the content before the first ( in full names, and are in lowercase. Additionally, any string that looks like a version is stripped. For example, the following full names: This is a title v1.00 (USA) (En,Fr) (Disc A) (Best Collection) This is a title v1.00 (USA) (En,Fr) (Disc B) (Best Collection) Are both assigned to the same group by default: this is a title Group names are derived from three places: The full name of a title (default). group values in the renames array in a clone list. newGroup or elseGroup values in the overrides array in a clone list.","title":"Group names"},{"location":"naming-system/#region-free-names","text":"Region-free names are the same as full names, except their regions and languages have been stripped. For example, the following full name: This is a title (USA) (En,Fr) (Disc A) (Best Collection) Has the following region-free name: This is a title (Disc A) (Best Collection)","title":"Region-free names"},{"location":"naming-system/#tag-free-names","text":"Tag-free names are the same as full names, except they have normalized disc names , and tags have been stripped from them as defined in the ignore_tags , promote_editions , demote_editions , and modern_editions arrays in config/internal-config.json . Tag-free names still include regions and languages. For example, the following full name: This is a title (USA) (En,Fr) (Disc A) (Best Collection) Has the following tag-free name: This is a title (USA) (En,Fr) (Disc 1)","title":"Tag-free names"},{"location":"naming-system/#normalized-disc-names","text":"For tag-free names (and as a consequence, short names), Retool attempts to align all naming variants for discs to the one standard for better automated matching of titles. That is, variants like (Disc 1) , (Disc A) , (Disco Uno) , and (Side A) are all (Disc 1) as far as Retool is concerned. This is also true if you're using tag-free or short names in clone lists. The replace strings for normalized disc names are in the disc_rename object in config/internal-config.json . This is not a 1:1 mapping of what the disc name is and what it should be. Instead, it's a sequential set of string replacements that's iterated over when processing a title's full name, so the order is important.","title":"Normalized disc names"},{"location":"naming-system/#short-names","text":"Short names are a shortened version of full names, most often used in clone lists as a handy way to reference many titles at once without having to list the full name of every variant. The short name is built by first getting the tag-free name (which also normalizes disc names), and then getting the region-free name from that. It is then converted to lowercase to avoid casing issues. The short name also acts as a differentiator for titles that get bundled into the same group, but shouldn't be treated as 1:1 matches. For example, the following full names: This is a title (USA) (En,Fr) (Disc A) (Best Collection) This is a title (USA) (En,Fr) (Disc B) (Best Collection) Are both assigned to the same group by default: this is a title However, because they are different discs from the same set and not equivalent titles, they get assigned different short names: this is a title (disc 1) this is a title (disc 2) This prevents them from being considered as clones of each other.","title":"Short names"},{"location":"retool-1g1r/","text":"Why Retool's 1G1R is better Standard \"One Game, One ROM\" (1G1R) has problems. Way back in 2008 Eric Bole-Feysot raised that 1G1R would be an appealing concept to implement in No-Intro DAT files. The various groups involved at the time ultimately settled on repurposing the existing parent/clone implementation established by MAME , added an extra <release> tag to define what region a title was from and what languages it supported, and built user-enabled 1G1R support into ROM managers to select titles based on the user's region and language preferences. It was, at the time, enough. As DAT files became more detailed, 1G1R filtering failed to keep pace. The problems with ROM manager 1G1R and parent/clone DAT files The criteria for 1G1R title selection outside of Retool is based purely on regions and languages, and the way ROM managers like CLRMAMEPro and Romcenter handle this is far from ideal. For a more code-focused approach to how this works, check out LogiqX's pseudo-code on the No-Intro forums (search the page for \"I do this kind of thing for a living\"). The code essentially sets up the following standard: Titles are given a score based on a combination of region and language priorities provided by the user. Regions are more important than languages. Titles should be prioritized and filtered by user-defined regions. Languages are added as a prioritized bonus score to a title's region score. They should not be used as a filter. Unfortunately, this creates a few problems. The language filter/priority problem The existing parent/clone algorithm creates uncomfortable situations like the following. For example, consider a DAT with the following three titles: <game name= \"Test Title (Canada) (Fr)\" > <description> Test Title (Canada) (Fr) </description> <release name= \"Test Title (Canada) (Fr)\" region= \"Canada\" language= \"Fr\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Canada) (Fr).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Japan)\" cloneof= \"Test Title (Canada) (Fr)\" > <description> Test Title (Japan) </description> <release name= \"Test Title (Japan)\" region= \"Japan\" language= \"Ja\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Japan).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Norway)\" cloneof= \"Test Title (Canada) (Fr)\" > <description> Test Title (Norway) </description> <release name= \"Test Title (Norway)\" region= \"Norway\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Norway).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> You want to filter the DAT in a 1G1R fashion, and you only speak English. You set your regions in an order that you hope should give you a balance between English titles and higher frame rates courtesy of NTSC: Canada Japan Norway As insurance, you set your languages in an order that prioritizes English: En Ja Fr A cursory look at the XML data shows that the Norwegian title is the only one that supports English, and is arguably what the user would want. What title gets chosen in CLRMAMEPro's 1G1R process? Test Title (Canada) (Fr) , because Canada is the highest priority region. What if you remove Fr from the language list? You still get Test Title (Canada) (Fr) , as languages are treated as a bonus score, not a filter. The version problem The current DAT and ROM manager ecosystem doesn't have a concept of versioning. Say you have the following titles in a DAT file: <game name= \"Test Title (USA) (v1.2)\" > <description> Test Title (USA) (v1.2) </description> <release name= \"Test Title (USA) (v1.2)\" region= \"USA\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (USA) (v1.2).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (USA) (v1.1)\" cloneof= \"Test Title (USA) (v1.2)\" > <description> Test Title (USA) (v1.1) </description> <release name= \"Test Title (USA) (v1.1)\" region= \"USA\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (USA) (v1.1).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Europe) (v0.6)\" cloneof= \"Test Title (USA) (v1.2)\" > <description> Test Title (Europe) (v0.6) </description> <release name= \"Test Title (Europe) (v0.6)\" region= \"Europe\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Europe) (v0.6).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Europe) (v2.0)\" cloneof= \"Test Title (USA) (v1.2)\" > <description> Test Title (Europe) (v2.0) </description> <release name= \"Test Title (Europe) (v2.0)\" region= \"Europe\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Europe) (v2.0).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Europe) (v1.1)\" cloneof= \"Test Title (USA) (v1.2)\" > <description> Test Title (Europe) (v1.1) </description> <release name= \"Test Title (Europe) (v1.1)\" region= \"Europe\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Europe) (v1.1).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> If you set USA as the top priority region in your ROM manager, you get whatever title is marked as the parent, in this case, Test Title (USA) (v1.2) . However, if you set Europe as the top priority region, since the parent is from the USA, you get something unexpected. In CLRMAMEPro, you get whatever is the first European title in the DAT file: in this case Test Title (Europe) (v0.6) . In RomCenter, you get whatever is the last: in this case Test Title (Europe) (v1.1) . In both cases, the wrong version of the title gets selected: it should be Test Title (Europe) (v2.0) . The broader priority problem These issues expand beyond language issues and easily identifiable versions: how do you deal with versions vs revisions? Production vs preproduction? How about Hibaihin/Not for Resale titles? What about disc IDs used by the likes of PlayStation? Or OEM titles or release dates? What do you do when you have a production title in a lower priority region, but only an unlicensed, badly dumped, or preproduction version in a higher priority region? How do compilations play a part, or supersets like Game of the Year editions, or DVD rereleases of games that were originally on multiple CDs? There are numerous questions like these that crop up when trying to determine the best possible 1G1R title to select, which is complicated again by user defined and ordered regions and languages, and their own specific curation desires. The human problem Parent/clone DAT files are generally administered by hand. There's no automatic logic that highlights that titles might be related as a human enters them into a database \u2014 they need to manually make that link themselves, and be aware that the clones of multiple different names might exist. On a single DAT with multiple contributors, where the focus can be \"DAT all the things\" over attention to detail, this lends itself to oversights and clones being missed. What Retool does differently Retool ignores the parent/clone data manually entered into DAT files, and analyzes title names to automatically group them together. It makes use of clone lists to not only close the gap where automatic detection doesn't work out, but to recategorize and prioritize titles accordingly. It doesn't use a scoring system based on region and language to determine which title to pick, but instead puts titles through a series of filters based on detailed criteria. It makes use of scraped data from Redump and No-Intro's websites to provide additional language details not present in title names. Finally, it can treat languages as both a filter and something that should have higher priority than regions, although you can absolutely prioritize regions if you desire. Want to know more? Find out how Retool works .","title":"Why Retool's 1G1R is better"},{"location":"retool-1g1r/#why-retools-1g1r-is-better","text":"Standard \"One Game, One ROM\" (1G1R) has problems. Way back in 2008 Eric Bole-Feysot raised that 1G1R would be an appealing concept to implement in No-Intro DAT files. The various groups involved at the time ultimately settled on repurposing the existing parent/clone implementation established by MAME , added an extra <release> tag to define what region a title was from and what languages it supported, and built user-enabled 1G1R support into ROM managers to select titles based on the user's region and language preferences. It was, at the time, enough. As DAT files became more detailed, 1G1R filtering failed to keep pace.","title":"Why Retool's 1G1R is better"},{"location":"retool-1g1r/#the-problems-with-rom-manager-1g1r-and-parentclone-dat-files","text":"The criteria for 1G1R title selection outside of Retool is based purely on regions and languages, and the way ROM managers like CLRMAMEPro and Romcenter handle this is far from ideal. For a more code-focused approach to how this works, check out LogiqX's pseudo-code on the No-Intro forums (search the page for \"I do this kind of thing for a living\"). The code essentially sets up the following standard: Titles are given a score based on a combination of region and language priorities provided by the user. Regions are more important than languages. Titles should be prioritized and filtered by user-defined regions. Languages are added as a prioritized bonus score to a title's region score. They should not be used as a filter. Unfortunately, this creates a few problems.","title":"The problems with ROM manager 1G1R and parent/clone DAT files"},{"location":"retool-1g1r/#the-language-filterpriority-problem","text":"The existing parent/clone algorithm creates uncomfortable situations like the following. For example, consider a DAT with the following three titles: <game name= \"Test Title (Canada) (Fr)\" > <description> Test Title (Canada) (Fr) </description> <release name= \"Test Title (Canada) (Fr)\" region= \"Canada\" language= \"Fr\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Canada) (Fr).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Japan)\" cloneof= \"Test Title (Canada) (Fr)\" > <description> Test Title (Japan) </description> <release name= \"Test Title (Japan)\" region= \"Japan\" language= \"Ja\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Japan).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Norway)\" cloneof= \"Test Title (Canada) (Fr)\" > <description> Test Title (Norway) </description> <release name= \"Test Title (Norway)\" region= \"Norway\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Norway).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> You want to filter the DAT in a 1G1R fashion, and you only speak English. You set your regions in an order that you hope should give you a balance between English titles and higher frame rates courtesy of NTSC: Canada Japan Norway As insurance, you set your languages in an order that prioritizes English: En Ja Fr A cursory look at the XML data shows that the Norwegian title is the only one that supports English, and is arguably what the user would want. What title gets chosen in CLRMAMEPro's 1G1R process? Test Title (Canada) (Fr) , because Canada is the highest priority region. What if you remove Fr from the language list? You still get Test Title (Canada) (Fr) , as languages are treated as a bonus score, not a filter.","title":"The language filter/priority problem"},{"location":"retool-1g1r/#the-version-problem","text":"The current DAT and ROM manager ecosystem doesn't have a concept of versioning. Say you have the following titles in a DAT file: <game name= \"Test Title (USA) (v1.2)\" > <description> Test Title (USA) (v1.2) </description> <release name= \"Test Title (USA) (v1.2)\" region= \"USA\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (USA) (v1.2).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (USA) (v1.1)\" cloneof= \"Test Title (USA) (v1.2)\" > <description> Test Title (USA) (v1.1) </description> <release name= \"Test Title (USA) (v1.1)\" region= \"USA\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (USA) (v1.1).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Europe) (v0.6)\" cloneof= \"Test Title (USA) (v1.2)\" > <description> Test Title (Europe) (v0.6) </description> <release name= \"Test Title (Europe) (v0.6)\" region= \"Europe\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Europe) (v0.6).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Europe) (v2.0)\" cloneof= \"Test Title (USA) (v1.2)\" > <description> Test Title (Europe) (v2.0) </description> <release name= \"Test Title (Europe) (v2.0)\" region= \"Europe\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Europe) (v2.0).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> <game name= \"Test Title (Europe) (v1.1)\" cloneof= \"Test Title (USA) (v1.2)\" > <description> Test Title (Europe) (v1.1) </description> <release name= \"Test Title (Europe) (v1.1)\" region= \"Europe\" language= \"En\" /> <rom crc= \"00000000\" md5= \"00000000000000000000000000000000\" name= \"Test Title (Europe) (v1.1).bin\" sha1= \"0000000000000000000000000000000000000000\" size= \"100000000\" /> </game> If you set USA as the top priority region in your ROM manager, you get whatever title is marked as the parent, in this case, Test Title (USA) (v1.2) . However, if you set Europe as the top priority region, since the parent is from the USA, you get something unexpected. In CLRMAMEPro, you get whatever is the first European title in the DAT file: in this case Test Title (Europe) (v0.6) . In RomCenter, you get whatever is the last: in this case Test Title (Europe) (v1.1) . In both cases, the wrong version of the title gets selected: it should be Test Title (Europe) (v2.0) .","title":"The version problem"},{"location":"retool-1g1r/#the-broader-priority-problem","text":"These issues expand beyond language issues and easily identifiable versions: how do you deal with versions vs revisions? Production vs preproduction? How about Hibaihin/Not for Resale titles? What about disc IDs used by the likes of PlayStation? Or OEM titles or release dates? What do you do when you have a production title in a lower priority region, but only an unlicensed, badly dumped, or preproduction version in a higher priority region? How do compilations play a part, or supersets like Game of the Year editions, or DVD rereleases of games that were originally on multiple CDs? There are numerous questions like these that crop up when trying to determine the best possible 1G1R title to select, which is complicated again by user defined and ordered regions and languages, and their own specific curation desires.","title":"The broader priority problem"},{"location":"retool-1g1r/#the-human-problem","text":"Parent/clone DAT files are generally administered by hand. There's no automatic logic that highlights that titles might be related as a human enters them into a database \u2014 they need to manually make that link themselves, and be aware that the clones of multiple different names might exist. On a single DAT with multiple contributors, where the focus can be \"DAT all the things\" over attention to detail, this lends itself to oversights and clones being missed.","title":"The human problem"},{"location":"retool-1g1r/#what-retool-does-differently","text":"Retool ignores the parent/clone data manually entered into DAT files, and analyzes title names to automatically group them together. It makes use of clone lists to not only close the gap where automatic detection doesn't work out, but to recategorize and prioritize titles accordingly. It doesn't use a scoring system based on region and language to determine which title to pick, but instead puts titles through a series of filters based on detailed criteria. It makes use of scraped data from Redump and No-Intro's websites to provide additional language details not present in title names. Finally, it can treat languages as both a filter and something that should have higher priority than regions, although you can absolutely prioritize regions if you desire. Want to know more? Find out how Retool works .","title":"What Retool does differently"},{"location":"system-config/","text":"System config example This file should be stored in config/systems , and named Sony - PlayStation (Redump).yaml . --- # This file contains the system settings for Sony - PlayStation (Redump). # # It might override settings in config/user-config.yaml specifically for that # DAT. # # ============================================== # CLONE LIST, METADATA FILE, AND OUTPUT LOCATION # ============================================== paths : - override : true - clone list : # clonelists\\your-clone-list.json - metadata file : # metadata/your-metadata-file.json - output : # C:\\path # # ============== # LANGUAGE ORDER # ============== # If the -l option is used, only include titles with the following languages. # Comment out languages you don't want. Order is important. language order : - override : true # - Afrikaans # - Albanian # - Arabic # - Bulgarian # - Catalan # - Cornish # - Croatian # - Czech # - Danish # - Dutch # - Estonian # - Finnish # - French # - Gaelic # - German # - Greek # - Hebrew # - Hindi # - Hungarian # - Icelandic # - Indonesian # - Italian # - Japanese # - Korean # - Latvian # - Lithuanian # - Macedonian # - Norwegian # - Polish # - Portuguese # - Punjabi # - Romanian # - Russian # - Serbian # - Slovak # - Slovenian # - Spanish # - Swedish # - Tamil # - Thai # - Turkish # - Ukranian - Chinese - English # ============ # REGION ORDER # ============ # Only include titles with the following regions. Comment out the regions you # don't want. Order is important. region order : - override : true - China - Hong Kong - Taiwan - Singapore - Asia - World - USA - Canada - UK - Australia - New Zealand - Ireland - Europe - Japan - Thailand - Spain - Mexico - Argentina - Latin America - Brazil - Portugal - France - Belgium - Netherlands - Germany - Austria - Italy - Switzerland - Korea - Russia - Ukraine - Estonia - Poland - Latvia - Lithuania - Denmark - Norway - Sweden - Scandinavia - Finland - Iceland - Hungary - Czech - Greece - Macedonia - India - South Africa - Israel - Slovakia - Turkey - Croatia - Slovenia - United Arab Emirates - Bulgaria - Romania - Albania - Serbia - Indonesia - Unknown # =========== # VIDEO ORDER # =========== # Priority for titles with a video tag in their name. Do not comment out any # lines. video order : - override : true - PAL - PAL 60Hz - MPAL - NTSC - SECAM # ============================ # LIST NAMES PREFIX AND SUFFIX # ============================ # If the --listnames option is used, you can optionally add a prefix and # suffix to each title. # # If you start a prefix with http://, https://, or ftp://, each line in the # list will be URL encoded. # # The text must be inside double quotes. You must escape other double quotes # and backslashes inside the quotes like so: \\\", \\\\ list prefix : - \"http://www.example.com/\" list suffix : - \".zip\" # ======================================= # GLOBAL EXCLUDE AND INCLUDE USER FILTERS # ======================================= # Exclude or include specific titles by adding your own text strings to match # against. Items in the list are case sensitive. See the documentation for more # information, and pay particular attention to how system user filters interact # with global user filters. # # The formatting is as follows: # # * Plain text indicates a partial string match. # * A prefix of / indicates a regular expression match. # * A prefix of | indicates a full string match. # * Additionally, wrap a string in <> to also remove any match's related clones. # # The text must be inside double quotes. You must escape double quotes and # backslashes like so: \\\", \\\\ # # Comment out lines you don't want. exclude : # - \"[b]\" # - \"/.*?\\(Virtual*\" include : # - \"|My favorite title (Japan)\" # ====================== # EXCLUSIONS AND OPTIONS # ====================== # You should use the GUI to generate these options, even if you # intend to use the CLI. Add a DAT, go the the System settings # tab, and then change the exclusions and options to populate # this section. exclusions and options : - override exclusions : true - override options : true - d - e - listnames - log - nodtd - nofilters - r - regionsplit - removesdat - singlecpu - trace : \"Metal Gear Solid\" - warningpause - warnings - y - z - exclude : AaBbcdDekmMopPruv","title":"System config example"},{"location":"system-config/#system-config-example","text":"This file should be stored in config/systems , and named Sony - PlayStation (Redump).yaml . --- # This file contains the system settings for Sony - PlayStation (Redump). # # It might override settings in config/user-config.yaml specifically for that # DAT. # # ============================================== # CLONE LIST, METADATA FILE, AND OUTPUT LOCATION # ============================================== paths : - override : true - clone list : # clonelists\\your-clone-list.json - metadata file : # metadata/your-metadata-file.json - output : # C:\\path # # ============== # LANGUAGE ORDER # ============== # If the -l option is used, only include titles with the following languages. # Comment out languages you don't want. Order is important. language order : - override : true # - Afrikaans # - Albanian # - Arabic # - Bulgarian # - Catalan # - Cornish # - Croatian # - Czech # - Danish # - Dutch # - Estonian # - Finnish # - French # - Gaelic # - German # - Greek # - Hebrew # - Hindi # - Hungarian # - Icelandic # - Indonesian # - Italian # - Japanese # - Korean # - Latvian # - Lithuanian # - Macedonian # - Norwegian # - Polish # - Portuguese # - Punjabi # - Romanian # - Russian # - Serbian # - Slovak # - Slovenian # - Spanish # - Swedish # - Tamil # - Thai # - Turkish # - Ukranian - Chinese - English # ============ # REGION ORDER # ============ # Only include titles with the following regions. Comment out the regions you # don't want. Order is important. region order : - override : true - China - Hong Kong - Taiwan - Singapore - Asia - World - USA - Canada - UK - Australia - New Zealand - Ireland - Europe - Japan - Thailand - Spain - Mexico - Argentina - Latin America - Brazil - Portugal - France - Belgium - Netherlands - Germany - Austria - Italy - Switzerland - Korea - Russia - Ukraine - Estonia - Poland - Latvia - Lithuania - Denmark - Norway - Sweden - Scandinavia - Finland - Iceland - Hungary - Czech - Greece - Macedonia - India - South Africa - Israel - Slovakia - Turkey - Croatia - Slovenia - United Arab Emirates - Bulgaria - Romania - Albania - Serbia - Indonesia - Unknown # =========== # VIDEO ORDER # =========== # Priority for titles with a video tag in their name. Do not comment out any # lines. video order : - override : true - PAL - PAL 60Hz - MPAL - NTSC - SECAM # ============================ # LIST NAMES PREFIX AND SUFFIX # ============================ # If the --listnames option is used, you can optionally add a prefix and # suffix to each title. # # If you start a prefix with http://, https://, or ftp://, each line in the # list will be URL encoded. # # The text must be inside double quotes. You must escape other double quotes # and backslashes inside the quotes like so: \\\", \\\\ list prefix : - \"http://www.example.com/\" list suffix : - \".zip\" # ======================================= # GLOBAL EXCLUDE AND INCLUDE USER FILTERS # ======================================= # Exclude or include specific titles by adding your own text strings to match # against. Items in the list are case sensitive. See the documentation for more # information, and pay particular attention to how system user filters interact # with global user filters. # # The formatting is as follows: # # * Plain text indicates a partial string match. # * A prefix of / indicates a regular expression match. # * A prefix of | indicates a full string match. # * Additionally, wrap a string in <> to also remove any match's related clones. # # The text must be inside double quotes. You must escape double quotes and # backslashes like so: \\\", \\\\ # # Comment out lines you don't want. exclude : # - \"[b]\" # - \"/.*?\\(Virtual*\" include : # - \"|My favorite title (Japan)\" # ====================== # EXCLUSIONS AND OPTIONS # ====================== # You should use the GUI to generate these options, even if you # intend to use the CLI. Add a DAT, go the the System settings # tab, and then change the exclusions and options to populate # this section. exclusions and options : - override exclusions : true - override options : true - d - e - listnames - log - nodtd - nofilters - r - regionsplit - removesdat - singlecpu - trace : \"Metal Gear Solid\" - warningpause - warnings - y - z - exclude : AaBbcdDekmMopPruv","title":"System config example"},{"location":"terminology/","text":"Terminology Retool inherits a lot of terminology already established by ROM managers, and adds its own. This page contains the definitions for many of the terms used in Retool and its documentation. When you see a dotted link , it means the link points to another definition on this page. 1G1R \"One game, one ROM.\" Putting aside the fact that not everything is a ROM, 1G1R is an ideal that states that for the many, many different versions of a single title that are available around the world, you should only really possess one. It then becomes a question of which one... which is what Retool is designed to help with. Clone lists Clone lists are JSON files that manually define relationships between titles that Retool ordinarily wouldn't automatically pick up. They're useful both for matching titles of completely different names, and for overriding some of the default choices that Retool makes. Clone lists are stored in the clonelists subfolder, organized by system name. Retool selects the correct clone list by checking the <name> tag in the header of the input DAT file, and then looking for a matching filename in the clonelists folder. If a file isn't found, then only Retool's automatic clone detection is used. Learn more about clone lists Compilations A title that in itself contains multiple titles. They might be from the same series of games, a single publisher, or completely unrelated. DATs/DAT files So called because they're files that usually have the extension .dat . They contain a catalog of titles , usually focused on a single system like the Atari 2600 or Sega Master System. A DAT often contains attributes for each of its titles, including file names, hashes, and sizes. Used in combination with a ROM manager , the information in a DAT can be used to audit files on your hard drive to ensure that they are named correctly, and that they match the attributes recorded in the DAT file. DAT files usually follow one of two standards: either a variant on the XML-based LogiqX format, or the less commonly used CLRMAMEPro format. There are many more less common formats. Retool supports DAT files released by two groups : No-Intro and Redump. Implied languages An implied language is the dominant language for a region. For the USA, it's English, Brazil has an implied language of Portuguese, and so on. Implied languages are used when a title doesn't have languages listed explicitly in its name, or in an associated metadata file . They're also used when a user doesn't set an explicit language priority \u2014 when this happens, Retool builds an implied language priority based on the user's region choices. Implied languages help Retool to determine the intent of a user when it comes to selecting a 1G1R title. For example, if a user has set the following region order: USA Canada And Retool is considering the following titles: This is a title (USA) (Es) This is a title (Canada) If the user doesn't explicitly set any language priorities, Retool implies from the choice of USA as the top region that the user's preferred language in this situation is English, and the USA title in this example only supports Spanish. It also knows that English is the dominant anguage in Canada, and so even though that title has no explicit language tags, there's a good chance it's in English. In this scenario, even though USA is ranked higher than Canada, the Canadian title is chosen as it has a higher chance of being in English. Some regions don't have an implied language. For example, a title from Asia could be in Chinese, Japanese, English, or otherwise, but because you can't tell without explicit data, an implied language isn't assigned. Metadata files Metadata files are JSON files that hold extra information about titles not included in their DAT files. At this point in time, this means extra language data scraped from No-Intro and Redump's databases. Metadata files are stored in the metadata subfolder, organized by system name. Retool selects the correct metadata file by checking the <name> tag in the header of the input DAT file, and then looking for a matching filename in the metadata folder. If a file isn't found, then only the languages specified in the title's full name are used, or the languages inferred from the region of the title. Parents and clones DAT files can mark titles as being a \"clone\" of a \"parent\" title \u2014 effectively setting up a relationship between two or more titles. Some DAT files are even marked as specifically containing parent/clone relationships, and these relationships are used to produce the poor standard of 1G1R experienced in most other tools . The concept comes from MAME , and enables one of the ways in which it organizes its ROMs. In a split set , the parent ROM contains the base or common files for a game, and is often the latest version of a game. It is in itself a complete version of a game. Clone ROMs, on the other hand, only contain files that are different from the parent. If you load a clone game in MAME, it's smart enough to load the required base files from the parent, and then any of the modified files it needs from the clone to create a full title. This existing parent/clone infrastructure in DAT files was taken advantage of by No-Intro as a way to introduce 1G1R into its sets. The parent and clone designation starts to lose meaning here, as all ROMs, discs, or otherwise are complete titles in No-Intro, not a series of files. In this scenario it doesn't matter which title is designated as a parent or clone in the DAT \u2014 it's just a way to indicate a relationship so ROM managers can select a 1G1R title based on a user's region and language preferences. In the case of Retool, when using this terminology every title that's related to each other is considered a clone. The selected 1G1R title is called exactly that \u2014 the 1G1R title. ROM managers ROM managers read DAT files , and organize files on your hard drive according to the data found inside those DAT files. They are primarily used to verify that you have a known good dumps of ROMs or disc images according to certain datting groups like No-Intro , Redump , and TOSEC , and authors of emulators like MAME . The most popular ROM managers are CLRMamePro and RomVault . If you've never used a ROM manager before, the learning curve can be quite steep. Supersets Supersets are versions of titles that contain more content, or for some reason are superior to another version. This might include, for example, a Game of the Year edition, an all-in-one pack that bundles a game and all its DLC, or a DVD version of a title previously released on multiple CDs. Occasionally a superset might be a title with a minor advantage compared to the others in its group: for example, the Japanese version of Sonic the Hedgehog is in English, but compared to the USA version has additional parallax effects. Fahrenheit , the European version of Indigo Prophecy has uncensored content. These are still considered supersets. Caution Censorship or licensing changes aren't always a reason for designating something as a superset. Quite often such changes involve a simple sprite or palette swap that doesn't materially affect a game, and there's no guarantee there weren't other bug fixes included along the way. If you disagree with a choice Retool makes, you can always set your own user filters . Tags Tags indicate properties of a title, and are usually appended to a title's name in a DAT file. They are always surround by parentheses. For example, (USA) , (Disc 1) , (En,De) , (Special Edition) and so on. Titles Entire games or applications. A title has properties, like a name, the regions it was released in, the languages it supports, and more. In an XML-based DAT file, it's often represented by the <game> node.","title":"Terminology"},{"location":"terminology/#terminology","text":"Retool inherits a lot of terminology already established by ROM managers, and adds its own. This page contains the definitions for many of the terms used in Retool and its documentation. When you see a dotted link , it means the link points to another definition on this page.","title":"Terminology"},{"location":"terminology/#1g1r","text":"\"One game, one ROM.\" Putting aside the fact that not everything is a ROM, 1G1R is an ideal that states that for the many, many different versions of a single title that are available around the world, you should only really possess one. It then becomes a question of which one... which is what Retool is designed to help with.","title":"1G1R"},{"location":"terminology/#clone-lists","text":"Clone lists are JSON files that manually define relationships between titles that Retool ordinarily wouldn't automatically pick up. They're useful both for matching titles of completely different names, and for overriding some of the default choices that Retool makes. Clone lists are stored in the clonelists subfolder, organized by system name. Retool selects the correct clone list by checking the <name> tag in the header of the input DAT file, and then looking for a matching filename in the clonelists folder. If a file isn't found, then only Retool's automatic clone detection is used. Learn more about clone lists","title":"Clone lists"},{"location":"terminology/#compilations","text":"A title that in itself contains multiple titles. They might be from the same series of games, a single publisher, or completely unrelated.","title":"Compilations"},{"location":"terminology/#datsdat-files","text":"So called because they're files that usually have the extension .dat . They contain a catalog of titles , usually focused on a single system like the Atari 2600 or Sega Master System. A DAT often contains attributes for each of its titles, including file names, hashes, and sizes. Used in combination with a ROM manager , the information in a DAT can be used to audit files on your hard drive to ensure that they are named correctly, and that they match the attributes recorded in the DAT file. DAT files usually follow one of two standards: either a variant on the XML-based LogiqX format, or the less commonly used CLRMAMEPro format. There are many more less common formats. Retool supports DAT files released by two groups : No-Intro and Redump.","title":"DATs/DAT files"},{"location":"terminology/#implied-languages","text":"An implied language is the dominant language for a region. For the USA, it's English, Brazil has an implied language of Portuguese, and so on. Implied languages are used when a title doesn't have languages listed explicitly in its name, or in an associated metadata file . They're also used when a user doesn't set an explicit language priority \u2014 when this happens, Retool builds an implied language priority based on the user's region choices. Implied languages help Retool to determine the intent of a user when it comes to selecting a 1G1R title. For example, if a user has set the following region order: USA Canada And Retool is considering the following titles: This is a title (USA) (Es) This is a title (Canada) If the user doesn't explicitly set any language priorities, Retool implies from the choice of USA as the top region that the user's preferred language in this situation is English, and the USA title in this example only supports Spanish. It also knows that English is the dominant anguage in Canada, and so even though that title has no explicit language tags, there's a good chance it's in English. In this scenario, even though USA is ranked higher than Canada, the Canadian title is chosen as it has a higher chance of being in English. Some regions don't have an implied language. For example, a title from Asia could be in Chinese, Japanese, English, or otherwise, but because you can't tell without explicit data, an implied language isn't assigned.","title":"Implied languages"},{"location":"terminology/#metadata-files","text":"Metadata files are JSON files that hold extra information about titles not included in their DAT files. At this point in time, this means extra language data scraped from No-Intro and Redump's databases. Metadata files are stored in the metadata subfolder, organized by system name. Retool selects the correct metadata file by checking the <name> tag in the header of the input DAT file, and then looking for a matching filename in the metadata folder. If a file isn't found, then only the languages specified in the title's full name are used, or the languages inferred from the region of the title.","title":"Metadata files"},{"location":"terminology/#parents-and-clones","text":"DAT files can mark titles as being a \"clone\" of a \"parent\" title \u2014 effectively setting up a relationship between two or more titles. Some DAT files are even marked as specifically containing parent/clone relationships, and these relationships are used to produce the poor standard of 1G1R experienced in most other tools . The concept comes from MAME , and enables one of the ways in which it organizes its ROMs. In a split set , the parent ROM contains the base or common files for a game, and is often the latest version of a game. It is in itself a complete version of a game. Clone ROMs, on the other hand, only contain files that are different from the parent. If you load a clone game in MAME, it's smart enough to load the required base files from the parent, and then any of the modified files it needs from the clone to create a full title. This existing parent/clone infrastructure in DAT files was taken advantage of by No-Intro as a way to introduce 1G1R into its sets. The parent and clone designation starts to lose meaning here, as all ROMs, discs, or otherwise are complete titles in No-Intro, not a series of files. In this scenario it doesn't matter which title is designated as a parent or clone in the DAT \u2014 it's just a way to indicate a relationship so ROM managers can select a 1G1R title based on a user's region and language preferences. In the case of Retool, when using this terminology every title that's related to each other is considered a clone. The selected 1G1R title is called exactly that \u2014 the 1G1R title.","title":"Parents and clones"},{"location":"terminology/#rom-managers","text":"ROM managers read DAT files , and organize files on your hard drive according to the data found inside those DAT files. They are primarily used to verify that you have a known good dumps of ROMs or disc images according to certain datting groups like No-Intro , Redump , and TOSEC , and authors of emulators like MAME . The most popular ROM managers are CLRMamePro and RomVault . If you've never used a ROM manager before, the learning curve can be quite steep.","title":"ROM managers"},{"location":"terminology/#supersets","text":"Supersets are versions of titles that contain more content, or for some reason are superior to another version. This might include, for example, a Game of the Year edition, an all-in-one pack that bundles a game and all its DLC, or a DVD version of a title previously released on multiple CDs. Occasionally a superset might be a title with a minor advantage compared to the others in its group: for example, the Japanese version of Sonic the Hedgehog is in English, but compared to the USA version has additional parallax effects. Fahrenheit , the European version of Indigo Prophecy has uncensored content. These are still considered supersets. Caution Censorship or licensing changes aren't always a reason for designating something as a superset. Quite often such changes involve a simple sprite or palette swap that doesn't materially affect a game, and there's no guarantee there weren't other bug fixes included along the way. If you disagree with a choice Retool makes, you can always set your own user filters .","title":"Supersets"},{"location":"terminology/#tags","text":"Tags indicate properties of a title, and are usually appended to a title's name in a DAT file. They are always surround by parentheses. For example, (USA) , (Disc 1) , (En,De) , (Special Edition) and so on.","title":"Tags"},{"location":"terminology/#titles","text":"Entire games or applications. A title has properties, like a name, the regions it was released in, the languages it supports, and more. In an XML-based DAT file, it's often represented by the <game> node.","title":"Titles"},{"location":"user-config/","text":"user-config.yaml example This file should be stored in the config folder. --- # ============== # LANGUAGE ORDER # ============== # If the -l option is used, only include titles with the following languages. # Comment out languages you don't want. Order is important. language order : # - English # - Afrikaans # - Albanian # - Arabic # - Bulgarian # - Catalan # - Chinese # - Cornish # - Croatian # - Czech # - Danish # - Dutch # - Estonian # - Finnish # - French # - Gaelic # - German # - Greek # - Hebrew # - Hindi # - Hungarian # - Icelandic # - Indonesian # - Italian # - Japanese # - Korean # - Latvian # - Lithuanian # - Macedonian # - Norwegian # - Polish # - Portuguese # - Punjabi # - Romanian # - Russian # - Serbian # - Slovak # - Slovenian # - Spanish # - Swedish # - Tamil # - Thai # - Turkish # - Ukranian # ============ # REGION ORDER # ============ # Only include titles with the following regions. Comment out the regions you # don't want. Order is important. region order : - USA - World - Canada - UK - Australia - New Zealand - Singapore - Ireland - Europe - Japan - Asia - Thailand - Spain - Mexico - Argentina - Latin America - Brazil - Portugal - France - Belgium - Netherlands - Germany - Austria - Italy - Switzerland - Hong Kong - China - Taiwan - Korea - Russia - Ukraine - Estonia - Poland - Latvia - Lithuania - Denmark - Norway - Sweden - Scandinavia - Finland - Iceland - Hungary - Czech - Greece - Macedonia - India - South Africa - Israel - Slovakia - Turkey - Croatia - Slovenia - United Arab Emirates - Bulgaria - Romania - Albania - Serbia - Indonesia - Unknown # =========== # VIDEO ORDER # =========== # Priority for titles with a video tag in their name. Do not comment out any # lines. video order : - NTSC - PAL - PAL 60Hz - MPAL - SECAM # ============================ # LIST NAMES PREFIX AND SUFFIX # ============================ # If the --listnames option is used, you can optionally add a prefix and # suffix to each title. # # If you start a prefix with http://, https://, or ftp://, each line in the # list will be URL encoded. # # The text must be inside double quotes. You must escape other double quotes # and backslashes inside the quotes like so: \\\", \\\\ list prefix : # - \"This text will be at the start of each line\" list suffix : # - \"This text will be at the end of each line\" # ======================================= # GLOBAL EXCLUDE AND INCLUDE USER FILTERS # ======================================= # Exclude or include specific titles by adding your own text strings to match # against. Items in the list are case sensitive. See the documentation for more # information, and pay particular attention to how system user filters interact # with global user filters. # # The formatting is as follows: # # * Plain text indicates a partial string match. # * A prefix of / indicates a regular expression match. # * A prefix of | indicates a full string match. # * Additionally, wrap a string in <> to also remove any match's related clones. # # The text must be inside double quotes. You must escape double quotes and # backslashes like so: \\\", \\\\ # # Comment out lines you don't want. exclude : # - \"[b]\" # - \"/.*?\\(Virtual*\" include : # - \"|My favorite title (Japan)\" # ============ # GUI SETTINGS # ============ # GUI settings only, not used by the CLI. gui settings : - exclude : - output :","title":"user-config.yaml example"},{"location":"user-config/#user-configyaml-example","text":"This file should be stored in the config folder. --- # ============== # LANGUAGE ORDER # ============== # If the -l option is used, only include titles with the following languages. # Comment out languages you don't want. Order is important. language order : # - English # - Afrikaans # - Albanian # - Arabic # - Bulgarian # - Catalan # - Chinese # - Cornish # - Croatian # - Czech # - Danish # - Dutch # - Estonian # - Finnish # - French # - Gaelic # - German # - Greek # - Hebrew # - Hindi # - Hungarian # - Icelandic # - Indonesian # - Italian # - Japanese # - Korean # - Latvian # - Lithuanian # - Macedonian # - Norwegian # - Polish # - Portuguese # - Punjabi # - Romanian # - Russian # - Serbian # - Slovak # - Slovenian # - Spanish # - Swedish # - Tamil # - Thai # - Turkish # - Ukranian # ============ # REGION ORDER # ============ # Only include titles with the following regions. Comment out the regions you # don't want. Order is important. region order : - USA - World - Canada - UK - Australia - New Zealand - Singapore - Ireland - Europe - Japan - Asia - Thailand - Spain - Mexico - Argentina - Latin America - Brazil - Portugal - France - Belgium - Netherlands - Germany - Austria - Italy - Switzerland - Hong Kong - China - Taiwan - Korea - Russia - Ukraine - Estonia - Poland - Latvia - Lithuania - Denmark - Norway - Sweden - Scandinavia - Finland - Iceland - Hungary - Czech - Greece - Macedonia - India - South Africa - Israel - Slovakia - Turkey - Croatia - Slovenia - United Arab Emirates - Bulgaria - Romania - Albania - Serbia - Indonesia - Unknown # =========== # VIDEO ORDER # =========== # Priority for titles with a video tag in their name. Do not comment out any # lines. video order : - NTSC - PAL - PAL 60Hz - MPAL - SECAM # ============================ # LIST NAMES PREFIX AND SUFFIX # ============================ # If the --listnames option is used, you can optionally add a prefix and # suffix to each title. # # If you start a prefix with http://, https://, or ftp://, each line in the # list will be URL encoded. # # The text must be inside double quotes. You must escape other double quotes # and backslashes inside the quotes like so: \\\", \\\\ list prefix : # - \"This text will be at the start of each line\" list suffix : # - \"This text will be at the end of each line\" # ======================================= # GLOBAL EXCLUDE AND INCLUDE USER FILTERS # ======================================= # Exclude or include specific titles by adding your own text strings to match # against. Items in the list are case sensitive. See the documentation for more # information, and pay particular attention to how system user filters interact # with global user filters. # # The formatting is as follows: # # * Plain text indicates a partial string match. # * A prefix of / indicates a regular expression match. # * A prefix of | indicates a full string match. # * Additionally, wrap a string in <> to also remove any match's related clones. # # The text must be inside double quotes. You must escape double quotes and # backslashes like so: \\\", \\\\ # # Comment out lines you don't want. exclude : # - \"[b]\" # - \"/.*?\\(Virtual*\" include : # - \"|My favorite title (Japan)\" # ============ # GUI SETTINGS # ============ # GUI settings only, not used by the CLI. gui settings : - exclude : - output :","title":"user-config.yaml example"},{"location":"includes/file/","text":"retool-2.00.0-beta-1-win-x86-64.zip","title":"File"},{"location":"includes/sha256/","text":"1ea7f9476c80acd67586573d8b98859d81116fe0c622a7f9b241fe6554ebd94d","title":"Sha256"}]}