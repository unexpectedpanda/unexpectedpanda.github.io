{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#retool","title":"Retool","text":"<p>Retool is a filter utility for Redump and No-Intro DAT files. By customizing the DAT files before you load them into a ROM manager, you can more effectively trim, consolidate, and deduplicate your ROM sets.</p> <p>Retool offers the following features:</p> <ul> <li> <p>Superior One Game, One ROM (1G1R) functionality compared to other tools.</p> </li> <li> <p>Priority-based region and language filtering.</p> </li> <li> <p>Exclusions of unwanted title types like demos, applications, and more.</p> </li> <li> <p>Regular expression filters for including or excluding titles.</p> </li> <li> <p>CLI and GUI versions.</p> </li> </ul> <p>You feed Retool an input DAT file, and it creates a new DAT from it with all your preferences, leaving the original intact. You can then load the new DAT in a ROM manager like CLRMamePro, RomVault, or Romcenter to do your file management \u2014 you just don't need to use their 1G1R modes, as Retool has already done the work for you.</p> <p>Download Retool</p> <p></p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#2014","title":"2.01.4","text":"<ul> <li>Actually fixed the bug where the system language list fell back to the global language   list when empty.</li> </ul>"},{"location":"changelog/#2013","title":"2.01.3","text":"<ul> <li>You can now press the <code>Del</code> key on your keyboard in the DAT, region, and language lists   to remove the selected entry.</li> <li>The title tool now decodes HTML entities like <code>&amp;amp;</code> in title names.</li> <li>The Fujitsu version code regex was modified to take into account a new variation.</li> </ul>"},{"location":"changelog/#2012","title":"2.01.2","text":"<ul> <li>Fixed a bug where an empty system language list fell back to a global language list   instead of using all languages.</li> <li>Fixed a bug that crashed Retool when a trace string was entered in the global settings,   the Options tab was set to override in the system settings, and no system-level   trace string was entered.</li> <li>Added a PlayStation Vita disc ID regex to automate one stage of choosing between Vita   titles.</li> <li>Added a few more demo regexes to identify different demo types.</li> <li>When Redump or No-Intro forgot to add the <code>(Demo)</code> tag to a title's full name but added   a category of <code>Demos</code>, Retool would append <code>(Demo)</code> to the full, short, tag-free, and   region-free names to avoid confusion with the full version of the title.</li> </ul> <p>This lead to strange situations in clone lists where a title like   <code>Example Title (USA) (Trial)</code> had a short name of <code>Example Title (Trial) (Demo)</code>. This   behavior also wasn't taken into account for Retool GUI's title tools, making clone list   updating harder than it needed to be for contributors.</p> <p>Now a <code>(Demo)</code> tag is only added if a title doesn't contain any of a collection of   demo regexes, making short names more predictable to deal with. - The title tool now has a checkbox for when a title has a DAT category of <code>Demos</code>, which   can affect how a title's names are generated.</p>"},{"location":"changelog/#2011","title":"2.01.1","text":"<p>Looks like post filters needed a little more testing before release. The feature now works properly.</p> <ul> <li> <p>Post filters now work if you don't have a system settings file for the DAT you're   processing.</p> </li> <li> <p>Post filters now remove superset titles that exist across multiple groups.</p> </li> <li> <p>Post filters now remove titles that are related to compilations. Previously, even if a   such a title was meant to be filtered out, it could randomly turn up in the output DAT   due to the way compilations work.</p> </li> </ul>"},{"location":"changelog/#2010","title":"2.01.0","text":"<ul> <li> <p>The Games title type is now an option for exclusion. Retool assume titles without   categories assigned in the input DAT are games. For those who click Select all in   the Exclusions tab, make sure to deselect Games if you want to keep them.</p> </li> <li> <p>User filters have been renamed to overrides, since that's what they actually do.</p> </li> <li> <p>Added post filters. After Retool has finished its processing, any title matches it finds   in the post filter list are kept, and everything else is discarded. This is for those   who only keep a short list of titles, but want to make sure they're getting the latest   versions via Retool's processing first.</p> </li> <li> <p>You can now use the original input DAT header in the output DAT. This is useful if you   already have original Redump and No-Intro DATs in CLRMAMEPro, and want to treat the   Retool DAT as an update.</p> </li> <li> <p>Made several small tweaks to improve results for those who rank Europe higher than USA   in their region order. This mainly results in European titles with languages reflecting   user preferences being chosen over <code>(USA, Europe)</code> titles that don't specify languages.</p> </li> <li> <p>During compilation comparisons, the World, Europe, and Japan regions are   considered equivalent. This was already the case for USA and World. This means that   individual World titles can be chosen in place of USA, Europe, or Japan   compilations (and vice versa).</p> </li> <li> <p>Exclusions are now much faster.</p> </li> <li> <p>Fixed a bug on exclusions that caused Retool to crash.</p> </li> <li> <p>Fixed a bug where Retool included more titles than it should when considering   multi-region titles For example, Bonanza Bros. (USA, Europe, Korea) (En) (Rev B) and   Bonanza Bros. (Japan, Europe) (En) (Rev A) were both being kept in the Genesis DAT.   Now Retool correctly chooses only one.</p> </li> <li> <p>Fixed a bug introduced in 2.00.4 where superset titles with more languages would be   selected over higher region priority titles.</p> </li> <li> <p>Fixed a bug where setting a legacy export in the system options didn't work.</p> </li> <li> <p>Fixed a bug where some compilation titles weren't set to clones.</p> </li> <li> <p>Made some tweaks to the GUI so the interface is more solid on Windows for 4k, 150%   scaled screens.</p> </li> <li> <p>An internal automated test framework is now used when making changes to Retool. It   checks the output of multiple different configurations, verifies the output is   consistent, and makes it easier to pick up errors as a result of code changes.</p> </li> </ul>"},{"location":"changelog/#2005","title":"2.00.5","text":"<ul> <li>Fixed handling of No-Intro's quasi-RFC 3339 date format.</li> </ul>"},{"location":"changelog/#2004","title":"2.00.4","text":"<ul> <li> <p>Added another level of language selection fallback if you have a language order     specified. If Retool finds none of the languages it's looking for in your language     order when it compares titles, its next step is to check the language order derived from     your region order.</p> <p>This is most beneficial for European titles when you're filtering by a language, and want to preference but not filter by other languages. You might want to do this when you want a title that was released in a specific country, but due to No-Intro and Redump naming rules gets assigned to the Europe region.</p> <p>For example, if a DAT file has the following titles:</p> <ul> <li>Example Title (Europe) (En,Fr,De,It)</li> <li>Example Title (Europe) (En,Es,Pt)</li> </ul> <p>And you have the following region order:</p> <ol> <li>Europe</li> <li>Spain</li> <li>Portugal</li> <li>France</li> </ol> <p>And you filter by English and no other language, Retool used to choose Example Title (Europe) (En,Fr,De,It), as it contains English (the only language you specified in your language priority) and has the most languages.</p> <p>But given your region order, you've expressed a clear preference for Spanish and Portuguese above French.</p> <p>Now because of the new region order language fallback, the language order effectively becomes:</p> <ol> <li>English (explicitly in the language filter, and also the implied language for Europe)</li> <li>Spanish</li> <li>Portuguese</li> <li>French</li> </ol> <p>You still only get titles that support English because of the filter, however this means that Retool now selects Example Title (Europe) (En,Es,Pt) instead of Example Title (Europe) (En,Fr,De,It).</p> </li> <li> <p>Added granularity back to the kept/removed list. Instead of filing every user exclusion   under \"category removes\", Retool now categorizes under individual exclusions like   \"application\", \"audio\", \"bad dump\" and so on.</p> </li> <li> <p>Made heading underlines in the kept/removed list variable depending on heading length.</p> </li> <li> <p>Fixed an index heading in the kept/removed list that incorrectly had \"system excludes\"   instead of \"global excludes\".</p> </li> <li> <p>Made some minor GUI tweaks for consistency.</p> </li> </ul>"},{"location":"changelog/#2003","title":"2.00.3","text":"<ul> <li>Due to the influx of pirate ROMs in the No-Intro NES DAT, pirate ROMs are now treated   like bad dumps. That is, they are demoted below licensed variations of games, even if   the pirate ROM is in a preferred language and the licensed version isn't.</li> </ul>"},{"location":"changelog/#2002","title":"2.00.2","text":"<ul> <li>Expanded support for some newer No-Intro DATs.</li> </ul>"},{"location":"changelog/#2001","title":"2.00.1","text":"<ul> <li>Expanded the demo regex to incorporate a set of Genesis demos.</li> </ul>"},{"location":"changelog/#2000","title":"2.00.0","text":"<ul> <li>Fixed grouping of titles with oddly-named video standards in the filename.</li> </ul>"},{"location":"changelog/#2000-beta-9","title":"2.00.0 Beta 9","text":"<ul> <li>Fixed conditional override priorities not working.</li> </ul>"},{"location":"changelog/#2000-beta-8","title":"2.00.0 Beta 8","text":"<ul> <li>You can now drag and drop DAT files into the file list.</li> <li>Retool now understands preproduction compilations when comparing against individual   titles.</li> <li> <p>When considering compilations, individual titles are now preferred over compilations     except in the following scenarios:</p> <ul> <li>The compilation has a higher priority primary region than the individual title (during   compilation comparisons, the World and USA regions are considered equivalent).</li> <li>The compilation has a higher priority primary language than the individual title.</li> <li>The individual title is set as lower priority than the compilation in the related   clone list.</li> </ul> <p>Compilations are otherwise only included if they feature unique titles. This increases duplicates in the output DAT, but is much better for patches, retro achievements, and actually knowing which individual titles you have.</p> </li> <li> <p>Compilation selection has been dramatically sped up.</p> </li> <li>If you overrode global settings for system languages but didn't specify any languages,   Retool used to fall back to the global language order and disable the system languages   override. This isn't what the label says: \"an empty filter list includes all languages\".   This behavior has been changed to match the label \u2014 when you override system   languages and leave an empty filter list, it first uses the implied language order from   the system regions, and if they're not available, the implied language order from the   global regions. In both cases, this is makes sure all languages are included.</li> <li>The Python version check is now done earlier, and explains to the user the minimum   version required.</li> <li>The CLI progress bar no longer shows if multiprocessing is disabled, to make debugging   with print and input statements easier.</li> <li>Fixed a bug where compilations specified in a clone list broke user filter includes.</li> <li>Fixed a bug where clone list priorities could be misassigned.</li> <li>Fixed a bug where user-supplied regexes weren't validated for some patterns.</li> <li>Fixed a bug where regex escapes for a title trace that were set in the GUI weren't   interpreted properly.</li> <li>Polished up some rough areas of code, made some minor GUI tweaks.</li> </ul>"},{"location":"changelog/#2000-beta-7","title":"2.00.0 Beta 7","text":"<ul> <li>System languages are now filtering correctly again.</li> </ul>"},{"location":"changelog/#2000-beta-6","title":"2.00.0 Beta 6","text":"<ul> <li>Fixed a compilation bug introduced with the last version that added extra titles to the   output DAT.</li> <li>Another fix for the parent/clone warning message.</li> </ul>"},{"location":"changelog/#2000-beta-5","title":"2.00.0 Beta 5","text":"<ul> <li>The GUI is now resizable.</li> <li>GUI optimizations have been made. It's unlikely you'll notice a difference using it,   but it's easier to maintain now.</li> <li>Europe has been moved further up the default English region order, as Retool's new   language prioritization bypasses any particular issues there.</li> <li>Added an extra filter stage for compilations, checking for which title has more of the   user's languages.</li> <li>Fixed titles with multiple regions not being categorized into the correct primary   region. For example, <code>(Europe, Australia)</code> titles were being filtered into the   <code>Australia</code> region instead of <code>Europe</code>, which caused some duplicates to sneak through   to the final output DAT.</li> <li>The <code>Export</code> region for Redump titles is now   treated as equivalent to <code>World</code>.</li> <li>Fixed a problem where a new system config would populate selected languages from the   global config.</li> <li>Fixed the log not outputting in the correct folder when a system output was selected.</li> <li>Fixed the parent/clone clash warning message so it displayed the correct clone title.</li> </ul>"},{"location":"changelog/#2000-beta-4","title":"2.00.0 Beta 4","text":"<ul> <li>Pirate and unlicensed exclusions work again. Pirate titles have been added to   the unlicensed exclude option.</li> <li>The GUI documentation link now goes to the right place.</li> </ul>"},{"location":"changelog/#2000-beta-3","title":"2.00.0 Beta 3","text":"<ul> <li>Fixed user filter excludes not removing some excludes.</li> <li>Fixed system name formatting in the GUI, so the right system settings file is   referenced.</li> <li>Unified CLI and GUI versions, as splitting them was no longer useful.</li> </ul>"},{"location":"changelog/#2000-beta-2","title":"2.00.0 Beta 2","text":"<p>A minor update to fix system user filters for No-Intro's Redump Custom DATs.</p>"},{"location":"changelog/#2000-beta-1","title":"2.00.0 Beta 1","text":"<p>Retool 2.0 is here in beta form. Ten months in the making, it'll be in beta for a few more months to get feedback and fix bugs found by users. Retool 1.x is still available from the v1 branch, although it won't receive clone list updates from this point, and issues will only be fixed for v2.</p> <p>Retool 2.0 is a hefty rewrite with a focus on static typing, better code practices, maintainability, and making things go faster.</p> <p>Check out how much things have improved over time, despite a huge increase in Retool's capability (measurements taken on a Core i7-8700K, Python 3.10):</p> <p>Redump: Sony PlayStation (10628) (2021-12-29 02-47-27)</p> Retool version DAT process time Speed vs previous 0.53 3m, 44s N/A 0.62 28.23s 7.93x 1.17 27.15s 1.04x 2.00.0 7.76s 3.50x <p>Improvement 0.53 &gt; 2.00.0: 29x speed increase</p> <p>Redump: IBM - PC Compatible (28316) (2021-07-23 22-27-03)</p> Retool version DAT process time Speed vs previous 0.53 20m, 56s N/A 0.62 2m, 4s 10.13x 1.17 1m, 27s 1.43x 2.00.0 14.88s 5.85x <p>Improvement 0.53 &gt; 2.00.0: 84x speed increase</p> <p>No-Intro: Sony - PlayStation 3 (PSN) (Updates) (20211224-182932)</p> Retool version DAT process time Speed vs previous 0.53 (Unsupported) N/A 0.62 (Unsupported) N/A 1.17 5m, 45s N/A 2.00.0 21.72s 15.88x <p>Additionally, large and complex DATs like Nintendo 3DS (Digital) (CDN) now actually finish processing in a reasonable time. A Retool user timed that DAT to take 72,776 seconds on an Intel Core i7 8700K, which equates to 20 hours, 13 minutes. Retool v2 finishes it on the same processor in 245 seconds, which is 297x faster.</p> <p>There's no doubt code in there that would still make more experienced developers shudder, but it's nice to see things get better \ud83d\ude01</p> <p>It's not all benefits though \u2014 Retool's increase in complexity means that some DATs that were previously ultra-fast in v1 are slower to complete in v2:</p> <p>No-Intro: Atari - Lynx - (20220513-205052)</p> Retool version DAT process time Speed vs previous 0.53 (Unsupported) N/A 0.62 (Unsupported) N/A 1.17 0.39s N/A 2.00.0 1.83s 0.21x <p>The total time spent is still quite brief, and is worth the price of admission for the very slow DATs to be faster and the increase in accuracy.</p> <p>Check out the following list for other changes that have come in v2.</p> Accuracy <ul> <li> <p>Language order is now taken into account. If you don't filter by languages,     the language order will be inferred from your region order. This mostly     impacts European titles, where compared to previous versions of Retool another     title might be selected to better reflect your language choices. For example,     take these titles in Redump's PlayStation DAT:</p> <ul> <li>Hugo (Europe)</li> <li>Hugo (Europe) (Nl,Pt) (Rev 1)</li> <li>Hugo (Europe) (Nl,Pt)</li> <li>Hugo (France)</li> <li>Hugo (Germany)</li> <li>Hugo (Italy)</li> <li>Hugo (Scandinavia) (Da,Fi)</li> <li>Hugo (Scandinavia) (Sv,No)</li> <li>Hugo (Spain)</li> </ul> <p>If you have USA as your top region, followed by Europe, Retool 1.x selects Hugo (Europe) (Nl,Pt) (Rev 1) as the 1G1R title, because it's the highest revision in Europe. Retool 2.0 realizes that because USA is your highest region, that it's looking for English titles as a priority, and selects Hugo (Europe) instead.</p> <p>This also applies to say, Japanese titles that are only in English, and a special edition is available in English in another region. For example, take these titles, again in Redump's PlayStation DAT:</p> <ul> <li>Car and Driver Presents - Grand Tour Racing '98 (USA)</li> <li>Gekisou!! Grand Racing - Total Drivin' (Japan)</li> <li>M6 Turbo Racing (France)</li> <li>Total Drivin (Europe) (En,Fr,De,Es,It,Pt)</li> </ul> <p>If you have Japan as your top region, Retool 1.x selects Gekisou!! Grand Racing - Total Drivin' (Japan) as the top title. Retool 2.0 recognizes that the Japanese title is only in English, sees that the USA title is a special edition, and selects Car and Driver Presents - Grand Tour Racing '98 (USA) instead. You may as well get more content if the title's going to be in the same language anyway.</p> <p>If you don't like this style of selection, you can turn on strict region filtering with <code>-r</code>.</p> </li> <li> <p>Compilations are now automatically handled by adding them to a system's     clone list with the correct syntax. Retool figures out the most optimal     combination of titles, taking your language and region preferences into     account. Sometimes it might look like Retool hasn't chosen the optimal     combination, but this is usually due to user region preferences and titles     being available in both the Europe region and specific European countries.     For example, take the following titles, and assume Italy is higher than Europe     in the user's region order:</p> <ul> <li>2 Games in 1 - Disney Principesse + Il Re Leone (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</li> <li>2 Games in 1 - Disney Principesse + Koda, Fratello Orso (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</li> <li>Brother Bear (Europe) (Fr,De,Es,It,Nl,Sv,Da)</li> </ul> <p>For those who don't speak Italian, Fratello Orso is the Italian version of Brother Bear. Therefore, the most optimal solution for disk space and minimal redundancy is:</p> <ul> <li>2 Games in 1 - Disney Principesse + Il Re Leone (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</li> <li>Brother Bear (Europe) (Fr,De,Es,It,Nl,Sv,Da)</li> </ul> <p>This works, as both titles support Italian. However, because Italy is prioritized as a region, Retool selects the Italian release of Brother Bear instead, meaning you end up with:</p> <ul> <li>2 Games in 1 - Disney Principesse + Il Re Leone (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</li> <li>2 Games in 1 - Disney Principesse + Koda, Fratello Orso (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</li> </ul> <p>Although you get two versions of Disney Princess, this choice is by design. The assumption is that the region-specific version of the game should enable that region's language by default, instead of requiring a language switch after boot up.</p> </li> <li> <p>Priority level 0 is now gone, replaced by a <code>supersets</code> array. It functions in     almost the same way, preferring language over region, except that order in the     clone lists doesn't determine superset priority any more. For example, here's     how things used to look for Persona 3 in Redump's PlayStation 2 DAT:</p> <pre><code>\"Shin Megami Tensei - Persona 3\": [\n[\"Shin Megami Tensei - Persona 3 FES\", 0],\n[\"Persona 3 FES\", 0],\n[\"Yeosin Jeonsaeng Persona 3 FES\", 0],\n[\"P3 - Persona 3\", 1],\n[\"Persona 3\", 1]\n]\n</code></pre> <p>Retool used to assume the top 0 priority title had higher priority than the 0 priority title after it, and so on. Unfortunately in this scenario, we have two titles that should be the same rank: Shin Megami Tensei - Persona 3 FES, the USA version, and Persona 3 FES, the European version. In Retool v1, if someone put Europe above USA in their region order and specified English as their highest language, they would get the USA title instead of the European title that they wanted, as internally the first 0 priority title was ranked above the second.</p> <p>With the introduction of the <code>supersets</code> array, things change a little:</p> <pre><code>{\n\"group\": \"Shin Megami Tensei - Persona 3\",\n\"titles\": [\n{\"searchTerm\": \"P3 - Persona 3\"},\n{\"searchTerm\": \"Persona 3\"},\n{\"searchTerm\": \"Shin Megami Tensei - Persona 3\"}\n],\n\"supersets\": [\n{\"searchTerm\": \"Shin Megami Tensei - Persona 3 FES\"},\n{\"searchTerm\": \"Persona 3 FES\"}\n]\n}\n</code></pre> <p>Retool v2 now chooses the correct superset for the selected region, You can still specify a <code>priority</code> on supersets, just in case there are multiple supersets of varying amounts of content. That priority is only respected between supersets, and isn't related to the priority set on a <code>title</code>.</p> </li> <li> <p>You can now use regex in the <code>categories</code>, <code>overrides</code> and <code>variants</code> objects   in clone lists. Just set the <code>nameType</code> value to <code>regex</code>. The <code>removes</code> object   does not support regex.</p> </li> <li>Overrides now support a <code>priority</code> key within a <code>regionOrder</code> condition. This   means a title's clone list priority can be set from within a condition if that   condition is true, not just its group and short name.</li> <li> <p>You can now define clones in the <code>variants</code> object not just by short name, but     full name, region-free name, tag-free name, or regex on the full name. While     mostly you should stick to short names, this extra flexibilty can solve some     complex problems. For example     Silent Hill 2 (USA) (En,Ja,Fr,De,Es,It) (v2.01) is the USA version of     Silent Hill 2 - Director's Cut. Unfortunately, due to its title the short     name for     Silent Hill 2 (USA) (En,Ja,Fr,De,Es,It) (v2.01) is just Silent Hill 2     \u2014 exactly the same as the standard version of the game. Historically     with Retool this would mean we couldn't set unique priorities for both titles,     and would have to figure out an esoteric workaround. Now, however, there's     another way:</p> <pre><code>{\n\"group\": \"Silent Hill 2\",\n\"titles\": [\n{\"searchTerm\": \"Silent Hill 2 (?:(?!USA.*v2.01).)*$\", \"nameType\": \"regex\"},\n],\n\"supersets\": [\n{\"searchTerm\": \"Silent Hill 2 (USA) (En,Ja,Fr,De,Es,It) (v2.01)\", \"nameType\": \"full\"},\n{\"searchTerm\": \"Silent Hill 2 - Director's Cut\"},\n{\"searchTerm\": \"Silent Hill 2 - Saigo no Uta\"}\n]\n}\n</code></pre> <p>The first entry effectively says \"Match every Silent Hill title except the one with USA and v2.01 in it\". We then specifically call out the v2.01 title as a superset afterward. Mind you, this is overkill. The following example works just fine:</p> <pre><code>{\n\"group\": \"Silent Hill 2\",\n\"titles\": [\n{\"searchTerm\": \"Silent Hill 2\"},\n],\n\"supersets\": [\n{\"searchTerm\": \"Silent Hill 2 (USA) (En,Ja,Fr,De,Es,It) (v2.01)\", \"nameType\": \"full\"},\n{\"searchTerm\": \"Silent Hill 2 - Director's Cut\"},\n{\"searchTerm\": \"Silent Hill 2 - Saigo no Uta\"}\n]\n}\n</code></pre> <p>There's also the situation where the Japanese version of Sonic the Hedgehog is in English, and features extra parallax effects the USA version doesn't, making it the more desirable version. Even if the user preferences USA above Japan, we can still select the Japanese one:</p> <pre><code>{\n\"group\": \"Sonic The Hedgehog\",\n\"titles\": [\n{\"searchTerm\": \"Sonic The Hedgehog\"},\n],\n\"supersets\": [\n{\"searchTerm\": \"Sonic The Hedgehog \\\\(Japan.*\", \"nameType\": \"regex\"}\n]\n}\n</code></pre> </li> <li> <p>Hong Kong's implied language is now Chinese. This is because the available   titles in No-Intro are solely in Chinese.</p> </li> <li>India's implied language is now set to English, since all Indian Redump titles   feature English, and there are many English-only titles.</li> <li>Thailand's implied language is now set to nothing, as a number of Thai-only   titles have been dumped.</li> <li>Scandinavia's implied language is now set to nothing.</li> <li>Iceland and Icelandic have been added to the regions and languages.</li> <li>Retool now handles No-Intro's (Language+Language+Language) format more   efficiently, which is used exclusively in its GBA DAT.</li> <li>Retool now supports mastering codes for FM Towns, Nintendo, and NEC consoles,   and uses them as a versioning system.</li> <li>Retool now supports disc IDs of some more modern consoles and uses them as a   versioning system.</li> <li>Added yet another No-Intro date format, YYYY-MM-DDTHHMMSS.</li> <li>If there are duplicate title names in a DAT, Retool renames the dupes. As a   result, they aren't considered when selecting 1G1R titles and remain in the   DAT. Contact the DAT author to get the title renamed, as all title names   should be unique.</li> <li>The Redump website scraper has been majorly overhauled, which means metadata   is now more up to date. This tool is kept internal to prevent people from   spamming the Redump site.</li> </ul> New features <ul> <li>System settings. You can now override global settings on a per-system basis.   For example, you can set global settings that affect all of the DATs you   process, but set unique options for Sony PlayStation that override the global   settings when Retool processes that DAT.</li> <li>You can now disable 1G1R mode with <code>-d</code>. This is useful if you only want to   filter the input DAT by region, language, or excludes, and ignore all the   parent/clone relationships. It's also useful to use with the new   <code>--regionsplit</code> feature, which outputs multiple DATs based on the regions   you've selected.</li> <li>You can now prioritize titles based on their video standard, including MPAL,   NTSC, PAL, and SECAM. This only works on titles explicitly tagged with a video   standard in their name (for example, <code>(NTSC)</code>), and is processed after   languages and regions are processed. It is mainly used as a tie breaker for   titles that were released in the same region with multiple video standards.</li> <li>You can now additionally output a DAT file featuring all the removed titles   with the <code>--removesdat</code> argument.</li> <li>You can now exclude known MIA titles and individual MIA ROMs from both   No-Intro and Redump DATs by using <code>k</code> with the <code>--exclude</code> option.</li> <li>You can now update clone lists directly with Retool using <code>--update</code>. The DTD   file is now included as part of this bundle.</li> <li> <p>You can now specify a custom clone list to load with <code>--clonelist</code>, and a     custom metadata file with <code>--metadata</code>. This is mostly useful if:</p> <ul> <li>Redump or No-Intro changes their DAT names, and the clone lists/metadata   files are no longer automatically detected.</li> <li>You're building your own clone lists, and want to compare the output versus   the original.</li> </ul> </li> <li> <p>You can now specify a custom local path where your clone lists and metadata   live. You can change this path in <code>internal-config.json</code> \u2014 check out the   <code>localDir</code> subkey under <code>clonelists</code> and <code>metadata</code>.</p> </li> <li>You can use a different user config file than the default with the <code>--config</code>   argument.</li> <li>You can wrap custom exclude and include strings in <code>&lt;&gt;</code> to also remove all   titles related to a match. For example, <code>&lt;/Fah..nheit.*&gt;</code> would match   Fahrenheit (Europe) (En,Fr,De,Es,It), but also Indigo Prophecy (USA) as   they're linked together by clone lists.</li> <li>Retool GUI now lets you to add multiple DATs, or DATs recursively in a folder.</li> <li>Retool GUI now lets you drag and drop regions and languages, not just use the   position buttons.</li> </ul> Quality of life updates <ul> <li>There's a brand new Retool website and documentation.</li> <li>Retool can now cope with a user entering a trailing backslash in a path in   Windows.</li> <li>Retool CLI now supports the * wildcard for filenames and folders.</li> <li>You can now download <code>internal-config.json</code> if it's missing.</li> <li>The help text in the CLI version of Retool has been reorganized to make things   easier to parse.</li> <li>A DTD check failure now only gives a warning, it doesn't exit Retool. No-Intro   introduces new violations to the schema with enough frequency that it's not   worth enforcing too strictly any more.</li> <li>Global user filters are now located in <code>user-config.yaml</code>.</li> <li>The Windows binary now has several files UPX packed. This means on disk the   size of Retool is now ~30MB smaller. The compressed archive that users   initially download has also reduced to a total of ~24MB, down from ~32MB for   Retool v1. I suspect as a result of the UPX packing some overzealous   anti-virus tools might raise a false positive for Retool. There's nothing I   can do about this, the issue is with the anti-virus suite, not Retool --   you'll just have to clear Retool to run.</li> <li> <p>The GUI is now written directly in QT6 instead of using the PySimpleGUI     middleware. A lot of changes have been made, including the following upgrades:</p> <ul> <li>The GUI no longer crashes if the console portion of Retool crashes. It   simply fails to process the current DAT.</li> <li>The issue with the layout getting messed up when the UI was dragged between   screens of different scaling factors should be addressed. This mostly   impacted users with both 4k and HD screens.</li> <li>The GUI is now more horizontally rectangular, to avoid elements going   offscreen if people have set their scaling high on low resolution monitors.</li> <li>You now add DATs to a list to process, not just open a single file or   folder at a time. This means you can add multiple sets of individual DATs,   multiple folders, or multiple folders recursively to the list, in any   combination.</li> <li>You can now drag and drop between region and language lists, and reorder   items in the selected region and language lists.</li> <li>A title tool is accessible from the File menu. If you enter a title's   full name from the DAT, it shows you the other names Retool assigns to it   to work its magic. This tool is only useful if you intend to contribute to   clone lists or Retool itself.</li> <li>You can now change some default file locations in Settings, also found   in the File menu.</li> <li>Select all and Deselect all buttons have been added to the   exclusions tab.</li> </ul> </li> </ul> Performance and maintenance <ul> <li>Improved conversion of CLRMAMEPro formatted DATs to Logiqx XML, which should   avoid some crashes and handle larger files.</li> <li>Removed BeautifulSoup for increased performance.</li> <li>Changed some functions to use multiple processors.</li> <li>More accurate and readable regular expressions for tag selection.</li> <li>Removed regex queries where not necessary, concatenated them where possible.</li> <li>A lot of code is now statically typed for better predictability.</li> <li>Extra data validation is now performed on clone lists. The upshot is: you get   a warning if things aren't formatted correctly, and even if they are, they   shouldn't crash Retool \u2014 just that clone list entry is skipped.</li> </ul> Developer updates <ul> <li> <p>New clone list format. This is for consistency and to explicitly name     features, so newcomers have a better chance of understanding what's     going on and contributing.</p> <p>Old style categories</p> <pre><code>\"categories\": {\n\"BASIC Programming\": {\n\"match\": \"short\",\n\"categories\": [\"Applications\"]\n},\n\"Color Bar Generator\": {\n\"match\": \"short\",\n\"categories\": [\"Applications\"]\n}\n}\n</code></pre> <p>New style categories</p> <pre><code>\"categories\": [\n{\n\"searchTerm\": \"BASIC Programming\",\n\"nameType\": \"short\",\n\"categories\": [\"Applications\"]\n},\n{\n\"searchTerm\": \"Color Bar Generator\",\n\"nameType\": \"short\",\n\"categories\": [\"Applications\"]\n}\n]\n</code></pre> <p>The biggest thing to call out here is that the search term is now explicitly named, instead of being an undefined object key. Additionally, keys now us camel case. Overrides have had much the same makeover:</p> <p>Old style overrides</p> <pre><code>\"overrides\": {\n\"CD-Action 03-1997 (10B) (Poland)\": {\n\"new group\": \"CD-Action 03-1997 (10B) (Poland)\",\n\"match\": \"full\"\n},\n\"CD-Action 06-1997 (13B) (Poland)\": {\n\"new group\": \"CD-Action 06-1997 (13B) (Poland)\",\n\"match\": \"full\"\n}\n}\n</code></pre> <p>New style overrides</p> <pre><code>\"overrides\": [\n{\n\"searchTerm\": \"CD-Action 03-1997 (10B) (Poland)\",\n\"nameType\": \"full\",\n\"newGroup\": \"CD-Action 03-1997 10B Poland\"\n},\n{\n\"searchTerm\": \"CD-Action 06-1997 (13B) (Poland)\",\n\"nameType\": \"full\",\n\"newGroup\": \"CD-Action 06-1997 13B Poland\"\n}\n]\n</code></pre> <p>Renames have had the biggest rework. They have been renamed to variants, and are significantly more verbose. Supersets and compilations have now been split out into their own arrays, as they are treated differently by Retool. Most notably, the confusing priority <code>0</code> is no longer a thing, with that work now done by either the <code>compilations</code> or <code>supersets</code> array.</p> <p>Old style renames <pre><code>\"renames\": {\n\"3-D Ultra Pinball\": [\n[\"3-D Ultra Pinball\"]\n[\"3-D Ultra Pinball &amp; Trophy Bass\", \"title_position\", 0]\n],\n\"Black &amp; White (Data Disc)\": [\n[\"Black &amp; White - Platinum Pack\", 0]\n],\n}\n</code></pre></p> <p>New style variants (formerly renames) <pre><code>\"variants\": [\n{\n\"group\": \"3-D Ultra Pinball\",\n\"titles\": [\n{\"searchTerm\": \"3-D Ultra Pinball\"}\n],\n\"compilations\": [\n{\"searchTerm\": \"3-D Ultra Pinball &amp; Trophy Bass\", \"titlePosition\": 1}\n]\n},\n{\n\"group\": \"Black &amp; White (Data Disc)\",\n\"titles\": [\n{\"searchTerm\": \"Black &amp; White (Data Disc)\"}\n],\n\"supersets\": [\n{\"searchTerm\": \"Black &amp; White - Platinum Pack\"}\n]\n},\n{\n\"group\": \"Trophy Bass\",\n\"compilations\": [\n{\"searchTerm\": \"3-D Ultra Pinball &amp; Trophy Bass\", \"titlePosition\": 2}\n]\n}\n]\n</code></pre></p> <p>Not seen here: you can add <code>priority</code> and <code>nameType</code> keys to each object in the <code>titles</code>, <code>compilations</code>, and <code>supersets</code> arrays. See the documentation for more information.</p> </li> <li> <p>All user messages now go to STDERR instead of STDOUT. If you redirect the   STDOUT with &gt;, &lt;, or &gt;&gt;, the only output is now the data of the final filtered   DAT. This is most useful for those who build their own scripts and want to   chain tools together.</p> </li> <li>There's a new <code>--trace</code> argument that you can use to trace a title's journey   through Retool. It's useful when you're trying to figure out where something   unexpected happens, and don't want to insert a bunch of print and input   statements. It works on regex matches and is very verbose, so be careful with   precision. Running a trace disables file output and multiprocessor operation   in some places, as it's intended for testing only.</li> <li>There's a new <code>--singlecpu</code> argument that you can use to run Retool on just   one CPU. Python doesn't like <code>input</code> statements when it's running things   across multiple processors, so use this argument if you're debugging   multiprocessing parts of the code.</li> <li>There's a new <code>--nodtd</code> argument that bypasses Logiqx's DTD validation.   Despite quoting it in their DATs, No-Intro and Redump don't validate against   the DTD schema. This effectively hides the warning that the input DAT isn't   compliant.</li> <li>All classes and functions now have consistent docstrings so people (including   myself) have a chance to figure out what's going on.</li> <li>You can add the <code>@perf_test</code> decorator to any function to run memory and time   tests.</li> <li>There's a new <code>config</code> object that gets passed around a lot, which contains   almost all the settings Retool needs to operate. Because it's quite large, it   can be browsed interactively by running <code>print(config)</code> where the <code>config</code>   instance is available. This should help those new to the codebase, or myself   when I'm trying to track down bugs or haven't looked at the code in a while.</li> <li>The <code>input_dat</code> object can now be browsed interactively just like the <code>config</code>   object. It contains all the information about the DAT the user has fed into   Retool.</li> <li>Incidentally, the objects that contain the titles (DatNode objects) can also   be printed to show the title's information in a tree-like fashion.</li> </ul>"},{"location":"changelog/#118","title":"1.18","text":"<ul> <li>A small change to handle a new versioning system in No-Intro.</li> </ul>"},{"location":"changelog/#117","title":"1.17","text":"<ul> <li>Retool can now handle No-Intro DATs that reference an XSD file.</li> </ul>"},{"location":"changelog/#116","title":"1.16","text":"<ul> <li>The <code>&lt;name&gt;</code> tag in the output DAT header has been changed so CLRMAMEPro   recognizes DAT updates between Retool versions.</li> <li>The order of <code>&lt;rom&gt;</code> attributes has been changed in the output DAT to match   that of the in-progress Retool v2. This is mainly to help with internal   testing.</li> <li>A message has been improved that tells a user when Retool can't find titles   that match their preferences.</li> </ul>"},{"location":"changelog/#115","title":"1.15","text":"<ul> <li>Titles that have invalid filename characters   (<code>:</code>, <code>\\</code>, <code>/</code>, <code>&lt;</code>, <code>&gt;</code>, <code>\"</code>, <code>|</code>, <code>?</code>, <code>*</code>) in DATs now have those   characters removed or replaced with valid ones. No-Intro metadata is   also checked for invalid filename characters.</li> </ul>"},{"location":"changelog/#114","title":"1.14","text":"<ul> <li>Ring code version checking is now turned on for FM-Towns.</li> <li>The <code>(Homebrew)</code> tag is now recognized.</li> <li>When you exclude unlicensed titles, that now includes aftermarket and   homebrew titles.</li> <li>Unlicensed titles now get demoted if there's a production title in the same   region.</li> <li>Clone lists and metadata have been moved to their own repository.   This is in preparation for the shift to Retool v2.</li> <li>Retool CLI now prompts you to download clone lists and metadata if it finds   the <code>clonelists</code> or <code>metadata</code> folders missing.</li> </ul>"},{"location":"changelog/#113","title":"1.13","text":"<ul> <li>The <code>(Headered)</code> and <code>(Headerless)</code> tags No-Intro were adding to the new NES   DATs caused Retool to not associate them with the NES clone list. This has   now been fixed.</li> </ul>"},{"location":"changelog/#112","title":"1.12","text":"<ul> <li>Retool now brings over ROM manager directives in headers, including header   skippers. This should resolve issues around things like headered DATs.</li> </ul>"},{"location":"changelog/#111","title":"1.11","text":"<ul> <li>Fixed how Retool searches for <code>rom</code> attributes to avoid incorrect substring   matches. Retool should no longer crash on game names that contain <code>mia</code>.</li> </ul>"},{"location":"changelog/#110","title":"1.10","text":"<ul> <li>Updated Retool to support <code>mia</code> attributes on <code>rom</code> elements.</li> </ul>"},{"location":"changelog/#109","title":"1.09","text":"<ul> <li>Updated Retool to support <code>header</code> attributes on <code>rom</code> elements.</li> </ul>"},{"location":"changelog/#108","title":"1.08","text":"<ul> <li>Updated Retool to support SHA256 hashes.</li> </ul>"},{"location":"changelog/#107","title":"1.07","text":"<ul> <li>Changed the way Retool handles versions to deal with more complex version   systems introduced in recent No-Intro DATs. Some version selections are now   more accurate as a result.</li> <li>Retool can now handle empty <code>&lt;url&gt;</code> tags in DAT headers.</li> </ul>"},{"location":"changelog/#106","title":"1.06","text":"<ul> <li>The <code>release</code> tag now copies the <code>game name</code> attribute, instead of the   <code>description</code> tag. This is because No-Intro started using descriptions in the   GBA DAT that were different from the name.</li> <li>The <code>(Deprecated)</code> tag is now ignored in DAT file names when matching to   clone lists and metadata.</li> </ul>"},{"location":"changelog/#105","title":"1.05","text":"<ul> <li>Fixed a region selection regex bug which caused Retool to crash when   including files with specific regex custom filters.</li> <li>Added a more specific error message for DATs with no games.</li> <li>The DTD was updated to make <code>size</code> an optional attribute of <code>rom</code>.</li> </ul>"},{"location":"changelog/#104","title":"1.04","text":"<ul> <li>Fixed a bug where (United Kingdom) titles in No-Intro DATs were being   recognized as (Unknown) titles as well.</li> </ul>"},{"location":"changelog/#103","title":"1.03","text":"<ul> <li>The Satellaview-specific <code>(Magazine)</code> tag has been added to the multimedia   filter.</li> <li>The <code>(DEBUG)</code> tag has been added to the preproduction filter.</li> </ul>"},{"location":"changelog/#102","title":"1.02","text":"<ul> <li>Fixed a Sega ring code version comparison bug.</li> <li>The N-Gage-specific tag <code>(Full Trial)</code> has been added to the demos filter.</li> <li>The N-Gage-specific tag <code>(Review Kit ##)</code> has been added to the preproduction   filter.</li> <li>Fixed errors in the Redump scraper that stopped Croatian and Slovakian being   added as a language to the metadata.</li> <li>Added new languages: Albanian, Indonesian, Latvian, Macedonian, Serbian.</li> <li>Added metadata languages: Catalan, Estonian, Gaelic, Hindi, Lithuanian,   Punjabi, Tamil, Ukranian.</li> </ul>"},{"location":"changelog/#101","title":"1.01","text":"<ul> <li>Fixed an issue where titles assigned to <code>BIOS</code> in a clone list weren't   removed if a user had selected to remove BIOSes.</li> </ul>"},{"location":"changelog/#100","title":"1.00","text":"<ul> <li>Fixed an issue where multiple regions caused a crash when determining the   implied language of a title.</li> </ul>"},{"location":"changelog/#099","title":"0.99","text":"<ul> <li>Fixed an issue where titles on the system include list wouldn't be recovered.</li> </ul>"},{"location":"changelog/#098","title":"0.98","text":"<ul> <li>Fixed an issue where if a title was reassigned to the <code>Demos</code> category, and   was also featured in the <code>renames</code> object of a clone list, the clone wouldn't   be assigned.</li> </ul>"},{"location":"changelog/#097","title":"0.97","text":"<ul> <li>Fixed titles with manually set categories in clone lists being erroneously   added to remove lists when the <code>--log</code> option was set.</li> </ul>"},{"location":"changelog/#096","title":"0.96","text":"<ul> <li>Fixed DATs with an empty author field causing a crash.</li> </ul>"},{"location":"changelog/#095","title":"0.95","text":"<ul> <li>Fixed a bug where a combination of modern editions and the <code>(Unl)</code> tag caused   the wrong 1G1R title to be selected when the user preferred modern ripped   titles over the original.</li> <li>Added an option to not replace <code>(Unl)</code> or <code>(Aftermarket)</code> titles if a   production version is found in another region.</li> <li>The Retool version used to create a DAT is now recorded in the DAT header to   assist with troubleshooting.</li> <li>Fixed a bug where \"&amp; Retool\" was added multiple times to the author field   of a DAT previously processed by Retool.</li> </ul>"},{"location":"changelog/#094","title":"0.94","text":"<ul> <li>Fixed a QT issue where the Retool icon wouldn't load properly on Windows.</li> </ul>"},{"location":"changelog/#093","title":"0.93","text":"<ul> <li>Fixed a crash for Linux users by adding conditionals to the new Windows CLI   code.</li> <li>Removed Colorama import accidentally left in when fixing Windows formatting.</li> </ul>"},{"location":"changelog/#092","title":"0.92","text":"<ul> <li>Retool CLI no longer clears the screen on start. Turns out this was also   accidentally enabling VT-100 mode in Windows 10 (which allows ANSI codes   like color formatting and bold to work), so there's now some new code to   manually enable it instead.</li> <li>You can now manually assign categories to titles in clone lists using the   <code>categories</code> key. This is a highly manual task, and will only be maintained   through user submissions.</li> <li>You can now include titles that don't have hashes, ROMs, or disks specified.   This might allow the conversion of DATs from parties other than No-Intro or   Redump \u2014 these DATs aren't officially supported.</li> <li>Files now write in UTF-8 to avoid characters causing crashes.</li> <li>Enhancement chips are now set to the category <code>BIOS</code> in the output DAT.</li> <li>Added some new modern edition tags.</li> <li>Titles with the <code>(Aftermarket)</code> tags are now demoted below   official ones within the same region.</li> <li>Titles with the <code>(Prerelease)</code> tag are now treated as preproduction.</li> <li>The regex for capturing demo titles is now more comprehensive.</li> <li>Added Estonia &amp; Lithuania as regions, along with their languages.</li> </ul>"},{"location":"changelog/#091","title":"0.91","text":"<ul> <li>Fixed a crash when processing the Mega CD/Sega CD DAT, and Europe or USA was   not included in the region order.</li> <li>Specified in the GUI that custom filters are case sensitive.</li> </ul>"},{"location":"changelog/#090","title":"0.90","text":"<ul> <li>Excluding demos now also excludes kiosk titles, and matches some extra strings   for trial versions.</li> <li>Excluding videos now excludes trailers as well.</li> </ul>"},{"location":"changelog/#089","title":"0.89","text":"<p>Things of note for this release:</p> <ul> <li>The way supersets and compilations are handled has changed. Supersets are now   default 1G1R titles. Compilations sometimes get removed, sometimes become 1G1R   titles depending on region order/situation. Right now you won't see much   difference outside of Master System \u2014 the point of this version was to get   the functionality out, then the clone lists can be updated later.</li> <li>Custom global/system includes now recover files from countries/languages/type   exclusions. Grab that one title you want from Japan, or save that one demo   while excluding the rest.</li> </ul> New features <ul> <li>Custom global or system filter includes can now force inclusion of titles that   have been removed due to:</li> <li>Region exclusions.</li> <li>Language exclusions.</li> <li>Any of the exclusion options being set in Retool.</li> <li>Stat calculation now reports removals due to country and language filters.</li> <li>Titles with the string \"Game Boy Advance Video\" are now removed when videos   are excluded.</li> <li>You can now set a custom URL to update from in <code>internal-config.json</code>. This   means should the clone lists stop being updated at the main Git repository,   someone else can more easily take over.</li> <li>Titles with the category \"Add-Ons\" and \"Bonus Discs\" can now be excluded.</li> <li>Clone lists now have Retool minimum version requirements. The user will be   prompted in the command line output whether to continue or not if Retool is   out of date compared to what the clone list requires.</li> </ul> Bug fixes <ul> <li>Stat calculation of custom global/system filters would crash Retool when   <code>--nofilters</code> was set. This has been fixed.</li> <li>Stat calculation of the dat's final title count has been fixed to include   custom global/system includes.</li> <li>Fixed a potential problem when outputting a 1G1R list with a web/ftp protocol   prefix.</li> <li>Fixed Retool GUI not remembering output folders or exclusion settings.</li> <li>Updated a few dependencies.</li> </ul> Behavior changes <ul> <li>Tried to capture general crashes in order to give feedback to Retool GUI   users, to help diagnose future issues.</li> <li>Overrides and conditional overrides in clone lists are now merged into just   overrides. They can also now match on full or tag free names. Note that some   key names have changed \u2014 anything with an underscore in the name has   been replaced by a space.</li> <li>For the longest time, I kept matches as case sensitive just in case there was   an oddity along the way. Turns out for the sake of Windows users not having   problems this isn't the case, so all titles now get lowercase matched. This   should help with clone list resilience as naming standards change over time.</li> <li>Things started getting confusing with compilations and supersets when it came   to choosing a 1G1R title. This was always an incredibly grey and fuzzy area,   was a pain to maintain, and it became apparent over time that things needed   to change for the sake of clarity. The upshot of all this? You get a better   1G1R selection without having to select the right options.</li> </ul> <p>Things that have changed:</p> <ul> <li>Mega-CD 32x now gets hoisted above Sega CD 32x if you have Europe above     USA in your region order.</li> <li>A <code>removes</code> key is now available to use in clone lists to remove specific     titles from a DAT. It works with full, tag free, or short names. This is     mostly useful to take out titles that don't quite match anything, but should     still be removed \u2014 for example, compilations whose titles are covered     by other compilations, or individual titles in the same region.</li> <li> <p>The supersets option has been removed. It was nice to have in theory, but in     practice, game of the year editions, special editions, and so on are mostly     just the latest versions of games with bonus content and/or DLC included.</p> <p>There are incredibly rare exceptions \u2014 such as Ninja Gaiden vs Ninja Gaiden Black, where dramatic rebalancing was done in addition to the extra content, along with new enemies and weapons \u2014 but for the most part, this isn't the case. If you care enough about an older version of a game, you can always add it to a custom system filter.</p> <p>Supersets are now often assigned a 1 or 0 priority, depending on the situation.   - The exclude compilations option has been removed, and compilations are now usually treated in one of two ways: - As a remove; that is, the compilation is removed entirely from the DAT as   it's covered by other titles or compilations. - As the 1G1R title for a set, depending on the region.   - The guidelines for when to use a 0 priority in clone lists have changed because of this. You can use a 0 for: - Compilations that include multiple titles. - DVD releases of titles that are distributed as multiple CDs for other   releases. - World releases that should be elevated above USA (as a World release   includes USA). - A superset (gold edition, game of the year edition, etc) version of a   title available in one region, but not in another. - A title in one region that definitely has more content than another   region. For example, a release in Europe that's uncensored compared to the   US release.</p> </li> </ul>"},{"location":"changelog/#088","title":"0.88","text":"<p>Things of note for this release:</p> <ul> <li>A key bug fix for clone list resilience.</li> <li>A lot of command line options have changed.</li> <li>Windows binaries no longer live in the <code>/dist/</code> folder, as it was becoming a   download burden to those cloning the repo.</li> </ul> New features <ul> <li>You can now exclude Manuals.</li> <li>Excluding BIOSes now also excludes enhancement chips.</li> <li>Excluding applications now excludes titles with \"Check Program\" and \"Sample   Program\" in their name.</li> <li>A lot has shifted around in terms of Retool CLI arguments, so Retool can   continue to grow:<ul> <li>The <code>-o</code> option is now <code>--output</code>.</li> <li>The <code>-g</code> option has been removed to bring things in line with Retool GUI.</li> <li>A new <code>--exclude</code> option that takes arguments is now used in place of a   lot of the old filter options. Check <code>-h</code> for the full list.</li> </ul> </li> <li>Output file names are now a tiny bit smaller in length. User options and title   counts are now at the end of the file name too, so sorting by alpha doesn't   get confusing.</li> <li>Added yet another beta tag variation.</li> <li>In Retool GUI, the user is now prompted to download clone lists if they don't   have any.</li> </ul> Bug fixes <ul> <li>If a key title in a clone list didn't exist in an input DAT (or had been   removed by a Retool option), then all other titles in that array would become   unlinked from one another. This has been fixed.</li> <li>Fixed inaccurate and missing removal stats.</li> <li>Fixed the program crashing if a prefix or suffix wasn't supplied when   exporting a 1G1R list.</li> <li>In Retool GUI, the up/down region priority buttons no longer crash the program   if a region hasn't been selected.</li> <li>Made sure release tags output consistently in legacy mode.</li> </ul> Behavior changes <ul> <li>The demotion of modern ripped titles (for example, Virtual Console) is now   working cross-region. You'll still get them if the modern edition is the only   one available with a language associated with a higher region priority. For   example, sometimes English versions of games were only released much later on   modern platforms, whereas previously they had exclusive Japanese releases. In   this case, if you have an implied English speaking region high up in your   region order, the modern edition will remain.</li> </ul>"},{"location":"changelog/#087","title":"0.87","text":"<p>Some big changes this time around, including some requested features.</p> New features <ul> <li>There are now user-customizable exclude and include filters, so you can keep   or remove specific titles regardless of what Retool thinks should be done   with them. You can set filters as partial strings, full strings, or regex.   It's fairly advanced, so read the documentation to see how it works.</li> <li>You can now output lists of what titles have been kept, removed, and set as   clones by Retool GUI, just like Retool CLI. Check the Modes tab for the   option.</li> <li>You can now output a list of just the 1G1R title names, and optionally add   your own prefix or suffix to each line. Starting a prefix with http://,   https://, or ftp:// will URL encode each line.</li> <li>The binary version for Windows now opens a heck of a lot faster, at the cost   of having a much messier folder structure. Formerly everything was packed into   a single executable, which meant the operating system had to extract all the   dependencies before it could even think about launching the program, slowing   things down.</li> </ul> Bug fixes <ul> <li>Rewrote the parent assignment code to correct misassignment issues in the   NES DAT. It turns out this results in fixes for other sets too, requiring   clone list changes. For accurate matches, you must update to Retool 0.87 to   use the latest clone lists.</li> <li>Fixed a bug that removed titles from the United Kingdom from No-Intro DATs.</li> <li>Can now handle the new (DV #, #) versioning in No-Intro's FDS DAT without   crashing.</li> <li>Fixed the clone list/metadata update thinking that there was a new file if the   original had been converted from CRLF to LF. Made sure all new clone lists   and metadata are converted to LF before uploading to the repo.</li> <li>The PlayStation Portable No-Intro and Redump DATs now refer to separate   metadata from their respective databases.</li> <li>Numbered samples are now removed when excluding demos and samples, for example   <code>(Sample 1)</code>, <code>(Sample 2)</code> and so on.</li> <li>Those using font scaling &gt; 100% in Windows 10 should no longer have Retool   GUI's layout be thrown all over the place, so long as they stick to the   provided scaling levels. Note that Retool GUI on Windows 7 and 8 isn't   supported.</li> <li>Ubuntu users now get the Ubuntu font in Retool GUI. The UI is also slightly   scaled to avoid text inside buttons being cut off.</li> <li>Removed font colors, styles and fancy terminal things when running Retool CLI   on Windows 7 and 8, as those versions of Command Prompt don't support them.   Things still look shiny on Windows 10 and modern Linux terminals.</li> <li>Stopped the command line instructions showing when Retool GUI was processing   a DAT.</li> <li>The lxml module has been updated, as GitHub advised of a security flaw with   the previously used version.</li> <li>Fixed dependency problems when running <code>updateclonelists.py</code> from the   command line.</li> </ul> Behavior changes <ul> <li>More titles ripped from modern platform rereleases (such as Virtual Console   titles in the SNES DAT, for example) have been demoted by default, as they   don't necessarily play well (or at all) in emulators. You can make these   titles the preferred 1G1R title instead with the <code>-v</code> option, or by selecting   the   Titles ripped from modern platform rereleases replace retro editions   checkbox in Retool GUI.</li> <li>Good titles are now preferred over bad (<code>[b]</code>) ones.</li> <li>No-Intro pre-production titles are now categorized properly in the output DAT.</li> <li>Updating clone lists now downloads <code>internal-config.json</code> as well, as   updates to this file affect 1G1R title selection.</li> <li>Retool now identifies Redump BIOS titles by the category <code>Console</code>, and   they'll be removed if you excluded BIOSes. BIOS titles are also now assigned   the category of <code>BIOS</code> in the output DAT.</li> <li>Release tags are now only output in legacy mode. They also generate for   every region and language of a title, not just the primary region. This is   just tying a bow on Logiqx-style 1G1R parent/clone DAT files, 1G1R modes in   DAT managers still aren't very useful.</li> </ul> Internal changes <ul> <li><code>user-config.yaml</code> is no longer stored in the GitHub repo. It's also been   removed from Windows ZIP file. This is to prevent users accidentally   overwriting their own <code>user-config.yaml</code> when updating Retool. Both Retool   CLI and GUI auto-generate the file if it's missing.</li> <li>Metadata is now in alphabetical order.</li> </ul>"},{"location":"changelog/#086","title":"0.86","text":"<ul> <li>Modern rereleases like Virtual Console titles have been demoted in priority,   as quite often emulators won't play them.</li> <li>Now includes scraped language data from No-Intro for more accurate language   filtering.</li> <li>You can now exclude titles that contain the string <code>[BIOS]</code>. This should only   apply to No-Intro DATs.</li> <li>Excluding applications now additionally excludes titles with the string   <code>(Test Program)</code>.</li> <li>Removed a few unused properties from metadata files, which greatly reduced   file sizes.</li> <li><code>-i</code> removed from <code>-g</code> option as some titles are used for soundtracks   in games.</li> </ul>"},{"location":"changelog/#085","title":"0.85","text":"<ul> <li>Updated the date sorting to take into account another of No-Intro's   inconsistent date formats <code>(Month name, YYYY)</code>.</li> <li>Another tweak to the ordering of the output DAT.</li> </ul>"},{"location":"changelog/#084","title":"0.84","text":"<ul> <li>Updated the Sega ring code regex so more ring codes are captured.</li> </ul>"},{"location":"changelog/#083","title":"0.83","text":"<ul> <li>Accidentally uploaded the wrong <code>user-config.yaml</code>, where all regions were   commented out. This resulted in the CLI version of Retool finding no clones   unless manually edited by the user. This has now been fixed.</li> <li>Some code clean up and extra explanation for some options.</li> </ul>"},{"location":"changelog/#082","title":"0.82","text":"<ul> <li>(Unl) titles in a higher region are now demoted below equivalent production   titles in other regions.</li> <li>You can now exclude by the \"Audio\" and \"Video\" categories.</li> <li>Removed Multimedia from the <code>-g</code> option as the category might contain games.</li> <li>Made clear that the Multimedia category might include games in the GUI.</li> <li>Explained what a coverdisc is in the GUI.</li> <li>Fixed a natural sort bug in the alphabetical ordering of output DATs.</li> </ul>"},{"location":"changelog/#081","title":"0.81","text":"<ul> <li>Fixed a bug in <code>retool-gui.py</code> where the output DAT file had <code>(-)</code> in its   file name if no options were set.</li> <li>Fixed a bug where clone lists and metadata wouldn't download if their   respective folders didn't exist.</li> </ul>"},{"location":"changelog/#080","title":"0.80","text":"<ul> <li>Retool can now handle No-Intro numbered DATs.</li> <li>Output DATs used to do alphabetical order based on group, which could look   like things were out of order if you didn't know what was happening behind   the scenes. Output DATs are now ordered based on title.</li> <li>Updated wording around enabling the supersets option, so it was clear that if   you turned it on, supersets would replace standard editions in the output   DAT.</li> <li>Added some extra tooltips to the exclusion options in the GUI, so users have   more information to work with.</li> </ul>"},{"location":"changelog/#079","title":"0.79","text":"<ul> <li>Fixed the online updating of clone lists to include Redump metadata.</li> </ul>"},{"location":"changelog/#078","title":"0.78","text":"<ul> <li>Implemented a GUI. You'll need to install <code>pysimpleguiqt</code> with pip, and after   that you can run it with <code>retool-gui.py</code>. It's not as tight and consistent as   it could be due to limitations with PySimpleGUIQt, but given PySimpleGUI's   rapid, active development this should improve over time. Right now it looks   best on Windows. Ubuntu has been tested, and looks a little janky, but is   functional. MacOS hasn't been tested.</li> <li>You can now run <code>updateclonelists.py</code> to download the latest clone lists.   There's also an option available in the GUI under the File menu.</li> <li>Reformatted <code>user-config.yaml</code> so strictyaml liked it a bit more, and things   played well with the GUI. Improved YAML handling at the same time. Make sure   to backup your current <code>user-config.yaml</code> before grabbing this version, so   you can port your region order/language settings over.</li> <li> <p>Moved to argparse to handle user input in the CLI. It's less pretty, but it's     more robust and scalable. This also means that the <code>-i</code> option is no longer a     thing when specifying your input dat/folder \u2014 instead, specify it     immediately after <code>retool.py</code>:</p> <p><code>retool.py &lt;input dat/folder&gt; &lt;options&gt;</code></p> </li> <li> <p>Stopped misassignment in clone lists if Redump left off the <code>(Demo)</code> tag from   a title.</p> </li> <li>Fixed an exit bug when the user would select only regions and/or languages   that didn't exist in the input DAT.</li> <li>Added a few promote tags.</li> <li>Cleaned up some unused variables and imports.</li> <li>Lots of code tweaks to better suit GUI interaction.</li> </ul>"},{"location":"changelog/#077","title":"0.77","text":"<ul> <li>The <code>-g</code> option now keeps applications, as they are useful for computer   platforms like the Atari ST and Commodore Amiga.</li> <li>The new <code>-y</code> option outputs a list of what titles have been kept and removed   in the output DAT.</li> <li>Refactored how Retool options get listed in the output name.</li> <li>Removed requirement for the !DOCTYPE element to exist that quotes the Logiqx   DTD, so Retool can work with files from sites.dat. The DAT is still validated   against the DTD, however.</li> <li>Dealt with an edge case in selecting the right title if somehow there was   both a version and a revision of a title.</li> <li>Hid displaying options behind the <code>-?</code> option.</li> </ul>"},{"location":"changelog/#076","title":"0.76","text":"<ul> <li>Fixed filtering by language. This was broken due to a last minute change from   a string to regex in the 0.75 release.</li> <li>Fixed folders not being processed to completion when filter by language was   selected, and no valid titles were found in the current DAT.</li> <li>Added <code>Ukranian</code> as a language.</li> <li>When filtering by language, if titles in the following regions don't have   languages specified, they will be included if you select any of their   respective languages:<ul> <li>Asia \u2014 English, Chinese, Japanese.</li> <li>Hong Kong, Taiwan \u2014 Chinese, English.</li> <li>Latin America \u2014 Spanish, Portuguese</li> <li>South Africa \u2014 Afrikaans, English</li> <li>Switzerland \u2014 German, French, Italian</li> <li>Ukraine \u2014 Ukranian, Russian.</li> </ul> </li> <li>Retool can now handle <code>rom</code> entries with no CRC specified. A <code>rom</code> entry must   have at least a CRC, MD5, or SHA1, otherwise the title is dropped.</li> <li>The <code>-g</code> option now keeps preproduction titles, as they're treated as   versions of titles instead of a separate thing, and many will be removed   automatically on account of production versions existing. You will need   to specify <code>-p</code> if you want to remove all preproduction titles.</li> </ul>"},{"location":"changelog/#075","title":"0.75","text":"<ul> <li>Now handles No-Intro DATs. Note that Retool grouping follows different rules   to No-Intro. For example, in the Atari 2600 DAT, a compilation is listed as   a clone of a single title, despite featuring unique games. No-Intro also   tends to include demos as clones of production titles. Retool also doesn't   set clones for BIOSes, as you might need a different BIOS version in   different situations. Retool also ignores titles that don't have <code>rom</code> or   <code>disk</code> entries, which happens quite a bit in No-Intro's parent/clone sets.</li> <li>Added <code>Mexico</code> and <code>Hong Kong</code> as regions.</li> <li>Added <code>Zh-Hant</code> and <code>Zh-Hans</code> as languages.</li> <li>Alphas, betas, and prototypes are now treated as versions of titles.   This way you get the highest version of a title available, and less noise   without stripping everything away with the <code>-p</code> tag. Retool prefers production   versions of titles, even if there is a preproduction title in a higher   priority region. Priority is as follows:<ul> <li>Production with highest version</li> <li>Production with highest revision</li> <li>Production with no version/revision</li> <li>Highest beta revision</li> <li>Highest alpha revision</li> <li>Highest prototype revision</li> </ul> </li> <li>The exclude coverdiscs flag is now <code>-f</code>.</li> <li>You can now exclude bad dumps, pirate titles, promotional titles (titles that   contain <code>(Promo)</code>, <code>EPK</code>, and <code>Press Kit</code>), and samples.</li> <li>Retool can now deal with DATs that fail DTD validation due to <code>&lt;clrmamepro&gt;</code>   and <code>&lt;romcenter&gt;</code> tags being in an unexpected order in the header.</li> <li>The DTD file has been updated to take into account that even though people   include it in their XML files, their XML files don't actually validate   against it.</li> <li>Retool can now deal with DATs that don't include MD5 or SHA-1 hashes.</li> <li>Windows and MacOS binaries have been removed. The Windows binary had   performance issues due to the Python environment needing significant   start up time, and I can no longer build the MacOS binary after the virtual   machine stopped working.</li> <li>Some crash fixes and message format tweaking.</li> </ul>"},{"location":"changelog/#071","title":"0.71","text":"<ul> <li>Moved internal-config.json to the clonelists + metadata file so new   releases of Retool aren't required each time the file is updated.</li> </ul>"},{"location":"changelog/#070","title":"0.70","text":"<p>Oof, this is a big update, with feature and performance improvements all over the place.</p> Code readability and performance <p>Retool has been largely rewritten for readability, performance, security, and to make forward momentum easier. This means a few breaking changes:</p> <ul> <li>A new format for clone lists, so you need to update them. Retool is now     better at automatically detecting different types of clones, so some titles     no longer need to be listed in the clone lists.</li> <li>The selected 1G1R titles might change compared to previous versions of     Retool, due to a major audit of clone lists, tags, and increases in     parent detection accuracy.</li> <li>Retool no longer exports parent/clone DATs by default. Turns out the format     can't really do the job properly, as it has no concept of priority within     individual regions (and dealing with languages is a misery). As such, using     DAT managers like CLRMAMEPro or Romcenter to manage 1G1R can lead to     unexpected outcomes. Instead, you now use Retool to produce the 1G1R DAT     you want, and only use the DAT manager to manage your files.</li> <li>Retool now has a minimum requirement of Python 3.8.</li> </ul> <p>Processing DATs is now also much faster as a result of better coding practices. While this is nice for all DATs, you'll mostly feel it on the big ones. The PlayStation and IBM DATs, for example, are now 2x faster.</p> Custom region orders, filter by language <p>Custom region orders are now supported \u2014 even for supersets. You can also filter by languages. Make your choices by editing the <code>region order</code> and <code>filter languages</code> sections in <code>user-config.yaml</code>. You can use the <code>-l</code> option to filter by language, or leave it off to include all languages.</p> Other language and region stuff <p>Retool's a lot smarter with languages now.</p> <p>For a start, implied languages are now enabled for most regions, and language data for titles has been scraped from Redump's site. Redump doesn't always include language data in the filename of their titles, so this assists in more accurately selecting parent titles. For example, say your region priority is USA, Europe. The USA title has CDs, but the European title has a DVD version that we now know for sure supports English. Retool can now choose the European DVD version over the USA CD version, depending on how clone lists are set up.</p> <p>The following things have also changed:</p> <ul> <li>A bunch of languages (<code>Af</code>, <code>Ca</code>, <code>Gd</code>, <code>Hr</code>, <code>Pa</code>, <code>Sk</code>, <code>Sl</code>, <code>Ta</code>) have   been added.</li> <li>Slovenia has been added as a region.</li> <li>The incorrect <code>Gr</code> language code has been changed to <code>El</code>.</li> <li>Multi-region titles are now handled more elegantly.</li> <li>Fixed tags with regions in them causing a title to be filtered into the wrong   region. For example, Virtua Fighter 2 (Europe) (Rev A) (Made in USA) used   to be categorized as a USA title \u2014 it's now correctly identified as a   European title.</li> </ul> Other updates <ul> <li>You can now exclude unlicensed titles.</li> <li>Sega ring codes are now mostly handled automatically for assigning clones.   This has greatly reduced the size of some clone lists.</li> <li>Retool can now deal with \"cloneof\" tags in input DATs, as Redump has started   adding a few.</li> <li>Retool now handles Genteiban, Fukyuuban, and many other editions automatically.</li> <li>If the user specifies an output folder that doesn't exist, that folder is now   created.</li> <li>Fixed problems that previously required overrides in clone lists.</li> <li>Added basic failure states for not finding required data in JSON config   files.</li> <li>DAT header details are now escaped for valid XML, and XML file error handling   is better.</li> <li>A bug in CLRMAMEPro DAT conversions has been fixed.</li> <li>DAT file output is now naturally sorted instead of lexicographically.</li> <li>The decision to include the version of a title on the newest operating   system has been reversed. For the sake of compatibility, if there are   multiple OS versions for a title, all are included.</li> </ul>"},{"location":"changelog/#060","title":"0.60","text":"<ul> <li>Removed pointless milliseconds from output file name.</li> <li>Added \"Scholastic\" to the publisher/distributor list.</li> <li>Added more disc synonyms.</li> <li>Automated handling PlayStation EDC titles.</li> <li>Language codes removed: <code>At</code>, <code>Be</code>, <code>Ch</code>, <code>Hr</code>.</li> <li>Languages codes added: <code>Bg</code>, <code>Cs</code>, <code>He</code>, <code>Ro</code>, <code>Tr</code>.</li> <li>Regions added: Bulgaria, Romania. There are no games yet from these regions,   but there are games with their languages.</li> <li>Extracted configuration data from the main Python script, and moved it into   an external JSON file. This can potentially lead to greater user   customization later.</li> </ul>"},{"location":"changelog/#059","title":"0.59","text":"<ul> <li>Added \"Best of the Best\" and \"Best Hit Selection\" as publishers/distributors.</li> <li>Added another disc synonym.</li> </ul>"},{"location":"changelog/#058","title":"0.58","text":"<ul> <li>Added yet another disc synonym.</li> <li>Added \"Hitsquad - Regenerator\" as a publisher/distributor.</li> <li>Removed <code>_version.py</code>.</li> </ul>"},{"location":"changelog/#057","title":"0.57","text":"<ul> <li>Separated removing coverdiscs from demos (<code>-d</code>), making it its own option   (<code>-b</code>). Turns out plenty of full version games were given away as coverdiscs.</li> <li>Made handling the XML definition in a DAT a bit more robust.</li> <li>Fixed importing of CLRMAMEPro DAT files.</li> <li>When a parent or clone of a superset, override, or compilation title is not   found, it no longer crashes Retool or silently fails, but tells you what's   missing.</li> <li>Added \"Teil\" as a synonym for \"Disc\", to automatically pick up some German   titles.</li> <li>Added a <code>-g</code> option, which is shorthand for all options (-abcdemps).</li> <li>Added Th as a language.</li> <li>Converted clone lists to JSON so they're more portable, and binaries don't   require an update every time the clones update.</li> <li>Fixed a bug in selecting supersets.</li> <li>Noted that supersets only currently really work if you follow Retool region   order. Otherwise current limitations in DAT format and DAT managers get in   the way.</li> </ul>"},{"location":"changelog/#056","title":"0.56","text":"<ul> <li>Messed with the region order a little to be more fair to more popular   languages, taking in mind how many titles were actually released for   those languages.</li> <li>Bumped Portuguese up the priority list when deciding between two   identical titles that support different languages.</li> <li>Moved stuff out of <code>readme.md</code> to make it more readable, and created   a GitHub wiki for more detailed information.</li> </ul>"},{"location":"changelog/#055","title":"0.55","text":"<ul> <li>Code changes to support a build pipeline.</li> </ul>"},{"location":"changelog/#054","title":"0.54","text":"<ul> <li>Greatly sped up parent/clone processing, and removed XML conversion in   favor of writing directly to the output DAT. This will be mostly noticeable   for large DATs. The IBM and PlayStation Redump DATs, for example, now process   around 10x faster, cutting a minutes long process for each into seconds on an   i7 8700K.</li> <li>Added another distributor/publisher to check for when scanning for clones.</li> <li>Removed the option to remove titles with Alt tags, as it was a leftover   from when Retool didn't do 1G1R properly.</li> <li>Added a counter for how many compilations were removed, if the option is   enabled.</li> </ul>"},{"location":"changelog/#053","title":"0.53","text":"<ul> <li>Fixed a bug where if a region name was in a title, it caused clones to be   assigned to the wrong parents. For example,   Daytona USA Deluxe Edition (Taiwan),   Cossacks II - Battle for Europe (Germany) would confuse the logic in   Retool as to what region the title belonged to.</li> <li>Fixed a normalization bug when converting Disc III into Disc 3 for title   matching.</li> </ul>"},{"location":"changelog/#052","title":"0.52","text":"<p>Added better parent selection for the following:</p> <ul> <li>Titles with multiple date versions.</li> <li>Titles with distributor/publisher, OEM, and covermount tags.</li> <li>Budget titles vs the originals.</li> </ul>"},{"location":"changelog/#051","title":"0.51","text":"<ul> <li>Added Zh as a language.</li> <li>Fixed a crash if a DAT had no titles, and Retool was trying to process   supersets.</li> </ul>"},{"location":"changelog/#050","title":"0.50","text":"<ul> <li>A huge architectural shift to move Retool to a 1G1R DAT generator. Due to   this, the <code>_regional_renames.py</code> file has been renamed to <code>_renames.py</code> and   massively expanded to take into account localized title dupes. The file has   also been reorganized to make future dupe additions easier.</li> <li>The <code>-re</code>, <code>-ra</code>, and <code>-en</code> options have been removed.</li> <li>The <code>-o</code> flag is no longer mandatory, and now defines an output folder.   Output files are automatically named.</li> <li>You can now remove alternate (Alt) titles with the <code>-l</code> option.</li> <li>You can now promote supersets (for example, Game of the Year editions) to   parents with the <code>-s</code> option.</li> <li>Expanded demo removal criteria, as Redump does not always put demos in the   \"Demos\" category.</li> <li>Region processing is now much faster.</li> <li>OEM and Hibaihin titles that have a matching commercial title with the same   name are now marked as clones.</li> <li>Titles that aren't the latest revisions or versions are now marked as clones.   This doesn't support release versioning, like 0.100 being larger than 0.99,   however there's not much evidence of that style of versioning being used   across Redump titles.</li> <li>Titles that include multiple regions are now deduped, preferencing titles   with more regions. For example, out of Grim Fandango (USA) and   Grim Fandango (USA, Europe), the former is marked as a clone.</li> <li>Titles with the same name from the same region that include different   language sets are now handled. The rules are quite complex:</li> <li>If one title is in English, but the other isn't, mark the English title as     the parent.</li> <li>If one title from Europe has no languages listed, and the other has     languages listed but English isn't one of them, mark the title with no     languages listed as the parent (on the assumption that English may be in     there).</li> <li>If English is listed for both titles, and one title has more languages,     mark the title with more languages as the parent.</li> <li>If English is listed for both titles, and both titles have the same number     of languages, check for preferred languages one by one, in the order listed     below. The first title that doesn't support a preferred language is marked     as a clone.<ol> <li>Spanish</li> <li>French</li> <li>Japanese</li> <li>Portuguese</li> <li>German</li> <li>Italian</li> <li>Swedish</li> <li>Danish</li> <li>Norwegian</li> <li>Polish</li> <li>Greek</li> <li>Dutch</li> <li>Finnish</li> <li>Swiss</li> <li>Hungarian</li> <li>Russian</li> </ol> </li> <li>Brazil and Latin America have been moved off the native English list. Modern   games from these regions aren't guaranteed to have English translations.</li> <li>Japan has been moved up to second highest priority for non-native English   regions, after Europe. The Asia region being higher priority than Japan was   stealing titles that should have had Japanese parents.</li> <li>The requirement for the Logiqx doctype string in input files has been   removed, as some non-Redump DATs didn't have the string and were erroring.</li> <li>DTD validation has been added for Logiqx-style DAT files. Redump DAT files   are invalid by default, as the category tag isn't in the spec. A modified DTD   file has been included in the release with the category tag added, so Redump   DATs should pass.</li> <li>When you add a newer version of a DAT to CLRMAMEPro that has been generated   by Retool, it now triggers an update prompt where appropriate.</li> <li>Redump is no longer required to be the DAT author.</li> <li>Characters that aren't valid in XML (&lt;, &gt;, &amp;) have been escaped in generated   DAT files.</li> <li>Empty name, description, author, url, and version fields in DATs are now   handled, instead of crashing the program.</li> <li>Several bugs involving options flags were fixed.</li> <li>The title count was missing when DATs were split into regions. This is now   fixed.</li> <li>Bye bye ASCII logo. Vertical screen real estate is now more important.</li> <li>Added CloneRel tool, that exports an Excel file from a DAT to better display   existing parent/clone relationships.</li> <li>Dealt with the \"King's Field problem\". King's Field (Japan) didn't get a   Western release. King's Field in the USA is known as King's Field II in   Japan. King's Field II in the USA is King's Field III in Japan.   Without extra logic, the program would mark all King's Field II titles   as clones, which is not what we want.</li> </ul>"},{"location":"changelog/#034","title":"0.34","text":"<ul> <li>Added textwrap module for better readability on MacOS/Linux.</li> <li>Bundled MacOS and Windows binaries.</li> </ul>"},{"location":"changelog/#033","title":"0.33","text":"<ul> <li>Added ability to operate on folders.</li> <li>Fixed output file naming bugs.</li> <li>Fixed some user input issues.</li> <li>Tidied up some output for increased readability.</li> <li>Added the following regions: Argentina, Czech, Hungary, Singapore, Slovakia,   Thailand, Turkey, Ukraine, United Arab Emirates.</li> </ul>"},{"location":"changelog/#032","title":"0.32","text":"<ul> <li>Reimplemented <code>-re</code> and <code>-ra</code> flags.</li> <li>Fixed header so the user wasn't prompted with false update warnings when the   DAT was loaded in CLRMAMEPro.</li> </ul>"},{"location":"changelog/#031","title":"0.31","text":"<ul> <li>Used dictionaries and classes to greatly increase performance and improve   code readability.</li> <li>Removed minidom dependency.</li> <li>Removed unused importlib dependency.</li> <li>Usability tweaks.</li> </ul>"},{"location":"changelog/#020","title":"0.20","text":"<ul> <li>Refactored for performance, code readability, and usability.</li> <li>Can handle CLRMAMEPro DAT files now, not just Logiqx XML format.</li> <li>Added Germany, Ireland, Israel, Latin America, New Zealand, and Taiwan   locales.</li> <li>Fixed user input bugs.</li> <li>Fixed excessive looping in some sections.</li> <li>Fixed title exclusion bugs.</li> <li>Added more error checking.</li> <li>Removed <code>-re</code> and <code>-ra</code> flags until refactor is finished next version.</li> </ul>"},{"location":"changelog/#010","title":"0.10","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"clone-lists/","title":"Clone lists and metadata files","text":"<p>Clone lists are JSON files that primarily define relationships between titles that Retool doesn't automatically pick up. They're useful both for matching titles of completely different names, and for overriding some of the default choices that Retool makes. Additionally, they can add more accurate filter criteria like different categories to titles. They are manually curated, and pull requests are welcome.</p> <p>Metadata files are also JSON files, contain scraped data from the No-Intro and Redump sites, and are used to provide extra language information not included in DAT files. They are generated, and as a general rule shouldn't be manually edited.</p> <p>Clone lists are stored in the <code>clonelists</code> subfolder, and metadata files are stored in the <code>metadata</code> folder. Retool selects the correct clone list and metadata files for the loaded DAT by checking the <code>&lt;name&gt;</code> and <code>&lt;url&gt;</code> tags in the header of the DAT file, and then looking for a matching filename with the release group appended in the <code>clonelists</code> and <code>metadata</code> folders \u2014 for example, <code>Sony - PlayStation (Redump).json</code>. If a matching file isn't found, then only Retool's automatic clone detection is used.</p>"},{"location":"clone-lists/#update-clone-lists","title":"Update clone lists","text":"<p>Clone lists and metadata files are updated every now and then to match the latest DAT files. When processing new DAT files, it's a good idea to check for clone list updates first.</p> <p>Info</p> <p>Sometimes clone list functionality needs to be changed to support new features. To ensure things work as intended, make sure you're always running the latest version of Retool.</p> <p>To update clone lists and metadata files, complete the following instructions:</p>  GUI Command line <p>Click File &gt; Update clone lists.</p> <p>In your terminal or command prompt, enter the following command:</p> <pre><code>retool.py --update\n</code></pre> <p>Info</p> <p>Depending on your operating system, all Python commands in this guide might need to be prefixed with <code>python</code> or <code>python3</code> to work.</p>"},{"location":"clone-lists/#edit-and-create-clone-lists","title":"Edit and create clone lists","text":"<p>You can contribute to Retool's clone lists to help make them more accurate.</p>"},{"location":"contribute-clone-lists-categories/","title":"Categories","text":"<p>The <code>categories</code> array specifies titles that should have their categories reassigned. A category is a class of titles, like <code>Demos</code>, <code>Games</code>, and <code>Multimedia</code>. Multiple categories can be assigned to a title.</p> <p>A <code>categories</code> array looks similar to the following example:</p> <pre><code>\"categories\": [// (1)!\n{\n\"searchTerm\": \"Ace Combat 3 - Electrosphere - Direct Audio with AppenDisc\",// (2)!\n\"nameType\": \"short\",// (3)!\n\"categories\": [\"Audio\"]// (4)!\n},\n{\n\"searchTerm\": \"Arc the Lad III (Japan) (Demo 2)\",\n\"nameType\": \"full\",\n\"categories\": [\"Demos\", \"Multimedia\"]\n},\n{\n\"searchTerm\": \"Derby Stallion Magazine Furoku.*\",\n\"nameType\": \"regex\",\n\"categories\": [\"Coverdisc\"]\n}\n]\n</code></pre> <ol> <li>The categories array.</li> <li>The search term used when looking for a title in an input DAT file.</li> <li>What name type the search term is, so Retool can match it accurately against names in     the input DAT file.</li> <li>The categories to assign to the title if it's found in the input DAT file.</li> </ol> <p>Each object in the <code>categories</code> array can include the following keys:</p> <ul> <li> <p><code>searchTerm (str)</code>: The search term used when looking for a title in an input DAT file.</p> </li> <li> <p><code>nameType (str)</code>: Optional, defaults to <code>tagFree</code>. What name type the search term is,   so Retool can match it accurately against names in the input DAT file. Valid options   include:</p> <ul> <li> <p><code>full (str)</code>: The full name.</p> </li> <li> <p><code>short (str)</code>: The short name.</p> </li> <li> <p><code>regionFree (str)</code>: The region-free name.</p> </li> <li> <p><code>tagFree (str)</code>: The tag-free name.</p> </li> <li> <p><code>regex (str)</code>: A regex match on the full name.</p> </li> </ul> </li> <li> <p><code>categories (array[str])</code>: An array containing each category to assign to the title.   Retool overrides existing categories, so if you want the original category to be kept,   include it in the array.</p> </li> </ul>"},{"location":"contribute-clone-lists-description/","title":"Description","text":"<p>The <code>description</code> object holds information related to the clone list itself, and is always at the top of the file. It is mandatory to include.</p> <p>A <code>description</code> object looks similar to the following example:</p> <pre><code>\"description\": {\n\"name\": \"Sony - PlayStation (Redump)\",\n\"lastUpdated\": \"24 July 2022\",\n\"minimumVersion\": \"2.00\"\n}\n</code></pre> <p>A <code>description</code> object contains the following keys:</p> <ul> <li> <p><code>name (str)</code>: The system name and release group of the DAT the clone list is related to.</p> </li> <li> <p><code>lastUpdated (str)</code>: The last time the clone list was updated, in DD-MMMM-YYYY format.</p> </li> <li> <p><code>minimumVersion (str)</code>: The minimum version of Retool required to understand all the   features of the clone list.</p> </li> </ul> <p>The <code>minimumVersion</code> key is the only data in the description used by Retool, the rest is to make parsing and updating the clone list easier for humans.</p>"},{"location":"contribute-clone-lists-mias/","title":"MIAs","text":"<p>A missing in action (MIA) title is one that has had its sizes and hashes indexed, but the title itself hasn't been made available to the public.</p> <p>The <code>mias</code> array is only required in clone lists for Redump DAT files, as No-Intro specifies MIAs directly in its DAT files. MIAs are scraped from Redump's wiki, and as a general rule shouldn't be manually added or removed.</p> <p>An <code>mias</code> array looks similar to the following example:</p> <pre><code>\"mias\": [// (1)!\n\"Arc the Lad III (Japan) (Demo 2)\",// (2)!\n\"Cochons de GuerreLes (France) (Rev 1)\"\n]\n</code></pre> <ol> <li>The MIAs array.</li> <li>The full name of the title to search for in the input DAT file.</li> </ol> <p>MIAs only use full names to search for matching titles in the associated DAT file, and so an <code>mias</code> array only contains strings that match those full names.</p>"},{"location":"contribute-clone-lists-overrides/","title":"Overrides","text":"<p>The <code>overrides</code> array assigns titles different group and short names, manually bundling together specific games instead of using Retool's automatic grouping.</p> <p>Because Retool groups together titles with the same short name by default, this is particularly useful to work around the problem where games have the same short name, but are entirely different in content.</p> <p>For example, the Japanese version of King's Field was never released in the USA. Japan's King's Field II was released in the USA, however it was given the original game's name, King's Field. By default, Retool sees King's Field (USA) and King's Field (Japan), and incorrectly groups them together as the same title as they have the same short name, <code>King's Field</code>.</p> <p>To get around this, we can assign King's Field (Japan) a unique group and short name through the <code>overrides</code> array, to stop it being grouped automatically with King's Field (USA).</p> <p>An <code>overrides</code> array looks similar to the following example:</p> <pre><code>\"overrides\": [// (1)!\n{\n\"searchTerm\": \"King's Field (Japan)\",// (2)!\n\"newGroup\": \"King's Field Japan\"// (3)!\n},\n{\n\"searchTerm\": \"Mobile Suit Gundam - Version 2.0 (.*)\",\n\"nameType\": \"regex\",// (4)!\n\"newGroup\": \"Mobile Suit Gundam Veetwo\"// (5)!\n}\n]\n</code></pre> <ol> <li>The overrides array.</li> <li>The search term used when looking for a title in an input DAT file.</li> <li>The new group and short name to assign to the title, if it's found in an input DAT     file. This isn't the literal group name that is assigned, Retool takes this as a     base and then changes it based on its naming rules.</li> <li>What name type the search term is, so Retool can match it accurately against names in     the input DAT file.</li> <li>Don't put version strings or strings in parentheses in <code>newGroup</code> values, as they are     stripped.</li> </ol> <p>Each object in the <code>overrides</code> array can include the following keys:</p> <ul> <li> <p><code>searchTerm (str)</code>: The search term used when looking for a title in an input DAT file.</p> </li> <li> <p><code>nameType (str)</code>: Optional, defaults to <code>tagFree</code>. What name type the search term is,   so Retool can match it accurately against names in the input DAT file. Valid options   include:</p> <ul> <li> <p><code>full (str)</code>: The full name.</p> </li> <li> <p><code>short (str)</code>: The short name.</p> </li> <li> <p><code>regionFree (str)</code>: The region-free name.</p> </li> <li> <p><code>tagFree (str)</code>: The tag-free name.</p> </li> <li> <p><code>regex (str)</code>: A regex match on the full name.</p> </li> </ul> </li> <li> <p><code>newGroup (str)</code>: The new group and short name to assign to the title.</p> </li> </ul> <p>Caution</p> <p>To keep things easy, avoid parentheses <code>()</code> where possible in <code>newGroup</code> values. Additionally, avoid adding anything that looks like version string, for example, <code>v2.00</code>.</p> <p>You want to do this because the group and short names assigned to overridden titles aren't an exact copy of the <code>newGroup</code> value. Instead, the value is used as a basis to generate these names using Retool's naming rules.</p>"},{"location":"contribute-clone-lists-overrides/#override-conditions","title":"Override conditions","text":"<p>You can specify a <code>condition</code> as to whether or not an override should be implemented. The only condition supported is based on the user's region order. Conditions are rare, and are often only used to deal with clashes when outputting DAT files in legacy parent/clone format.</p> <p>A <code>condition</code> looks similar to the following example:</p> <pre><code>\"overrides\": [\n{\n\"searchTerm\": \"Tomb Raider III - (Adventures of|Les Aventures de) Lara Croft \\\\((Europe|France|Germany|Italy|Spain|USA)\\\\)(.*)?\",\n\"nameType\": \"regex\",\n\"newGroup\": \"Tomb Raider III - Adventures of Lara Croft Disc 2 International Version\",\n\"condition\": {// (1)!\n\"regionOrder\": {// (2)!\n\"higherRegions\": [\"Japan\", \"Asia\"],// (3)!\n\"lowerRegions\": [\"USA\", \"Europe\", \"France\", \"Germany\", \"Italy\", \"Spain\"],\n\"elseGroup\": \"Tomb Raider III - Adventures of Lara Croft\"// (4)!\n}\n},\n}\n]\n</code></pre> <ol> <li>The condition object.</li> <li>The <code>regionOrder</code> condition.</li> <li>If any of these regions is higher in the user order than all of the regions in the     <code>lowerRegions</code> array, then the condition is <code>True</code>.</li> <li>If the condition is <code>False</code>, set the group and short name to this group instead of     the <code>newGroup</code> value.</li> </ol> <p>A <code>condition</code> object can include the following keys:</p> <ul> <li> <p><code>regionOrder (object)</code>: Specifies to use the region order condition.</p> </li> <li> <p><code>higherRegions (array[str])</code>: If any of the regions in the <code>higherRegions</code> array is    higher in the user region order than all of the regions in the <code>lowerRegions</code> array,    then the condition is <code>True</code>.</p> </li> <li> <p><code>lowerRegions (array[str])</code>: If any of the regions in the <code>higherRegions</code> array is    higher in the user region order than all of the regions in the <code>lowerRegions</code> array,    then the condition is <code>True</code>.</p> </li> <li> <p><code>elseGroup (str)</code>: Optional, defaults to the automatic group and short names assigned by   Retool. If the condition is <code>False</code>, set the group and short name to this group instead   of the <code>newGroup</code> value.</p> </li> <li> <p><code>priority (int)</code>: Optional. If the condition is <code>True</code>, set the title to this clone list   priority. If the condition is <code>False</code>, set the clone list priority to <code>2</code>. A priority   directs Retool to choose one title over another if they are in the same region, and have   the same group name and short name.</p> </li> </ul>"},{"location":"contribute-clone-lists-pull-request/","title":"Prepare your pull request","text":"<p>Before you make a pull request for a clone list, make sure it observes the following standards.</p>"},{"location":"contribute-clone-lists-pull-request/#format-clone-lists","title":"Format clone lists","text":"<p>Clone lists follow a particular format to keep maintainence easy:</p> <ul> <li> <p>Valid JSON.</p> </li> <li> <p>Tabbed indenting.</p> </li> <li> <p>LF line endings.</p> </li> <li> <p>Top-level keys should be kept in the correct order.</p> </li> <li> <p>Object keys should be in the order shown in the clone list structure examples.</p> </li> <li> <p>Array contents should be in alphabetical order, sorted by an object's top key. This is   either going to be <code>group</code> or <code>searchTerm</code>.</p> </li> </ul>"},{"location":"contribute-clone-lists-pull-request/#test-clone-lists","title":"Test clone lists","text":"<p>Before submitting a pull request, it's important to test your changes to make sure they're correct.</p> <p>Test your clone list update against the newest version of a DAT from No-Intro or Redump, and enable the following settings:</p>  GUI Command line <ul> <li> <p>In the Global settings tab, click Options.</p> </li> <li> <p>Enable Report clone list warnings during processing and   Pause on clone list warnings.</p> </li> </ul> <p><code>--warnings --warningpause</code></p> <p>Run Retool on the DAT file, and fix your clone list until no warnings are given.</p>"},{"location":"contribute-clone-lists-pull-request/#make-your-pull-request","title":"Make your pull request","text":"<p>When you make your pull request, make sure to justify the choices you have made. For example, if you add new clones, provide a link or images that show the titles are clones.</p>"},{"location":"contribute-clone-lists-pull-request/#update-hashes","title":"Update hashes","text":"<p>Retool manages clone list updates via the <code>hash.json</code> file in the clone lists subfolder. When looking for updates, the newest <code>hash.json</code> is downloaded from from the location specified in <code>internal-config.json</code>:</p> <pre><code>\"cloneListMetadataUrl\": \"https://raw.githubusercontent.com/unexpectedpanda/retool-clonelists-metadata/\",\n</code></pre> <p>The SHA256 hashes in that file are then compared against the clone lists on the local disk. If a clone list hash doesn't match, then a new version of that file is downloaded from the same location as listed above.</p> <p>After your PR has been merged, the <code>hash.json</code> is updated by unexpectedpanda with the SHA256 hash of the updated or new clone lists.</p>"},{"location":"contribute-clone-lists-removes/","title":"Removes","text":"<p>The <code>removes</code> array lists all titles to force remove from the output DAT for that particular system. It should only be used if <code>overrides</code> or <code>variants</code> can't achieve the same result.</p> <p>Caution</p> <p>The <code>removes</code> array should almost never be used, as any titles listed are completely removed from Retool's consideration during processing, and their relationship with other titles is destroyed. This makes it particularly hard to keep track of relationships when updating clone lists, and can frustrate any traces you perform to debug issues.</p> <p>A <code>removes</code> array looks similar to the following example:</p> <pre><code>\"removes\": [\n{\n\"searchTerm\": \"King of Fighters 2000-2001, The (Europe)\",\n\"nameType\": \"full\"\n}\n]\n</code></pre> <p>Each object in the <code>removes</code> array can include the following keys:</p> <ul> <li> <p><code>searchTerm (str)</code>: The search term used when looking for a title in an input DAT file.</p> </li> <li> <p><code>nameType (str)</code>: Optional, defaults to <code>tagFree</code>. What name type the search term is,   so Retool can match it accurately against names in the input DAT file. Valid options   include:</p> <ul> <li> <p><code>full (str)</code>: The full name.</p> </li> <li> <p><code>short (str)</code>: The short name.</p> </li> <li> <p><code>regionFree (str)</code>: The region-free name.</p> </li> <li> <p><code>tagFree (str)</code>: The tag-free name.</p> </li> </ul> </li> </ul> <p>Note<p>Unlike other clone list features, the <code>regex</code> name type isn't supported for <code>removes</code>.</p> </p>"},{"location":"contribute-clone-lists-top-level-keys/","title":"Top level keys","text":"<p>Each clone list JSON file contains different top level keys that determine how Retool treats the titles in the related input DAT file. The keys are as follows:</p> <ul> <li> <p><code>description (obj[str, str])</code></p> </li> <li> <p><code>categories (array[obj])</code></p> </li> <li> <p><code>mias (array[str])</code></p> </li> <li> <p><code>overrides (array[obj])</code></p> </li> <li> <p><code>removes (array[obj])</code></p> </li> <li> <p><code>variants (array[obj])</code></p> </li> </ul> <p>All keys are optional, except for <code>description</code>. They should be kept in the same order in the clone list as shown in the previous list.</p>"},{"location":"contribute-clone-lists-variants/","title":"Variants","text":"<p>The <code>variants</code> array is where all the different regional names and variations for titles are stored, grouping titles together that Retool would otherwise miss. By default, Retool already groups together titles that have the same short name.</p> <p>A basic <code>variants</code> array looks similar to the following example:</p> <pre><code>\"variants\": [// (1)!\n{\n\"group\": \"Example Title\",// (2)!\n\"titles\": [// (3)!\n{\"searchTerm\": \"Example Title\"},// (4)!\n{\"searchTerm\": \"Exemple de Titre\"},\n{\"searchTerm\": \"Titolo di Esempio\"},\n{\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}// (5)!\n]\n}\n]\n</code></pre> <ol> <li>The variants array.</li> <li>The new group and short name to assign to the contained titles, if they're found in an     input DAT file.</li> <li>The <code>titles</code> array contains singular, standard titles that belong to this group.</li> <li>The search term used when looking for a title in an input DAT file.</li> <li>If there are two titles from the same region, a <code>priority</code> can determine which should     be selected. Lower numbers are higher priority. If no <code>priority</code> is specified, the     priority of the entry is <code>1</code>.</li> </ol> <p>Each object in the <code>variants</code> array can include the following keys:</p> <ul> <li> <p><code>group (str)</code>: The <code>group</code> value is used as the basis for a new group name    and short name for all of the titles in the object.</p> </li> <li> <p><code>titles (array[obj])</code>: Optional. Contains singular, standard titles that belong to the   group.</p> </li> <li> <p><code>supersets (array[obj])</code>: Optional. Contains singular titles that contain more content,   or for some reason are superior to standard versions. This might include, for example, a   Game of the Year edition, an all-in-one pack that bundles a game and all its DLC, or a   DVD version of a title that was previously released on multiple CDs.</p> </li> <li> <p><code>compilations (array[obj])</code>: Optional. Contains titles that in themselves contain   multiple titles. They might be from the same series of games, a single publisher, from   a single genre, or otherwise.</p> </li> </ul> <p>Caution</p> <p>The group and short names assigned to the contained titles aren't an exact copy of the top-level key. Instead, the key is used as a basis to generate these names. The rules for how these names are created are detailed in Retool's naming system.</p> <p>Each object in the <code>titles</code>, <code>supersets</code>, and <code>compilations</code> arrays can include the following keys:</p> <ul> <li> <p><code>searchTerm (str)</code>: The search term used when looking for a title in an input DAT file.</p> </li> <li> <p><code>nameType (str)</code>: Optional, defaults to <code>short</code>. What name type the search term is,   so Retool can match it accurately against names in the input DAT file. Valid options   include:</p> <ul> <li> <p><code>full (str)</code>: The full name.</p> </li> <li> <p><code>short (str)</code>: The short name.</p> </li> <li> <p><code>regionFree (str)</code>: The region-free name.</p> </li> <li> <p><code>tagFree (str)</code>: The tag-free name.</p> </li> <li> <p><code>regex (str)</code>: A regex match on the full name.</p> </li> </ul> </li> <li> <p><code>priority (int)</code>: Optional, defaults to <code>1</code>. Lower numbers are considered higher   priority, with <code>1</code> the highest priority. Typically, a title with a higher priority wins   when Retool is choosing a 1G1R title&gt; However, when priority is calculated in Retool's   process, and how it interacts across <code>titles</code>, <code>supersets</code>, and <code>compilations</code> arrays   can change the outcome. Read Example: working with priorities   for more information.</p> </li> <li> <p><code>titlePosition (int)</code>: Optional, defaults to <code>none</code>, <code>compilations</code> objects only. This   determines whether a title comes first, second, third, or later in a compilation's name.   This is only really useful for GameBoy Advance titles, as No-Intro's DAT differentiates   languages supported by each title in a compilation by using a <code>+</code> symbol. Still, it's   wise to include where possible in case that naming standard eventually makes it to other   DAT files.</p> </li> </ul>"},{"location":"contribute-clone-lists-variants/#ordering-variants-arrays","title":"Ordering variants arrays","text":"<p>The order of variants arrays is always:</p> <ol> <li> <p><code>titles</code></p> </li> <li> <p><code>supersets</code></p> </li> <li> <p><code>compilations</code>.</p> </li> </ol> <p>The <code>group</code> key in each array object should be based on one of the title names in the group, preferably from the USA version and in English. Some titles won't exist in all regions, so follow this order for the <code>group</code> name:</p> <ol> <li> <p>USA name in English</p> </li> <li> <p>United Kingdom name in English</p> </li> <li> <p>European name in English</p> </li> <li> <p>Any other region in English</p> </li> <li> <p>Japanese name</p> </li> <li> <p>Spanish name</p> </li> <li> <p>Portuguese name</p> </li> <li> <p>French name</p> </li> <li> <p>German name</p> </li> <li> <p>Whatever name is available</p> </li> </ol> <p>To ease maintenance, make sure the objects inside the <code>titles</code>, <code>compilations</code>, and <code>supersets</code> arrays are ordered by priority, and then alphabetically within those priorities.</p> <p>For example, this is correct:</p> <pre><code>\"variants\": [\n{\n\"group\": \"Example Title\",\n\"titles\": [\n{\"searchTerm\": \"Example Title\"},\n{\"searchTerm\": \"Exemple de Titre\"},\n{\"searchTerm\": \"Titolo di Esempio\"},\n{\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n]\n}\n]\n</code></pre> <p>This is incorrect:</p> <pre><code>\"variants\": [\n{\n\"group\": \"Example Title\",\n\"titles\": [\n{\"searchTerm\": \"Example Title\"},\n{\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2},\n{\"searchTerm\": \"Titolo di Esempio\"},\n{\"searchTerm\": \"Exemple de Titre\"}\n]\n}\n]\n</code></pre> <p>Warning</p> <p>Avoid setting a <code>searchTerm</code> with the same name as its <code>group</code> to a lower priority. For example:</p> <pre><code>{\n\"group\": \"Title\",\n\"titles\": [\n{\"searchTerm\": \"Title Director's Cut\"}\n{\"searchTerm\": \"Title\", \"priority\": 2}\n]\n}\n</code></pre> <p>In this scenario, Retool sees the first entry <code>Title Director's Cut</code>, and goes looking for titles with the short name <code>title director's cut</code>. When it finds a match, it changes that title's short name to match the group, <code>title</code>.</p> <p>When it gets to the second entry, <code>Title</code>, it goes looking for titles with the short name <code>title</code>... but that's what we just renamed the Director's Cut short name to. Everything ends up being assigned a priority of 2 as a result.</p> <p>If you run into this situation, the easiest solution is to rename the group to match the higher priority title:</p> <pre><code>{\n\"group\": \"Title Director's Cut\",\n\"titles\": [\n{\"searchTerm\": \"Title Director's Cut\"}\n{\"searchTerm\": \"Title\", \"priority\": 2}\n]\n}\n</code></pre>"},{"location":"contribute-clone-lists-variants/#example-working-with-titles","title":"Example: working with titles","text":"<p>If we have the following title names in a DAT file, that are all the same title across different regions:</p> <pre><code>Example Title (USA)\nExample Title Budget Edition (USA)\nExample Title (Europe)\nExemple de Titre (France)\nTitolo di Esempio (Italy)\n</code></pre> <p>And a user selects the following region order:</p> <pre><code>USA\nEurope\nUnited Kingdom\nFrance\nItaly\n</code></pre> <p>Then Retool automatically links together Example Title (USA) and Example Title (Europe), as they have the same short name, <code>example title</code>. However it misses the other titles, as by default they have different short names.</p> <p>A <code>variants</code> object like the following example links them all together:</p> <pre><code>\"variants\": [\n{\n\"group\": \"Example Title\",\n\"titles\": [\n{\"searchTerm\": \"Example Title\"},\n{\"searchTerm\": \"Exemple de Titre\"},\n{\"searchTerm\": \"Titolo di Esempio\"},\n{\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n]\n}\n]\n</code></pre> <p>Because no <code>nameType</code> is specified in each title object, Retool assumes the <code>searchTerm</code> is a short name, and looks in the related DAT for names that have the same short name. When it finds those titles, it assigns the same group and short name to them, <code>example title</code>, and then Retool knows they are related.</p> <p>The <code>priority</code> of <code>2</code> for <code>Example Title Budget Edition</code> indicates that when Retool is processing the USA region, to select Example Title (USA) over Example Title Budget Edition (USA) when Retool considers clone list priority. There are other factors that might eliminate a title before Retool gets to clone list priority.</p> <p>In this example, because the user has set USA first in the region order, then Example Title (USA) is selected as the 1G1R title, and the others are discarded.</p>"},{"location":"contribute-clone-lists-variants/#example-working-with-supersets","title":"Example: working with supersets","text":"<p>Let's take the titles example, but add another title into the mix: Example Title - Game of the Year Edition (United Kingdom).</p> <pre><code>Example Title (USA)\nExample Title Budget Edition (USA)\nExample Title - Game of the Year Edition (United Kingdom)\nExample Title (Europe)\nExemple de Titre (France)\nTitolo di Esempio (Italy)\n</code></pre> <p>This edition contains the latest version of the game, plus all of its DLC, but was never released in the USA or Europe. If the user is an English speaker, then how do we make sure this title gets selected as the superior version of a game, even if the USA or Europe is higher up their region order? With the <code>supersets</code> array.</p> <pre><code>\"variants\": [\n{\n\"group\": \"Example Title\",\n\"titles\": [\n{\"searchTerm\": \"Example Title\"},\n{\"searchTerm\": \"Exemple de Titre\"},\n{\"searchTerm\": \"Titolo di Esempio\"},\n{\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n],\n\"supersets\": [\n{\"searchTerm\": \"Example Title - Game of the Year Edition\"}\n]\n}\n]\n</code></pre> <p>The objects in the <code>supersets</code> array list supersets. By default, supersets look at language support over region order. If a superset supports the top language found in a group of titles (in this example, that's English), then it's selected over other standard titles in higher regions as it's considered superior.</p> <p>In this example, because no language order is included but USA is listed first, Retool infers a preference for English, finds the superset Example Title - Game of the Year Edition (United Kingdom), and selects it as the 1G1R title above the standard USA title, as it supports the same language and is considered superior due to having more content.</p> <p>Note</p> <p>A user can force adherence to region order  with the Prefer regions over languages option. In that scenario, Example Title (USA) is selected at the cost of losing the extra content in Example Title - Game of the Year Edition (United Kingdom).</p> <p>Supersets are also useful to manage things like DVD releases of titles that were previously distributed on multiple CDs. For example, if a DAT contains the following title names, all of which represent the same title:</p> <pre><code>Example Title (Disc 1) (USA)\nExample Title (Disc 2) (USA)\nExample Title (Disc 3) (USA)\nBeispieltitel (Disc 1) (Germany)\nBeispieltitel (Disc 2) (Germany)\nBeispieltitel (Disc 3) (Germany)\nExample Title (USA)\n</code></pre> <p>And Example Title (USA) is the DVD version of the three-disc CD release Example Title and Beispieltitel, then you can set up a <code>variants</code> object as follows:</p> <pre><code>\"variants\": [\n{\n\"group\": \"Example Title (Disc 1)\",\n\"titles\": [\n{\"searchTerm\": \"Example Title (Disc 1)\"},\n{\"searchTerm\": \"Beispieltitel (Disc 1)\"}\n],\n\"supersets\": [\n{\"searchTerm\": \"Example Title\"}\n]\n},\n{\n\"group\": \"Example Title (Disc 2)\",\n\"titles\": [\n{\"searchTerm\": \"Example Title (Disc 2)\"},\n{\"searchTerm\": \"Beispieltitel (Disc 2)\"}\n],\n\"supersets\": [\n{\"searchTerm\": \"Example Title\"}\n]\n},\n{\n\"group\": \"Example Title (Disc 3)\",\n\"titles\": [\n{\"searchTerm\": \"Example Title (Disc 3)\"},\n{\"searchTerm\": \"Beispieltitel (Disc 3)\"}\n],\n\"supersets\": [\n{\"searchTerm\": \"Example Title\"}\n]\n}\n]\n</code></pre> <p>Note that the <code>Example Title</code> superset is in all three groups. In this scenario, if a user selects USA as their highest region, then Example Title (USA) is selected as the 1G1R title over the original, multidisc CD version. If they select Germany, then the three German discs are chosen instead.</p>"},{"location":"contribute-clone-lists-variants/#example-working-with-compilations","title":"Example: working with compilations","text":"<p>Individual titles and compilations have their relationships defined in clone lists. When Retool considers these titles and looks to deduplicate, it chooses a solution that results in as many individual titles as possible being selected. This is because patches and retro achievements tend to only be available for individual titles, and compilation filenames often don't tell you what titles they contain, making your collection less browsable.</p> <p>This method results in some duplicates being left in the output. For example, when Retool analyzes the following titles:</p> <ul> <li>Title A (USA)</li> <li>Title B (USA)</li> <li>Title A + Title C (USA)</li> </ul> <p>It includes them all in the output, despite that not being the most optimal space saving solution (which would remove Title A (USA)). This is because when comparing the following titles:</p> <ul> <li>Title A (USA)</li> <li>Title A + Title C (USA)</li> </ul> <p>Title A (USA) wins for the Title A selection as it's an individual title (and preferred over compilation versions), and Title A + Title C (USA) wins for Title C as that title is only contained in the compilation, a standalone variation doesn't exist.</p> <p>Compilations in a <code>variants</code> array are handled in a similar way to the following example:</p> <pre><code>\"variants\": [\n{\n\"group\": \"3-D Ultra Pinball\",\n\"titles\": [\n{\"searchTerm\": \"3-D Ultra Pinball\"}\n],\n\"compilations\": [\n{\"searchTerm\": \"3-D Ultra Pinball &amp; Trophy Bass\", \"titlePosition\": 1}\n]\n},\n{\n\"group\": \"Trophy Bass\",\n\"compilations\": [\n{\"searchTerm\": \"3-D Ultra Pinball &amp; Trophy Bass\", \"titlePosition\": 2}\n]\n}\n]\n</code></pre> <p>Note that <code>3-D Ultra Pinball &amp; Trophy Bass</code> belongs to both the <code>3-D Ultra Pinball</code> and <code>Trophy Bass</code> groups. During processing, Retool splits compilations into virtual versions of their consituent titles. This means that when you add a compilation to a variant object, it's only being judged on the individual title associated with that group, not all titles in the compilation.</p> <p>As far as Retool is concerned in this example, <code>3-D Ultra Pinball &amp; Trophy Bass</code> in the <code>3-D Ultra Pinball</code> group is just another version of 3-D Ultra Pinball, and <code>3-D Ultra Pinball &amp; Trophy Bass</code> in the <code>Trophy Bass</code> group is just another version of Trophy Bass. It's important to list a compilation in all groups it's related to, even if a standalone title doesn't exist. This way Retool knows which titles make up the compilation and can make more accurate choices.</p> <p>In this example, if a related DAT contains the following title names:</p> <pre><code>3-D Ultra Pinball (Europe)\n3-D Ultra Pinball &amp; Trophy Bass (USA)\n</code></pre> <p>And a user selects the following region order:</p> <pre><code>USA\nEurope\n</code></pre> <p>Then Retool selects 3-D Ultra Pinball &amp; Trophy Bass (USA) as the single 1G1R title for both 3-D Ultra Pinball and Trophy Bass, as that solution includes the USA version of the titles, and the least duplication.</p> <p>However, if a user selects the following region order:</p> <pre><code>Europe\nUSA\n</code></pre> <p>Then Retool selects 3-D Ultra Pinball (Europe) for 3-D Ultra Pinball as it's an individual title in a preferred region, while 3-D Ultra Pinball &amp; Trophy Bass (USA) is chosen for Trophy Bass as a standalone version of that title doesn't exist, and the compilation is the only remaining option.</p>"},{"location":"contribute-clone-lists-variants/#example-working-with-priorities","title":"Example: working with priorities","text":"<p>It's useful to understand how priorities work across the <code>titles</code>, <code>supersets</code>, and <code>compilations</code> arrays.</p>"},{"location":"contribute-clone-lists-variants/#titles","title":"Titles","text":"<p>If you use <code>priority</code> in a titles array, it's taken into account for titles in the same region, with same group and short name. The <code>priority</code> does not take effect for titles in different regions.</p> <p>For example, if a DAT file contains the following title names:</p> <pre><code>Example Title (USA)\nExample Title Budget Edition (USA)\nExample Title (Europe)\n</code></pre> <p>And the following variants array is in the related clone list:</p> <pre><code>{\n\"variants\": [\n{\n\"group\": \"Example Title\",\n\"titles\": [\n{\"searchTerm\": \"Example Title\"}\n{\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n]\n}\n]\n}\n</code></pre> <p>Then both Example Title (USA) and Example Title (Europe) receive a priority of 1, as no priority has been specified. Example Title Budget Edition (USA) is assigned a priority of 2 as defined by the clone list.</p> <p>Because Retool first bundles games from the same region together for comparison, Example Title (USA) and Example Title Budget Edition (USA) are compared, and the latter is dropped because it has a lower priority of 2.</p> <p>Afterwards cross-region comparisons are made, so Example Title (USA) and Example Title (Europe) are compared, however priority is not taken into account here, only things like user region and language order.</p>"},{"location":"contribute-clone-lists-variants/#supersets","title":"Supersets","text":"<p>While the behavior for priorities in supersets is similar to that in titles, superset priorities are only compared against other superset priorities, and compilation priorities.</p> <p>For example, if a DAT file contains the following title names:</p> <pre><code>Example Title (USA)\nExample Title Budget Edition (USA)\nExample Title - Special Edition (Europe)\nExample Title - Super Special Edition (Europe)\n</code></pre> <p>A user selects the following region order:</p> <pre><code>USA\nEurope\n</code></pre> <p>And the following variants array is in the related clone list:</p> <pre><code>{\n\"variants\": [\n{\n\"group\": \"Example Title\",\n\"titles\": [\n{\"searchTerm\": \"Example Title\"}\n{\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n],\n\"supersets\": [\n{\"searchTerm\": \"Example Title - Super Special Edition\"}\n{\"searchTerm\": \"Example Title - Special Edition\", \"priority\": 2}\n]\n}\n]\n}\n</code></pre> <p>Then the following happens:</p> <ol> <li> <p>Because the supersets are in English (and English is this user's highest language in     their implied language order), they get selected over the standard titles even though     they are from Europe, a lower ordered region. This has nothing to do with priority     set in the clone list \u2014 it's just how supersets work.</p> </li> <li> <p>Example Title - Super Special Edition (Europe) then gets chosen over     Example Title - Special Edition, as the latter has a lower priority.</p> </li> </ol>"},{"location":"contribute-clone-lists-variants/#compilations","title":"Compilations","text":"<p>Priorities affect compilations slightly differently, as Retool splits compilations into individual virtual titles to compare against the other titles.</p> <p>For example, if a DAT file contains the following title names:</p> <pre><code>Example Title (USA)\nExample Title (Europe)\nExample Title 2 - Special Edition (USA)\nExample Title 1 &amp; 2 (Europe)\n</code></pre> <p>A user selects the following region order:</p> <pre><code>USA\nEurope\n</code></pre> <p>And the following variants array is in the related clone list:</p> <pre><code>{\n\"variants\": [\n{\n\"group\": \"Example Title\",\n\"titles\": [\n{\"searchTerm\": \"Example Title\"}\n],\n\"compilations\": [\n{\"searchTerm\": \"Example Title 1 &amp; 2\"}\n]\n},\n{\n\"group\": \"Example Title 2\",\n\"titles\": [\n{\"searchTerm\": \"Example Title 2 - Special Edition\"}\n],\n\"compilations\": [\n{\"searchTerm\": \"Example Title 1 &amp; 2\", \"priority\": 2}\n]\n}\n]\n}\n</code></pre> <p>Then the following happens with the compilations:</p> <ol> <li> <p>Retool looks at the <code>Example Title</code> group, and finds Example Title 1 &amp; 2 (Europe)     in the DAT via the compilations search term <code>Example Title 1 &amp; 2</code>.</p> </li> <li> <p>That compilation is then assigned a virtual name that matches the group name, and     includes region and language information: :V: Example Title (Europe) (En). This     effectively splits out that indvidual title from the compilation for comparison,     meaning the second title in the compilation isn't considered when comparing titles in     this group. Because no <code>priority</code> is defined, the virtual title is assigned a priority     of 1.</p> </li> <li> <p>Retool looks at the <code>Example Title 2</code> group, and finds Example Title 1 &amp; 2 (Europe)     in the DAT via the compilations search term <code>Example Title 1 &amp; 2</code>.</p> </li> <li> <p>Although it's the same compilation as before, it's assigned a virtual name that     matches the <code>Example Title 2</code> group name: :V: Example Title 2 (Europe) (En). This     means the first title in the compilation isn't considered when comparing titles in     this group. The virtual title is assigned a priority of 2, as specified in the clone     list.</p> </li> <li> <p>Retool compares the virtual compilation titles against the individual titles in the     same groups:</p> <ul> <li> <p>Example Title (USA) is compared against :V: Example Title (Europe) (En). The USA   title wins due to region priority.</p> </li> <li> <p>Example Title 2 - Special Edition (USA) is compared against   :V: Example Title 2 (Europe) (En). The latter is discarded because it has a lower   priority (which is assessed before region order).</p> </li> <li> <p>Ultimately Example Title (USA) and Example Title 2 - Special Edition (USA)   become the 1G1R titles, and Example Title 1 &amp; 2 (Europe) is discarded.</p> </li> </ul> </li> </ol> <p>Superset priorities are compared directly against compilation priorities, just like title priorities are.</p>"},{"location":"contribute-clone-lists/","title":"Create and edit clone lists","text":"<p>Contributing to Retool's clone lists directly involves code and being familiar with Git and GitHub. If that's not something you're interested in, you can still request clone list changes by filing an issue.</p> <p>If you want to contribute directly, fork the clone lists and metadata repository, read the following guidelines, make your changes, and then submit a pull request.</p>"},{"location":"contribute-clone-lists/#before-you-begin","title":"Before you begin","text":"<p>If you want to create or edit clone lists, you need to understand JSON and the following data structures:</p> <ul> <li>Key/value pairs</li> <li>Strings</li> <li>Integers</li> <li>Arrays</li> <li>Objects</li> </ul> <p>It also helps to understand Retool's terminology, and the different names it assigns to titles to help match and group them together accurately.</p>"},{"location":"contribute-clone-lists/#titles-that-retool-automatically-detects-as-clones","title":"Titles that Retool automatically detects as clones","text":"<p>Before referencing clone lists, Retool parses a DAT file and creates objects for all of its titles. If multiple titles have the same group name and short name, Retool assumes they're related to each other.</p> <p>Names should only be added to clone lists in the following situations:</p> <ul> <li> <p>To link together titles that ordinarily would have different group/short names due to   regional naming, for example Indigo Prophecy and Fahrenheit.</p> </li> <li> <p>To override Retool's default grouping.</p> </li> <li> <p>To assign categories to titles.</p> </li> <li> <p>To designate a title as missing in action (MIA).</p> </li> </ul>"},{"location":"contribute-clone-lists/#clone-list-location-and-names","title":"Clone list location and names","text":"<p>Clone lists are found by default in the <code>clonelists</code> subfolder. What subfolder Retool looks for clone lists in is defined in <code>config/internal-config.json</code> in the <code>cloneLists</code> object:</p> <pre><code>\"cloneLists\": {\n\"localDir\": \"clonelists\"\n}\n</code></pre> <p>Retool selects the correct clone list and metadata files for the loaded DAT file by checking the <code>&lt;name&gt;</code> and <code>&lt;url&gt;</code> tags in the header of the DAT file, and then looking for a matching filename with the release group appended in the clone lists and metadata folders. For example, for Redump's Sony PlayStation DAT file, the <code>&lt;name&gt;</code> is <code>Sony - PlayStation</code>. Therefore Retool looks for the clone list <code>Sony - PlayStation (Redump).json</code> in the clone lists folder. If a matching file isn't found, then only Retool's automatic clone detection is used.</p>"},{"location":"contribute-clone-lists/#reference-sites","title":"Reference sites","text":"<p>The following sites can help in identifying titles that are related to each other.</p> <p>DAT release groups:</p> <ul> <li> <p>No-Intro    Lists clones on individual title pages.</p> </li> <li> <p>Redump    Useful for localized title names that use non-Latin characters like Japanese, Chinese,   Korean, and Russian. You can then use these in Google Search   or Translate to help make connections. Sometimes   there's useful information in the comments of title pages.</p> </li> </ul> <p>Databases:</p> <ul> <li>Atari Mania (Atari titles)</li> <li>GameTDB</li> <li>LaunchBox Games Database</li> <li>Moby Games</li> <li>Online Games DatenBank</li> <li>PlayStation DataCenter (PlayStation, PlayStation 2,   and PlayStation Portable titles)</li> <li>PSCX2 Wiki (PlayStation 2 titles)</li> <li>Renascene (PlayStation Vita titles)</li> <li>Retroplace</li> <li>Sega Retro (Sega console titles)</li> <li>SMS Power (Sega 8-bit console titles)</li> <li>The PC Engine Software Bible (NEC PC Engine/TurboGrafx-16   titles)</li> <li>The Cutting Room Floor</li> <li>The World of CDI (Philips CD-I titles)</li> <li>VDGB</li> <li>VGM</li> </ul> <p>General sites and retail stores:</p> <ul> <li>Amazon.jp</li> <li>PlayAsia</li> <li>Wikipedia</li> <li>YouTube</li> </ul>"},{"location":"contribute-metadata-files/","title":"Edit metadata files","text":"<p>Metadata files contain additional language data for titles. They are periodically generated from Redump and No-Intro databases, and should not be manually updated.</p> <p>To make a change, don't submit a PR. Instead, report the issue upstream:</p>"},{"location":"contribute-metadata-files/#no-intro","title":"No-Intro","text":"<ol> <li> <p>Go to Dat-o-matic.</p> </li> <li> <p>Select the system the title is on.</p> </li> <li> <p>Do a search for the archive name of the title with the issue.</p> </li> <li> <p>Click on the title's name to open its page.</p> </li> <li> <p>Click New ticket, fill out the form, and then submit it.</p> </li> </ol>"},{"location":"contribute-metadata-files/#redump","title":"Redump","text":"<p>Go to Redump's Fixes &amp; additions forum, and request the issue be fixed.</p>"},{"location":"dat-support/","title":"DAT support","text":"<p>While Retool understands both LogiqX and CLRMAMEPro-formatted DAT files, it only has support for DAT files released by certain groups based on their naming conventions.</p>"},{"location":"dat-support/#supported","title":"Supported","text":"<p>DAT files are supported from the following groups.</p>"},{"location":"dat-support/#no-intro","title":"No-Intro","text":"<p>No-Intro DAT files are supported, in both LogiqX(ish) and their newer XSD-validated format.</p> <p>Clone lists exist for the more popular sets, and contributions are always welcome for both maintenance and providing new lists.</p>"},{"location":"dat-support/#redump","title":"Redump","text":"<p>Redump DAT files are supported in both LogiqX(ish) and CLRMAMEPro formats. DAT files derived from Redump that keep the same title names, such as those from dats.site, are also supported.</p> <p>Clone lists exist for most sets except IBM PC Compatible, which is too huge and has far too much activity without community contribution to maintain.</p>"},{"location":"dat-support/#unsupported","title":"Unsupported","text":"<p>While anything not in the supported list should be considered unsupported, there are two sets in particular that need to be called out, as from time to time there are requests to add support. It is unlikely Retool will ever support these DAT files.</p>"},{"location":"dat-support/#mame-and-other-arcade-sets","title":"MAME and other arcade sets","text":"<p>Filtering MAME DAT files is an entirely different beast, and a massive undertaking to do well. The naming scheme is different, the things you can filter on are different, and whether arcade or software list support, huge amounts of data need to be parsed to do it justice. It's more than enough work just keeping up with No-Intro and Redump.</p> <p>Thankfully there are other options for MAME filtering:</p> <ul> <li>Do a web search for <code>All killer no filler</code>. These are lists and tools that filter MAME's   ROMs to only the top games as defined by their authors.</li> <li>Arcade Manager can handle filtering MAME   sets, including removing bad and non-working ROMs, and comes with built-in lists for the   \"top\" sets and \"all killer no filler\".</li> <li>RomLister and   Lightspeed Game List Generator   haven't been updated for a long time, but there are a lot of options in them to sate your   filtering desires.</li> </ul>"},{"location":"dat-support/#tosec","title":"TOSEC","text":"<p>While TOSEC DAT files are in LogiqX format, support for their naming system hasn't been built into Retool.</p> <p>Support is technically possible, but largely pointless to implement without also supplying clone lists. This isn't a small effort \u2014 with over 3,000 TOSEC DAT files as of 2022, and with TOSEC's tendency to include many, many variants, there'd have to be significant community effort not only to bridge that gap, but to test the clone lists too. At this point in time, the momentum doesn't exist to justify the work.</p>"},{"location":"download/","title":"Download and install","text":"<p>Retool is supported on  Windows 10+,  Ubuntu 20+, and  macOS 10+ on x86 processors. It likely works on M1 MacBooks too, however I don't own the hardware to test it.</p> <p>How you download and install Retool will depend on your level of comfort with code, and the operating system you use.</p>  Windows binary (GUI only) Git and Python (GUI and CLI) <p>If you're a Windows user and want the easiest path, you can get Retool going in a few easy steps:</p> <ol> <li> <p>Download the Windows binary ZIP file:</p> <p>retool-2.01.4-win-x86-64.zip</p> <p><code>SHA256: 9ae79cf49134d144449e280bea2943113b2a78bf19ccf58e1a37337b7bbcc83e</code></p> </li> <li> <p>Extract the ZIP file to a folder of your choosing.</p> </li> <li> <p>In that folder, double click <code>retoolgui.exe</code>. A Command Prompt window opens, which     shows the output when Retool is running. Don't close it, as this also closes the     GUI.</p> </li> <li>Click File &gt; Update clone lists to download the latest clone lists and metadata     files.</li> </ol> <p>Note</p> <p>Retool's binary is UPX packed to reduce its size on disk. This means that some over-zealous anti-virus software might pick it up as a false positive. If the SHA256 of the downloaded ZIP matches the checksum on this page, you're likely safe to mark an exception in your anti-virus software.</p> <p>If you're more comfortable with the command line, or are running on a non-Windows platform, then this option is for you.</p> <ol> <li> <p>Download and install Python 3.10 or higher, if you     haven't already.</p> </li> <li> <p>Clone Retool from its repository:</p> <pre><code>git clone https://github.com/unexpectedpanda/retool.git\n</code></pre> </li> <li> <p>Install Retool's dependencies, either with Pip or     Poetry:</p> PipPoetry <pre><code>pip install alive-progress lxml psutil pyside6 strictyaml validators\n</code></pre> <ol> <li> <p>Install Poetry if you haven't already:</p> <pre><code>pip install poetry\n</code></pre> </li> <li> <p>Install Retool's dependencies:</p> <pre><code>poetry install\n</code></pre> </li> <li> <p>Enter the Poetry virtual environment:</p> <pre><code>poetry shell\n</code></pre> </li> </ol> <p>Info</p> <p>On systems that have both Python 2 and 3 installed, you might need to run <code>pip3</code> instead of <code>pip</code>.</p> </li> <li> <p>Download the latest clone lists and metadata files:</p> <pre><code>retool.py --update\n</code></pre> <p>Info</p> <p>On some operating systems you might need to prefix Python files with <code>python3</code> or <code>python</code> to run them.</p> </li> <li> <p>You can now run <code>retool.py</code> or <code>retoolgui.py</code> with Python.</p> </li> </ol> <p>Linux issues</p> <p>If you get a libxcb error in Linux when launching <code>retoolgui.py</code>, this fixed the problem for me in Ubuntu 20.04:</p> <pre><code>sudo apt-get install libxcb-randr0-dev \\\n        libxcb-xtest0-dev libxcb-xinerama0-dev libxcb-shape0-dev libxcb-xkb-dev\n</code></pre>"},{"location":"how-to-use-retool-cli/","title":"How to use Retool CLI","text":"<p>What follows is a step-by-step walkthrough of using Retool CLI and all of its features. If you're new to DAT management, it might be beneficial to spend some time reading about terminology, and after you've filtered a DAT file with Retool, check out the help documentation for your favorite ROM manager to learn how to use it.</p> <p>Info</p> <p>Depending on your operating system, all Python commands in this guide might need to be prefixed with <code>python</code> or <code>python3</code> to work.</p>"},{"location":"how-to-use-retool-cli/#get-started","title":"Get started","text":"<p>The following sections cover the initial setup for Retool.</p>"},{"location":"how-to-use-retool-cli/#download-dat-files-and-retool","title":"Download DAT files and Retool","text":"<p>Before you can filter DAT files, they need to be on your hard drive.</p> <ol> <li> <p>Download the DAT files for the system you want to verify. Retool supports DAT files     from the following groups:</p> <ul> <li> <p>No-Intro</p> </li> <li> <p>Redump</p> </li> </ul> <p>You might need to extract a ZIP file containing the DAT files to access them.</p> </li> <li> <p>Download Retool, and follow the installation and update instructions for     your platform.</p> </li> </ol>"},{"location":"how-to-use-retool-cli/#basic-usage","title":"Basic usage","text":"<p>In your terminal/Command Prompt, change the folder to where Retool is installed, and then run the following command:</p> <pre><code>retool.py -h\n</code></pre> <p>This shows all the options available to you.</p> <p>To process a DAT file without any options, enter the following command:</p> <pre><code>retool.py PATH_TO_DAT_FILE</code></pre>"},{"location":"how-to-use-retool-cli/#the-user-configyaml-file","title":"The user-config.yaml file","text":"<p>This file is user-editable, and contains the following configuration options for Retool. By default it is found in the <code>config</code> folder. See an example of a <code>user-config.yaml</code> file.</p>"},{"location":"how-to-use-retool-cli/#language-order","title":"Language order","text":"<p>Optional. This is defined by the <code>language order</code> array. If you leave all languages commented out (preceded by a <code>#</code>), then Retool includes all languages during processing, and uses an implied language order derived from your region order.</p> <p>Order is important. For example, if you have the following title names in an input DAT file:</p> <pre><code>This is a title (Europe) (En,Fr,De)\nThis is a title (Europe) (En,Fr,De,Es,It)\nThis is a title (Europe) (Es)\nThis is a title (Europe) (Fr,De,Es,It)\n</code></pre> <p>And the following language order:</p> <ol> <li> <p>English</p> </li> <li> <p>Spanish</p> </li> <li> <p>Italian</p> </li> </ol> <p>Then the following title is selected as the 1G1R title:</p> <pre><code>This is a title (Europe) (En,Fr,De,Es,It)\n</code></pre> <p>And these titles are removed from consideration:</p> <pre><code>This is a title (Europe) (Es)\nThis is a title (Europe) (Fr,De,Es,It)\nThis is a title (Europe) (En,Fr,De)\n</code></pre> <p>This is because <code>This is a title (Europe) (En,Fr,De,Es,It)</code> supports all three languages.</p> <p>The array doesn't just define an order \u2014 languages are also treated like filters. This means if you only add <code>English</code> as a language, for example, then only titles that support English or have unknown languages are included by Retool in the final result.</p> <p>The <code>language order</code> array is only used by Retool if you pass the <code>-l</code> command line option, otherwise it assumes you want all languages.</p>"},{"location":"how-to-use-retool-cli/#region-order","title":"Region order","text":"<p>This is defined by the <code>region order</code> array. At least one region must be uncommented.</p>"},{"location":"how-to-use-retool-cli/#video-order","title":"Video order","text":"<p>This is defined by the <code>video order</code> array. Video standards are processed after regions, languages, and many other criteria like versions and supersets. Additionally, a video standard is only determined by an explicit tag in a title's name, for example <code>This is a title (World) (NTSC)</code>. As such, the video order is effectively only used as a tie-breaker when choosing between two titles that both specify a video standard in their names. Don't expect to get NTSC titles if you prioritize NTSC as a video standard, but put Europe first in your region order.</p>"},{"location":"how-to-use-retool-cli/#list-prefix-and-suffix","title":"List prefix and suffix","text":"<p>Optional. Defined by the <code>list prefix</code> and <code>list suffix</code> arrays. Only one entry is permitted per array. If you are using the <code>--listnames</code> option, this defines the prefix and suffix to add to each line. If a prefix starts with <code>http://</code>, <code>https://</code>, or <code>ftp://</code>, then each line in the output file is URL encoded.</p>"},{"location":"how-to-use-retool-cli/#global-exclude-and-include-overrides","title":"Global exclude and include overrides","text":"<p>Optional. Defined by the <code>exclude</code> and <code>include</code> arrays.</p> <p>You can override the default choices Retool makes by force including or excluding titles whose names match a certain string. Each string must be on its own line.</p> <p>An excluded title forces Retool to act as if the title was never in the input DAT in the first place. This means that an exclude can force Retool to select a different title when choosing 1G1R titles.</p> <p>An included title makes it into the output DAT regardless of Retool's choices. Even if Retool has removed a title as part of the filtering process, a matching include brings it back. Only a post filter can remove an included title.</p> <p>There are rules when it comes to overrides, and how they interact at the global settings and system settings level:</p> <ul> <li>System includes override all excludes.</li> <li>System excludes override global includes.</li> <li>Global includes override global excludes.</li> </ul> <p>To read about the different ways you can match titles, see Override and post filter match types.</p> <p>Note</p> <p>If Retool has genuinely missed a relationship between titles, please don't just create an override \u2014 create an issue too so the clone lists or Retool can be updated.</p>"},{"location":"how-to-use-retool-cli/#post-filters","title":"Post filters","text":"<p>Optional. Defined by the <code>filters</code> array.</p> <p>After Retool has finished processing, you can filter the results to only include titles that match the text you provide. Each match must be on its own line.</p> <p>To read about the different ways you can match titles, see Override and post filter match types.</p>"},{"location":"how-to-use-retool-cli/#override-and-post-filter-match-types","title":"Override and post filter match types","text":"<p>There are three different match types for overrides and post filters:</p> <ul> <li>Plain text indicates a partial string match.</li> <li>A prefix of <code>/</code> indicates a regular expression match.</li> <li>A prefix of <code>|</code> indicates a full string match.</li> </ul> <p>Additionally, you can wrap any of these strings in <code>&lt;&gt;</code> when using overrides to also include or exclude any match's related clones. Wrapping strings in <code>&lt;&gt;</code> is not supported for post filters.</p> <p>Warning</p> <p>If you need to use a backslash (<code>\\</code>) or double quote (<code>\"</code>) in your overrides, you must escape them with a backslash. For example:</p> <ul> <li><code>\\\\</code></li> <li><code>\\\"</code></li> </ul>"},{"location":"how-to-use-retool-cli/#partial-matches","title":"Partial matches","text":"<p>If a line isn't prefixed with <code>|</code> (full match) or <code>/</code> (regular expression) in an Exclude or Include, then it's interpreted as a partial match. A partial match looks for the specified text inside all title names.</p> <p>For example, if an input DAT contains the following title names:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And your <code>user-config.yaml</code> has the following excludes:</p> <pre><code>exclude:\n- \"Hot\"\n- \"Cold\"\n</code></pre> <p>Every title in the example list is excluded from the output DAT file. This is because <code>Cold</code> matches <code>It's Pretty Cold (Japan)</code>, and <code>Hot</code> matches every other title, as it's found in both the word <code>Hot</code> and <code>Hotel</code>.</p> <p>Now let's add an include:</p> <pre><code>exclude:\n- \"Hot\"\n- \"Cold\"\n\ninclude:\n- \"Ho\"\n</code></pre> <p>The behavior changes again:</p> <ul> <li>The include for <code>Ho</code> overrides the exclude for <code>Hot</code>.</li> <li>The include for <code>Ho</code> prevents Retool from assigning   <code>Do You Think it's Hot (USA) (Alt)</code> to <code>Do You Think it's Hot (USA)</code> as a clone,   meaning both titles end up in the output DAT file.</li> </ul> <p>As you can see, you need to be careful when using partial matches.</p>"},{"location":"how-to-use-retool-cli/#regular-expressions","title":"Regular expressions","text":"<p>If you're familiar with regular expressions, also known as \"regexes\", you know the power (and pain) that they can bring. To define an include or exclude as a regex, prefix it with a forward slash (<code>/</code>).</p> <p>Tip</p> <p>If you don't know regex, you can learn the basics at regexlearn.com. You want to be well practiced before using them, as without proper care they can lead to unintended consequences.</p> <p>For example, if an input DAT contains the following title names:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And your <code>user-config.yaml</code> has the following exclude:</p> <pre><code>exclude:\n- \"/^I\n</code></pre> <p>All titles beginning with <code>I</code> are excluded from the output DAT file.</p> <p>Now let's add an include:</p> <pre><code>exclude:\n- \"/^I\n\ninclude:\n- \"/\\(USA\\)\"\n</code></pre> <p>Here all USA titles are kept, even if they start with <code>I</code>, because includes override excludes. In the example list the <code>(Alt)</code> title is usually removed by Retool as a clone of the original, but the include filter of <code>/\\(USA\\)</code> makes sure it's kept.</p>"},{"location":"how-to-use-retool-cli/#full-matches","title":"Full matches","text":"<p>Full matches only apply to titles with the exact same name. To define an include or exclude as a full match, prefix it with a pipe (<code>|</code>).</p> <p>For example, if an input DAT contains the following titles:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And your <code>user-config.yaml</code> has the following exclude:</p> <pre><code>exclude:\n- \"|Do You Think it's Hot (USA)\"\n</code></pre> <p>Then that title is excluded from the output DAT file.</p> <p>If you remove the exclude, and then put the following include in:</p> <pre><code>include:\n- \"|Do You Think it's Hot (USA) (Alt)\"\n</code></pre> <p>Then that title is kept in the output DAT file, and the final titles chosen are:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>In the example list the <code>(Alt)</code> title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept.</p>"},{"location":"how-to-use-retool-cli/#gui-settings","title":"GUI settings","text":"<p>Don't edit these. They are used by the GUI and ignored during CLI operation.</p>"},{"location":"how-to-use-retool-cli/#system-settings-config-files","title":"System settings config files","text":"<p>Settings are available at two levels in Retool: global and system.</p> <ul> <li> <p>Global settings are applied to every DAT Retool processes, so long as system   settings don't override them. These are stored in <code>config/user-config.yaml</code>.</p> </li> <li> <p>System settings are applied to a specific system named in a DAT file. For example,   you can have settings for just the Sony - PlayStation DAT file from Redump.   System settings are mostly the same as global settings, although their config files are   slightly different. They are stored in the <code>config/systems</code> folder, and are YAML files   named after their system and release group.   See an example of a system settings config file.</p> </li> </ul> <p>While it's possible to construct a system settings file by hand, it's more convenient to set the options in Retool's GUI and let it generate one for you. After the system config file exists, Retool CLI references it every time it processes that system.</p>"},{"location":"how-to-use-retool-cli/#command-line-options","title":"Command line options","text":"<p>In addition to the settings found in <code>user-config.yaml</code>, you can pass other settings via command line options.</p>"},{"location":"how-to-use-retool-cli/#options","title":"Options","text":"<p>These options change how Retool handles certain titles.</p> <ul> <li> <p><code>-d</code> Disable 1G1R filtering Ignore clone lists, and treat each title as unique. Useful if you want to keep   everything from a specific set of regions and/or languages. You can use this in   combination with <code>--regionsplit</code> to treat Retool as a region splitter   and nothing more.    This option isn't compatible with <code>--legacy</code>.</p> </li> <li> <p><code>-e</code> Include titles without hashes or sizes specified in the input DAT file Some DAT files don't list any hashes or sizes for some files, and Retool overrides   these out by default. This option makes sure those files are kept.</p> </li> <li> <p><code>-l</code> Filter by languages using a list If a title doesn't support any of the languages on the list, it's removed (see   <code>config/user-config.yaml</code>).</p> </li> <li> <p><code>-r</code> Prefer regions over languages By default, if a title from a higher priority region doesn't support your preferred   languages but a lower priority region does, Retool selects the latter. This option   disables this behavior, forcing strict adherence to region priority regardless of   language support    This option also overrides similar behavior in superset selection, which means you   might get a title that was released in your preferred region that has less content,   instead of one that was released in another region that contains more content and   supports your preferred languages.</p> </li> <li> <p><code>-y</code> Prefer licensed versions over unlicensed, aftermarket, or homebrew titles Sometimes games are rereleased long after the lifespan of a console, in regions they   weren't originally available in. By default Retool selects these titles if they match   your preferred region/language priorities.    Enable this option to choose a production version of a title over the   unlicensed/aftermarket/homebrew title if possible. This might select titles from a lower   priority region, or with lower priority languages, or with less features.</p> </li> <li> <p><code>-z</code> Prefer titles ripped from modern rereleases over original system releases For the sake of emulator compatibility, Retool prefers versions of games released   on the original system instead of those ripped from rereleases on platforms like   Virtual Console and Steam. This option reverses that behavior.</p> </li> <li> <p><code>--nooverrides</code> Disable global and system overrides Ignore both global and system overrides.</p> </li> </ul>"},{"location":"how-to-use-retool-cli/#exclusions","title":"Exclusions","text":"<p>Retool can exclude specific types of titles from the output DAT file. These exclusions are either based on the <code>&lt;category&gt;</code> tag found in DAT files, or on a string in the title's name.</p> <p>To add exclusions, use the <code>--exclude</code> option followed by the single letter filters that indicate each title type. For example, <code>--exclude aAbcdD</code>.</p> <p>The available exclusions are as follows:</p> <ul> <li> <p><code>a</code> Applications Titles with the DAT category <code>Applications</code>, or with the following text in the name:</p> <ul> <li><code>(Program)</code></li> <li><code>(Test Program)</code></li> <li><code>Check Program</code></li> <li><code>Sample Program</code></li> </ul> </li> <li> <p><code>A</code> Audio Titles with the DAT category <code>Audio</code>. These might be used as soundtracks by games.</p> </li> <li> <p><code>b</code> Bad dumps Titles marked as bad dumps with a <code>[b]</code> in the name.</p> </li> <li> <p><code>B</code> BIOS and other chips Titles with the DAT category <code>Console</code>, or with the following text in the name:</p> <ul> <li><code>[BIOS]</code></li> <li><code>(Enhancement Chip)</code></li> </ul> </li> <li> <p><code>c</code> Coverdiscs Titles with the DAT category <code>Coverdiscs</code>. These were discs that were attached to   the front of magazines, and could contain demos, or rarely, full games.</p> </li> <li> <p><code>d</code> Demos, kiosks, and samples Titles with the DAT category <code>Demos</code>, or with the following text in the name:</p> <ul> <li><code>@barai</code></li> <li><code>(Demo [1-9])</code></li> <li><code>(Demo-CD)</code></li> <li><code>(GameCube Preview)</code></li> <li><code>(Kiosk *|* Kiosk)</code></li> <li><code>(Preview)</code></li> <li><code>Kiosk Demo Disc</code></li> <li><code>PS2 Kiosk</code></li> <li><code>PSP System Kiosk</code></li> <li><code>Sample</code></li> <li><code>Taikenban</code></li> <li><code>Trial Edition</code></li> </ul> </li> <li> <p><code>D</code> Add-ons Titles with the DAT category <code>Add-Ons</code>. This includes expansion packs and additional   materials for titles.</p> </li> <li> <p><code>e</code> Educational Titles with the DAT category <code>Educational</code>.</p> </li> <li> <p><code>g</code> Games Titles with the DAT category <code>Games</code>, or no DAT category.</p> </li> <li> <p><code>k</code> MIA Titles or ROMs declared as missing in action in the clone lists or DAT files.</p> </li> <li> <p><code>m</code> Manuals Titles with <code>(Manual)</code> in the name.</p> </li> <li> <p><code>M</code> Multimedia Titles with the DAT category <code>Multimedia</code>. These might include games.</p> </li> <li> <p><code>o</code> Bonus discs Titles with the DAT category <code>Bonus Discs</code>. These could be anything other than the   main title content, like patches, manuals, collector discs, or otherwise.</p> </li> <li> <p><code>p</code> Pirate Titles with <code>(Pirate)</code> in the name.</p> </li> <li> <p><code>P</code> Preproduction Titles with the DAT category <code>Preproduction</code>, or with the following text in the   name:</p> <ul> <li><code>(Alpha [0-99])</code></li> <li><code>(Beta [0-99])</code></li> <li><code>(Pre-Production)</code></li> <li><code>(Possible Proto)</code></li> <li><code>(Proto [0-99])</code></li> <li><code>(Review Code)</code></li> </ul> </li> <li> <p><code>r</code> Promotional Titles with the DAT category <code>Promotional</code>, or with the following text in the name:</p> <ul> <li><code>(Promo)</code></li> <li><code>EPK</code></li> <li><code>Press Kit</code></li> </ul> </li> <li> <p><code>u</code> Unlicensed Titles unauthorized by console manufacturers, marked by the following text in the   name:</p> <ul> <li><code>(Unl)</code></li> <li><code>(Aftermarket)</code></li> <li><code>(Homebrew)</code></li> <li><code>(Pirate)</code></li> </ul> </li> <li> <p><code>v</code> Video Titles with the DAT category <code>Video</code>.</p> </li> </ul>"},{"location":"how-to-use-retool-cli/#outputs","title":"Outputs","text":"<ul> <li> <p><code>--listnames</code> Also output a TXT file of just the kept title names See <code>config/user-config.yaml</code> to add a prefix and/or   suffix to each line.</p> </li> <li> <p><code>--log</code> Also output a TXT file of what titles have been kept, removed, and set as clones</p> </li> <li> <p><code>--originalheader</code> Use the original input DAT header in the output DAT Useful if you want to load Retool DATs as an update to original Redump and No-Intro   DATs already in CLRMAMEPro.</p> </li> <li> <p><code>--output &lt;folder&gt;</code> Set an output folder where the new 1G1R DAT file/s will be created</p> </li> <li> <p><code>--regionsplit</code> Split the result into multiple DAT files based on region Use with <code>-d</code> to only split by region with no 1G1R processing. Not compatible with   <code>--legacy</code>.</p> </li> <li> <p><code>--removesdat</code> Also output a DAT file containing the titles that were removed from the 1G1R DAT file</p> </li> </ul>"},{"location":"how-to-use-retool-cli/#debug","title":"Debug","text":"<ul> <li> <p><code>--config &lt;file&gt;</code> Set a custom user config file to use instead of the default Useful for testing.</p> </li> <li> <p><code>--clonelist &lt;file&gt;</code> Set a custom clone list to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT file   and the clone list isn't automatically detected anymore. Often used together with   <code>--metadata</code>.</p> </li> <li> <p><code>--metadata &lt;file&gt;</code> Set a custom metadata file to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT   file and the metadata file isn't automatically detected anymore. Often used together   with <code>--clonelist</code>.</p> </li> <li> <p><code>--legacy</code> Output DAT file/s in legacy parent/clone format   Not recommended unless you're debugging or comparing outputs between DAT versions. Not   compatible with <code>-d</code>.</p> </li> <li> <p><code>--nodtd</code> Bypass DTD validation Skips DTD validation of DAT files, useful if validation is causing issues.</p> </li> <li> <p><code>--singlecpu</code> Disable multiprocessor usage   br&gt;Forces Retool to use only a single CPU core, at the cost of performance. This can   be useful when debugging Retool, as multiprocessor doesn't cope well with <code>input</code>   statements.</p> </li> <li> <p><code>--trace  [ ...]</code> Trace a title through the Retool process for debugging Follows a title through Retool's selection process for debugging. Accepts a regular   expression. To function properly, this disables using multiple processors during parent   selection.    Usage:    <pre><code>--trace \"regex of titles to trace\"\n</code></pre></p> </li> <li> <p><code>--warnings</code> Report clone list warnings during processing</p> </li> <li> <p><code>--warningpause</code> Pause when a clone list warning is found Useful when batch processing DAT files.</p> </li> </ul> <p>Tip</p> <p>If you don't know regular expressions, also known as \"regexes\", you can learn the basics at regexlearn.com. You want to be well practiced before using them, as without proper care they can lead to unintended consequences.</p>"},{"location":"how-to-use-retool-gui-exclusions/","title":"Exclusions","text":"<p>Retool can exclude specific types of titles from the output DAT file. These exclusions are either based on the <code>&lt;category&gt;</code> tag found in DAT files, or on a string in the title's name.</p> <p>To add exclusions, in the Global settings or System settings tab, click the Exclusions tab.</p> <p></p> <p>The available exclusions are as follows:</p> <ul> <li> <p>Add-ons Titles with the DAT category <code>Add-Ons</code>. This includes expansion packs and additional   materials for titles.</p> </li> <li> <p>Applications Titles with the DAT category <code>Applications</code>, or with the following text in the name:</p> <ul> <li><code>(Program)</code></li> <li><code>(Test Program)</code></li> <li><code>Check Program</code></li> <li><code>Sample Program</code></li> </ul> </li> <li> <p>Audio Titles with the DAT category <code>Audio</code>. These might be used as soundtracks by games.</p> </li> <li> <p>Bad dumps Titles marked as bad dumps with a <code>[b]</code> in the name.</p> </li> <li> <p>BIOS and other chips Titles with the DAT category <code>Console</code>, or with the following text in the name:</p> <ul> <li><code>[BIOS]</code></li> <li><code>(Enhancement Chip)</code></li> </ul> </li> <li> <p>Bonus discs Titles with the DAT category <code>Bonus Discs</code>. These could be anything other than the   main title content, like patches, manuals, collector discs, or otherwise.</p> </li> <li> <p>Coverdiscs Titles with the DAT category <code>Coverdiscs</code>. These were discs that were attached to   the front of magazines, and could contain demos, or rarely, full games.</p> </li> <li> <p>Demos, kiosks, and samples Titles with the DAT category <code>Demos</code>, or with the following text in the name:</p> <ul> <li><code>@barai</code></li> <li><code>(Demo [1-9])</code></li> <li><code>(Demo-CD)</code></li> <li><code>(GameCube Preview)</code></li> <li><code>(Kiosk *|* Kiosk)</code></li> <li><code>(Preview)</code></li> <li><code>Kiosk Demo Disc</code></li> <li><code>PS2 Kiosk</code></li> <li><code>PSP System Kiosk</code></li> <li><code>Sample</code></li> <li><code>Taikenban</code></li> <li><code>Trial Edition</code></li> </ul> </li> <li> <p>Educational Titles with the DAT category <code>Educational</code>.</p> </li> <li> <p>Games Titles with the DAT category <code>Games</code>, or no DAT category.</p> </li> <li> <p>Manuals Titles with <code>(Manual)</code> in the name.</p> </li> <li> <p>MIA Titles or ROMs declared as missing in action in the clone lists or DAT files.</p> </li> <li> <p>Multimedia Titles with the DAT category <code>Multimedia</code>. These might include games.</p> </li> <li> <p>Pirate Titles with <code>(Pirate)</code> in the name.</p> </li> <li> <p>Preproduction Titles with the DAT category <code>Preproduction</code>, or with the following text in the   name:</p> <ul> <li><code>(Alpha [0-99])</code></li> <li><code>(Beta [0-99])</code></li> <li><code>(Pre-Production)</code></li> <li><code>(Possible Proto)</code></li> <li><code>(Proto [0-99])</code></li> <li><code>(Review Code)</code></li> </ul> </li> <li> <p>Promotional Titles with the DAT category <code>Promotional</code>, or with the following text in the name:</p> <ul> <li><code>(Promo)</code></li> <li><code>EPK</code></li> <li><code>Press Kit</code></li> </ul> </li> <li> <p>Unlicensed Titles unauthorized by console manufacturers, marked by the following text in the   name:</p> <ul> <li><code>(Unl)</code></li> <li><code>(Aftermarket)</code></li> <li><code>(Homebrew)</code></li> <li><code>(Pirate)</code></li> </ul> </li> <li> <p>Video Titles with the DAT category <code>Video</code>.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-options/","title":"Options","text":"<p>Options change Retool's behavior either at the title level, or the broader DAT level.</p> <p>To set options, in the Global settings or System settings tab, click the Options tab.</p> <p></p>"},{"location":"how-to-use-retool-gui-options/#title-options","title":"Title options","text":"<p>These options change how Retool handles certain titles.</p> <ul> <li> <p>Disable 1G1R filtering Ignore clone lists, and treat each title as unique. Useful if you want to keep   everything from a specific set of regions and/or languages. You can use this in   combination with Split the output into multiple DAT files based on region to treat   Retool as a region splitter and nothing more.    If this option is disabled, it's because you've enabled   Output DAT in legacy parent/clone format, which isn't compatible with this feature.</p> </li> <li> <p>Prefer regions over languages By default, if a title from a higher priority region doesn't support your preferred   languages but a lower priority region does, Retool selects the latter. This option   disables this behavior, forcing strict adherence to region priority regardless of   language support    This option also overrides similar behavior in superset selection, which means you   might get a title that was released in your preferred region that has less content,   instead of one that was released in another region that contains more content and   supports your preferred languages.</p> </li> <li> <p>Include titles without hashes or sizes specified in the input DAT file Some DAT files don't list any hashes or sizes for some files, and Retool filters these   out by default. This option makes sure those files are kept.</p> </li> <li> <p>Prefer titles ripped from modern rereleases over original system releases For the sake of emulator compatibility, Retool prefers versions of games released   on the original system instead of those ripped from rereleases on platforms like   Virtual Console and Steam. This option reverses that behavior.</p> </li> <li> <p>Prefer licensed versions over unlicensed, aftermarket, or homebrew titles Sometimes games are rereleased long after the lifespan of a console, in regions they   weren't originally available in. By default Retool selects these titles if they match   your preferred region/language priorities.    Enable this option to choose a production version of a title over the   unlicensed/aftermarket/homebrew title if possible. This might select titles from a lower   priority region, or with lower priority languages, or with less features.</p> </li> <li> <p>Disable global and system overrides Ignore both global and system overrides.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-options/#output-options","title":"Output options","text":"<p>These options change the files that Retool outputs as part of its process.</p> <ul> <li> <p>Use the original input DAT header Retool generates its own header so its DATs are identified as different from the   original input DATs. Selecting this option uses the original input DAT header instead.   This is useful if you already have original Redump and No-Intro DATs in CLRMAMEPro, and   want to treat the Retool DAT as an update.</p> </li> <li> <p>Split the output into multiple DAT files based on region Instead of one output DAT containing all the filtered results, split the output into   multiple DAT files based on the regions you've selected. If this is disabled, it's   because you've enabled Output DAT in legacy parent/clone format, which isn't   compatible with this option.</p> </li> <li> <p>Also output a DAT file of all the removed titles In addition to the output DAT file, create another DAT file containing the titles   Retool removed.</p> </li> <li> <p>Also output lists of what titles have been kept and removed In addition to the output DAT file, produce a TXT file that lists what titles have   been kept, and what titles have been removed.</p> </li> <li> <p>Also output a list of just the title names from the output DAT file In addition to the output DAT file, produce a TXT file that lists only the name of   each title in the output DAT file, and optionally add a prefix and suffix to each name.   If you add a prefix that starts with <code>http://</code>, <code>https://</code> or <code>ftp://</code>, each line in the   file is URL encoded.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-options/#debug-options","title":"Debug options","text":"<p>These options are useful for developing and testing Retool.</p> <ul> <li> <p>Report clone list warnings during processing Turn on warnings when there are mismatches between the clone list and the DAT file.</p> </li> <li> <p>Pause on clone list warnings Pause Retool each time a clone list warning is issued.</p> </li> <li> <p>Output DAT in legacy parent/clone format Not recommended unless you're debugging or comparing outputs between DAT versions.   If this is disabled, it's because you've disabled 1G1R filtering or chosen to split by   region, which isn't compatible with this option.</p> </li> <li> <p>Bypass DTD validation Skips DTD validation of DAT files, useful if validation is causing issues.</p> </li> <li> <p>Disable multiprocessor usage Forces Retool to use only a single CPU core, at the cost of performance. This can   be useful when debugging Retool, as multiprocessor doesn't cope well with <code>input</code>   statements.</p> </li> <li> <p>Trace a title through Retool's process Follows a title through Retool's selection process for debugging. Accepts a regular   expression. To function properly, this disables using multiple processors during parent   selection.</p> </li> </ul> <p>Tip</p> <p>If you don't know regular expressions, also known as \"regexes\", you can learn the basics at regexlearn.com. You want to be well practiced before using them, as without proper care they can lead to unintended consequences.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/","title":"Overrides and post filters","text":"<p>There are two ways you can remove or include specific titles in Retool: overrides and post filters.</p> <p>Note</p> <p>If Retool has genuinely missed a relationship between titles, don't just create an override or post filter \u2014 create an issue too so the clone lists or Retool can be updated.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#overrides","title":"Overrides","text":"<p>You can override the default choices Retool makes by force including or excluding titles whose names match against text you provide. Each match must be on its own line.</p> <p>To set overrides, in the Global settings or System settings tab, click the Overrides tab.</p> <p></p> <p>An excluded title forces Retool to act as if the title was never in the input DAT in the first place. This means that an exclude can force Retool to select a different title when choosing 1G1R titles.</p> <p>An included title makes it into the output DAT regardless of Retool's choices. Even if Retool has removed a title as part of the filtering process, a matching include brings it back. Only a post filter can remove an included title.</p> <p>There are rules when it comes to overrides, and how they interact at the global settings and system settings level:</p> <ul> <li>System includes override all excludes.</li> <li>System excludes override global includes.</li> <li>Global includes override global excludes.</li> </ul> <p>To read about the different ways you can match titles, see Match types.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#post-filters","title":"Post filters","text":"<p>After Retool has finished processing, you can filter the results to only include titles that match the text you provide. Each match must be on its own line.</p> <p>To set post filters, in the Global settings or System settings tab, click the Post filters tab.</p> <p></p> <p>To read about the different ways you can match titles, see Match types.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#match-types","title":"Match types","text":"<p>There are three different match types for overrides and post filters:</p> <ul> <li>Plain text indicates a partial string match.</li> <li>A prefix of <code>/</code> indicates a regular expression match.</li> <li>A prefix of <code>|</code> indicates a full string match.</li> </ul> <p>Additionally, you can wrap any of these strings in <code>&lt;&gt;</code> when using overrides to also include or exclude any match's related clones. Wrapping strings in <code>&lt;&gt;</code> is not supported for post filters.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#partial-matches","title":"Partial matches","text":"<p>If a line isn't prefixed with <code>|</code> (full match) or <code>/</code> (regular expression) in an Exclude or Include box, then it's interpreted as a partial match. A partial match looks for the specified text inside all title names.</p> <p>For example, if an input DAT contains the following title names:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And you put the following text in the Exclude box:</p> <pre><code>Hot\nCold\n</code></pre> <p>Every title in the example list is excluded from the output DAT file. This is because <code>Cold</code> matches <code>It's Pretty Cold (Japan)</code>, and <code>Hot</code> matches every other title, as it's found in both the word <code>Hot</code> and <code>Hotel</code>.</p> <p>If we also add the following text to the Include box:</p> <pre><code>Ho\n</code></pre> <p>The behavior changes again:</p> <ul> <li>The include for <code>Ho</code> overrides the exclude for <code>Hot</code>.</li> <li>The include for <code>Ho</code> prevents Retool from assigning   <code>Do You Think it's Hot (USA) (Alt)</code> to <code>Do You Think it's Hot (USA)</code> as a clone,   meaning both titles end up in the output DAT file.</li> </ul> <p>As you can see, you need to be careful when using partial matches.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#regular-expressions","title":"Regular expressions","text":"<p>If you're familiar with regular expressions, also known as \"regexes\", you know the power (and pain) that they can bring. To define an include or exclude as a regex, prefix it with a forward slash (<code>/</code>).</p> <p>Tip</p> <p>If you don't know regex, you can learn the basics at regexlearn.com. You want to be well practiced before using them, as without proper care they can lead to unintended consequences.</p> <p>For example, if an input DAT file contains the following title names:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And you put the following text in an Exclude box:</p> <pre><code>/^I\n</code></pre> <p>All titles beginning with <code>I</code> are excluded from the output DAT file.</p> <p>If you also put the following text in an Include box:</p> <pre><code>/\\(USA\\)\n</code></pre> <p>All USA titles are kept, even if they start with <code>I</code>. In the example list the <code>(Alt)</code> title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#full-matches","title":"Full matches","text":"<p>Full matches only apply to titles with the exact same name. To define an include or exclude as a full match, prefix it with a pipe (<code>|</code>).</p> <p>For example, if an input DAT file contains the following titles:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And you put the following text in an Exclude box:</p> <pre><code>|Do You Think it's Hot (USA)\n</code></pre> <p>Then that title is excluded from the output DAT file.</p> <p>If you remove the exclude, and then put the following text in an Include box:</p> <pre><code>|Do You Think it's Hot (USA) (Alt)\n</code></pre> <p>Then that title is kept in the output DAT file, and the final titles chosen are:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>In the example list the <code>(Alt)</code> title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept.</p>"},{"location":"how-to-use-retool-gui-priorities/","title":"Region, language, and video priorities","text":"<p>Retool supports three different types of priorities: regions, languages, and video.</p>"},{"location":"how-to-use-retool-gui-priorities/#regions","title":"Regions","text":"<p>You must have at least one region in the Filter by these regions box for the Process DAT files button to be enabled. Only regions in Filter by these regions box are considered when Retool is processing a DAT file. If a title is from another region, it's removed from the output DAT file.</p> <p>Order in the Filter by these regions box is important. For example, if you place USA above Europe, and the title exists in both regions, during processing Retool chooses the USA title.</p>"},{"location":"how-to-use-retool-gui-priorities/#change-the-region-order","title":"Change the region order","text":"<p>To view the regions, in the Global settings or System settings tab, click the Regions tab.</p> <p></p> <p>You can move regions from the Available regions box to the Filter by these regions box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more regions in the Available regions box, and then click    Add regions.</p> </li> <li> <p>Click    Add remaining regions, which adds the regions in the Available regions box to   the end of the list in the Filter by these regions box.</p> </li> <li> <p>Click Use default order for English speakers to add the recommended region order   if English is your first language. This also attempts to prioritize NTSC regions over   PAL regions.</p> </li> </ul> <p>You can move regions from the Filter by these regions box to the Available regions box in the following ways:</p> <ul> <li>Drag and drop with the mouse.</li> <li>Select one or more regions in the Filter by these regions box, and then click    Remove regions.</li> <li>Click    Remove all regions, which returns all regions to the Available regions box.</li> </ul> <p>You can change the order of the regions in the Filter by these regions box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more regions in the Filter by these regions box, and then click    Up or  Down.</p> </li> </ul> <p>Tip</p> <p>A combination of Ctrl (Cmd on macOS), Shift, and clicking allows for multiple region selections.</p>"},{"location":"how-to-use-retool-gui-priorities/#languages","title":"Languages","text":"<p>If no languages are in the Filter by these languages box, then Retool considers all languages during processing, and infers a language order from your region order.</p> <p>If you add languages to the Filter by these languages box, then only those languages are considered when Retool is processing a DAT file. If a title doesn't support a language in that list, it's removed from the output DAT file unless the language is unknown.</p> <p>Order in the Filter by these languages box is important. For example, if you have the following title names in an input DAT file:</p> <pre><code>This is a title (Europe) (En,Fr,De)\nThis is a title (Europe) (En,Fr,De,Es,It)\nThis is a title (Europe) (Es)\nThis is a title (Europe) (Fr,De,Es,It)\n</code></pre> <p>And the following language order:</p> <ol> <li> <p>English</p> </li> <li> <p>Spanish</p> </li> <li> <p>Italian</p> </li> </ol> <p>Then the following title is selected as the 1G1R title:</p> <pre><code>This is a title (Europe) (En,Fr,De,Es,It)\n</code></pre> <p>And these titles are removed from consideration:</p> <pre><code>This is a title (Europe) (Es)\nThis is a title (Europe) (Fr,De,Es,It)\nThis is a title (Europe) (En,Fr,De)\n</code></pre> <p>This is because <code>This is a title (Europe) (En,Fr,De,Es,It)</code> supports all three languages.</p>"},{"location":"how-to-use-retool-gui-priorities/#change-the-language-order","title":"Change the language order","text":"<p>To view the languages, in the Global settings or Sytem settings tab, click the Languages tab.</p> <p></p> <p>You can move languages from the Available languages box to the Filter by these languages box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more languages in the Available languages box, and then click    Add languages.</p> </li> <li> <p>Click    Add remaining languages, which adds the languages in the Available languages box to   the end of the list in the Filter by these languages box.</p> </li> </ul> <p>You can move languages from the Filter by these languages box to the Available languages box in the following ways:</p> <ul> <li>Drag and drop with the mouse.</li> <li>Select one or more languages in the Filter by these languages box, and then click    Remove languages.</li> <li>Click    Remove all languages, which returns all languages to the Available languages box.</li> </ul> <p>You can change the order of the languages in the Filter by these languages box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more languages in the Filter by these languages box, and then click    Up or  Down.</p> </li> </ul> <p>Tip</p> <p>A combination of Ctrl (Cmd on macOS), Shift, and clicking allows for multiple language selections.</p>"},{"location":"how-to-use-retool-gui-priorities/#video","title":"Video","text":"<p>Video standards are processed after regions, languages, and many other criteria like versions and supersets. Additionally, a video standard is only determined by an explicit tag in a title's name, for example <code>This is a title (World) (NTSC)</code>. As such, the video order is effectively only used as a tie-breaker when choosing between two titles that both specify a video standard in their names. Don't expect to get NTSC titles if you prioritize NTSC as a video standard, but put Europe first in your region order.</p>"},{"location":"how-to-use-retool-gui-priorities/#change-the-video-order","title":"Change the video order","text":"<p>To view the video order, in the Global settings or Sytem settings tab, click the Video tab.</p> <p>You can change the order of the video standards in the Video order box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more video standards in the Video order box, and then click    Up or  Down.</p> </li> </ul> <p></p> <p>Tip</p> <p>A combination of Ctrl (Cmd on macOS), Shift, and clicking allows for multiple language selections.</p>"},{"location":"how-to-use-retool-gui-settings/","title":"Global and system settings","text":"<p>Settings are available at two levels in Retool: global and system.</p> <ul> <li> <p>Global settings are applied to every DAT Retool processes, so long as system   settings don't override them.</p> </li> <li> <p>System settings are applied to a specific system named in a DAT file. For example,   you can have settings for just the Sony - PlayStation DAT file from Redump.   System settings mostly mirror what's available   in the global settings, although there are some unique features.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-system-settings/","title":"System settings","text":"<p>To view a DAT file's system settings, click the System settings tab, and then click a DAT file that you've added to your list.</p> <p></p> <p>System settings are applied to a specific system named in a DAT file. For example, you can have settings for just the Sony - PlayStation DAT file from Redump. When you load a different version of that DAT file in Retool, so long as the system name and release group haven't changed, the system settings still apply.</p> <p>On most system settings tabs there is an Override global settings checkbox. When selected, this means that the system settings are used for those settings instead of the global ones whenever that DAT file is processed.</p> <p>System settings mostly mirror what's available in the global settings, although there are some unique features.</p>"},{"location":"how-to-use-retool-gui-system-settings/#paths","title":"Paths","text":"<p>The Paths tab is unique to system settings, and lets you select a custom output folder, clone list, and metadata file for the selected system. If the override checkbox is selected and a path hasn't been chosen for one of these options, then that option uses the default or global setting instead.</p>"},{"location":"how-to-use-retool-gui-system-settings/#system-overrides","title":"System overrides","text":"<p>The Overrides tab in the system settings has no override checkbox. Instead, it interacts with the global settings overrides. See Overrides for how the global and system overrides interact, and the rules for creating the overrides.</p>"},{"location":"how-to-use-retool-gui/","title":"How to use Retool GUI","text":"<p>What follows is a step-by-step walkthrough of using Retool GUI and all of its features. If you're new to DAT management, it might be beneficial to spend some time reading about terminology, and after you've filtered a DAT file with Retool, check out the help documentation for your favorite ROM manager to learn how to use it.</p> <p>Info</p> <p>Depending on your operating system, all Python commands in this guide might need to be prefixed with <code>python</code> or <code>python3</code> to work.</p>"},{"location":"how-to-use-retool-gui/#get-started","title":"Get started","text":"<p>The following sections cover the initial setup for Retool.</p>"},{"location":"how-to-use-retool-gui/#download-dat-files-and-retool","title":"Download DAT files and Retool","text":"<p>Before you can filter DAT files, they need to be on your hard drive.</p> <ol> <li> <p>Download the DAT files for the system you want to verify. Retool supports DAT files     from the following groups:</p> <ul> <li> <p>No-Intro</p> </li> <li> <p>Redump</p> </li> </ul> <p>You might need to extract a ZIP file containing the DAT files to access them.</p> </li> <li> <p>Download Retool, and follow the installation and update instructions for     your platform.</p> </li> </ol>"},{"location":"how-to-use-retool-gui/#open-retool","title":"Open Retool","text":"Windows binary Python GUI <p>Navigate to the folder you extracted Retool to, and double click <code>retoolgui.exe</code>. A terminal window shows, which in turn loads the GUI. Don't close the terminal window, as it's used for output.</p> <p>In your terminal/Command Prompt, change the folder to where Retool is installed, and then run the following command:</p> <pre><code>retoolgui.py\n</code></pre> <p></p>"},{"location":"how-to-use-retool-gui/#add-or-remove-dat-files","title":"Add or remove DAT files","text":"<p>To process DAT files, you first need to add them to your list:</p> <ul> <li>Click  Add DAT files to the list to add individual files to the list.</li> <li>Click  Add a folder of DAT files to the list to add all the DAT files in a single folder to the   list.</li> <li>Click  Add a folder of DAT files recursively to the list to add all the DAT files in a folder   and its subfolders to the list.</li> </ul> <p>You can also remove DAT files from your list:</p> <ul> <li>Select one or more DAT files in the list, and then click    Remove selected DAT files from the list to remove the DAT files from the list.</li> <li>Click  Remove all DAT files from the list to clear the list.</li> </ul> <p>You must have at least one DAT file in the list for the Process DAT files button to be enabled.</p>"},{"location":"how-to-use-retool-gui/#set-an-output-folder","title":"Set an output folder","text":"<p>Click  Choose an output folder to set where you want Retool to output processed DAT files. Retool doesn't modify any of the DAT files added to the list; instead, it creates new versions of them in the specified folder.</p>"},{"location":"how-to-use-retool-gui/#global-and-system-settings","title":"Global and system settings","text":"<p>Settings are available at two levels in Retool: global and system.</p> <ul> <li> <p>Global settings are applied to every DAT Retool processes, so long as system   settings don't override them.</p> </li> <li> <p>System settings are applied to a specific system named in a DAT file. For example,   you can have settings for just the Sony - PlayStation DAT file from Redump.   System settings mostly mirror what's available   in the global settings, although there are some unique features.</p> </li> </ul>"},{"location":"integrate/","title":"Integrate Retool into your own software","text":"<p>Retool CLI supports <code>stdout</code> redirects instead of writing to DAT files, meaning it can be used as an intermediary filter tool for existing software workflows.</p> <p>If you'd prefer not to integrate Retool itself but find value in its clone lists, they are kept in a separate repository from the main program and are free to use.</p>"},{"location":"naming-system/","title":"Retool's naming system","text":"<p>Retool generates multiple names for each title in a DAT to help match and group together titles more accurately. These names are used directly in the code, and also clone lists. If you plan to contribute to Retool, it helps to understand this standard.</p>"},{"location":"naming-system/#title-tool","title":"Title tool","text":"<p>Retool's different naming conventions can take a while to get used to. To help you start, you can use the title tool in Retool GUI. Open Retool GUI, then click File &gt; Title tool to launch it. Paste in the full name you've found in the DAT you're working on, and it shows you the other names Retool assigns to that title by default.</p> <p></p>"},{"location":"naming-system/#full-names","title":"Full names","text":"<p>Full names are the names of titles as presented in the DAT file, including tags. For example:</p> <pre><code>This is a title (USA) (En,Fr) (Disc A) (Best Collection)\n</code></pre>"},{"location":"naming-system/#group-names","title":"Group names","text":"<p>Group names are how Retool bundles together similar titles to compare against each other.</p> <p>Group names take only the content before the first <code>(</code> in full names, and are in lowercase. Additionally, any string that looks like a version is stripped.</p> <p>For example, the following full names:</p> <pre><code>This is a title v1.00 (USA) (En,Fr) (Disc A) (Best Collection)\nThis is a title v1.00 (USA) (En,Fr) (Disc B) (Best Collection)\n</code></pre> <p>Are both assigned to the same group by default:</p> <pre><code>this is a title\n</code></pre> <p>Group names are derived from three places:</p> <ul> <li>The full name of a title (default).</li> <li><code>group</code> values in the <code>variants</code> array in   a clone list.</li> <li><code>newGroup</code> or <code>elseGroup</code> values in the <code>overrides</code>   array in a clone list.</li> </ul>"},{"location":"naming-system/#region-free-names","title":"Region-free names","text":"<p>Region-free names are the same as full names, except their regions and languages have been stripped.</p> <p>For example, the following full name:</p> <pre><code>This is a title (USA) (En,Fr) (Disc A) (Best Collection)\n</code></pre> <p>Has the following region-free name:</p> <pre><code>This is a title (Disc A) (Best Collection)\n</code></pre>"},{"location":"naming-system/#tag-free-names","title":"Tag-free names","text":"<p>Tag-free names are the same as full names, except they have normalized disc names, and tags have been stripped from them as defined in the <code>ignore_tags</code>, <code>promote_editions</code>, <code>demote_editions</code>, and <code>modern_editions</code> arrays in <code>config/internal-config.json</code>. Tag-free names still include regions and languages.</p> <p>For example, the following full name:</p> <pre><code>This is a title (USA) (En,Fr) (Disc A) (Best Collection)\n</code></pre> <p>Has the following tag-free name:</p> <pre><code>This is a title (USA) (En,Fr) (Disc 1)\n</code></pre>"},{"location":"naming-system/#normalized-disc-names","title":"Normalized disc names","text":"<p>For tag-free names (and as a consequence, short names), Retool attempts to align all naming variants for discs to the one standard for better automated matching of titles. That is, variants like (Disc 1), (Disc A), (Disco Uno), and (Side A) are all (Disc 1) as far as Retool is concerned. This is also true if you're using tag-free or short names in clone lists.</p> <p>The replace strings for normalized disc names are in the <code>disc_rename</code> object in <code>config/internal-config.json</code>. This is not a 1:1 mapping of what the disc name is and what it should be. Instead, it's a sequential set of string replacements that's iterated over when processing a title's full name, so the order is important.</p>"},{"location":"naming-system/#short-names","title":"Short names","text":"<p>Short names are a shortened version of full names, most often used in clone lists as a handy way to reference many titles at once without having to list the full name of every variant. The short name is built by first getting the tag-free name (which also normalizes disc names), and then getting the region-free name from that. It is then converted to lowercase to avoid casing issues.</p> <p>The short name also acts as a differentiator for titles that get bundled into the same group, but shouldn't be treated as 1:1 matches.</p> <p>For example, the following full names:</p> <pre><code>This is a title (USA) (En,Fr) (Disc A) (Best Collection)\nThis is a title (USA) (En,Fr) (Disc B) (Best Collection)\n</code></pre> <p>Are both assigned to the same group by default:</p> <pre><code>this is a title\n</code></pre> <p>However, because they are different discs from the same set and not equivalent titles, they get assigned different short names:</p> <pre><code>this is a title (disc 1)\nthis is a title (disc 2)\n</code></pre> <p>This prevents them from being considered as clones of each other.</p>"},{"location":"retool-1g1r/","title":"Why Retool's 1G1R is better","text":"<p>Standard \"One Game, One ROM\" (1G1R) has problems.</p> <p>Way back in 2008 Eric Bole-Feysot raised that 1G1R would be an appealing concept to implement in No-Intro DAT files. The various groups involved at the time ultimately settled on repurposing the existing parent/clone implementation established by MAME, added an extra <code>&lt;release&gt;</code> tag to define what region a title was from and what languages it supported, and built user-enabled 1G1R support into ROM managers to select titles based on the user's region and language preferences. It was, at the time, enough.</p> <p>As DAT files became more detailed, 1G1R filtering failed to keep pace.</p>"},{"location":"retool-1g1r/#the-problems-with-rom-manager-1g1r-and-parentclone-dat-files","title":"The problems with ROM manager 1G1R and parent/clone DAT files","text":"<p>The criteria for 1G1R title selection outside of Retool is based purely on regions and languages, and the way ROM managers like CLRMAMEPro and Romcenter handle this is far from ideal. For a more code-focused approach to how this works, check out LogiqX's pseudo-code on the No-Intro forums (search the page for \"I do this kind of thing for a living\").</p> <p>The code essentially sets up the following standard:</p> <ol> <li> <p>Titles are given a score based on a combination of region and language priorities     provided by the user.</p> </li> <li> <p>Regions are more important than languages.</p> </li> <li> <p>Titles should be prioritized and filtered by user-defined regions.</p> </li> <li> <p>Languages are added as a prioritized bonus score to a title's region score. They     should not be used as a filter.</p> </li> </ol> <p>Unfortunately, this creates a few problems.</p>"},{"location":"retool-1g1r/#the-language-filterpriority-problem","title":"The language filter/priority problem","text":"<p>The existing parent/clone algorithm creates uncomfortable situations like the following. For example, consider a DAT with the following three titles:</p> <pre><code>&lt;game name=\"Test Title (Canada) (Fr)\"&gt;\n&lt;description&gt;Test Title (Canada) (Fr)&lt;/description&gt;\n&lt;release name=\"Test Title (Canada) (Fr)\" region=\"Canada\" language=\"Fr\"/&gt;\n&lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Canada) (Fr).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Japan)\" cloneof=\"Test Title (Canada) (Fr)\"&gt;\n&lt;description&gt;Test Title (Japan)&lt;/description&gt;\n&lt;release name=\"Test Title (Japan)\" region=\"Japan\" language=\"Ja\"/&gt;\n&lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Japan).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Norway)\" cloneof=\"Test Title (Canada) (Fr)\"&gt;\n&lt;description&gt;Test Title (Norway)&lt;/description&gt;\n&lt;release name=\"Test Title (Norway)\" region=\"Norway\" language=\"En\"/&gt;\n&lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Norway).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n</code></pre> <p>You want to filter the DAT in a 1G1R fashion, and you only speak English. You set your regions in an order that you hope should give you a balance between English titles and higher frame rates courtesy of NTSC:</p> <ol> <li> <p>Canada</p> </li> <li> <p>Japan</p> </li> <li> <p>Norway</p> </li> </ol> <p>As insurance, you set your languages in an order that prioritizes English:</p> <ol> <li> <p>En</p> </li> <li> <p>Ja</p> </li> <li> <p>Fr</p> </li> </ol> <p>A cursory look at the XML data shows that the Norwegian title is the only one that supports English, and is arguably what the user would want.</p> <p>What title gets chosen in CLRMAMEPro's 1G1R process? Test Title (Canada) (Fr), because Canada is the highest priority region.</p> <p>What if you remove Fr from the language list? You still get Test Title (Canada) (Fr), as languages are treated as a bonus score, not a filter.</p>"},{"location":"retool-1g1r/#the-version-problem","title":"The version problem","text":"<p>The current DAT and ROM manager ecosystem doesn't have a concept of versioning. Say you have the following titles in a DAT file:</p> <pre><code>&lt;game name=\"Test Title (USA) (v1.2)\"&gt;\n&lt;description&gt;Test Title (USA) (v1.2)&lt;/description&gt;\n&lt;release name=\"Test Title (USA) (v1.2)\" region=\"USA\" language=\"En\"/&gt;\n&lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (USA) (v1.2).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (USA) (v1.1)\" cloneof=\"Test Title (USA) (v1.2)\"&gt;\n&lt;description&gt;Test Title (USA) (v1.1)&lt;/description&gt;\n&lt;release name=\"Test Title (USA) (v1.1)\" region=\"USA\" language=\"En\"/&gt;\n&lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (USA) (v1.1).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Europe) (v0.6)\" cloneof=\"Test Title (USA) (v1.2)\"&gt;\n&lt;description&gt;Test Title (Europe) (v0.6)&lt;/description&gt;\n&lt;release name=\"Test Title (Europe) (v0.6)\" region=\"Europe\" language=\"En\"/&gt;\n&lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Europe) (v0.6).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Europe) (v2.0)\" cloneof=\"Test Title (USA) (v1.2)\"&gt;\n&lt;description&gt;Test Title (Europe) (v2.0)&lt;/description&gt;\n&lt;release name=\"Test Title (Europe) (v2.0)\" region=\"Europe\" language=\"En\"/&gt;\n&lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Europe) (v2.0).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Europe) (v1.1)\" cloneof=\"Test Title (USA) (v1.2)\"&gt;\n&lt;description&gt;Test Title (Europe) (v1.1)&lt;/description&gt;\n&lt;release name=\"Test Title (Europe) (v1.1)\" region=\"Europe\" language=\"En\"/&gt;\n&lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Europe) (v1.1).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n</code></pre> <p>If you set USA as the top priority region in your ROM manager, you get whatever title is marked as the parent, in this case, Test Title (USA) (v1.2).</p> <p>However, if you set Europe as the top priority region, since the parent is from the USA, you get something unexpected. In CLRMAMEPro, you get whatever is the first European title in the DAT file: in this case Test Title (Europe) (v0.6). In RomCenter, you get whatever is the last: in this case Test Title (Europe) (v1.1). In both cases, the wrong version of the title gets selected: it should be Test Title (Europe) (v2.0).</p>"},{"location":"retool-1g1r/#the-broader-priority-problem","title":"The broader priority problem","text":"<p>These issues expand beyond language issues and easily identifiable versions: how do you deal with versions vs revisions? Production vs preproduction? How about Hibaihin/Not for Resale titles? What about disc IDs used by the likes of PlayStation? Or OEM titles or release dates? What do you do when you have a production title in a lower priority region, but only an unlicensed, badly dumped, or preproduction version in a higher priority region? How do compilations play a part, or supersets like Game of the Year editions, or DVD rereleases of games that were originally on multiple CDs?</p> <p>There are numerous questions like these that crop up when trying to determine the best possible 1G1R title to select, which is complicated again by user defined and ordered regions and languages, and their own specific curation desires.</p>"},{"location":"retool-1g1r/#the-human-problem","title":"The human problem","text":"<p>Parent/clone DAT files are generally administered by hand. There's no automatic logic that highlights that titles might be related as a human enters them into a database \u2014 they need to manually make that link themselves, and be aware that the clones of multiple different names might exist. On a single DAT with multiple contributors, where the focus can be \"DAT all the things\" over attention to detail, this lends itself to oversights and clones being missed.</p>"},{"location":"retool-1g1r/#what-retool-does-differently","title":"What Retool does differently","text":"<p>Retool ignores the parent/clone data manually entered into DAT files, and analyzes title names to automatically group them together. It makes use of clone lists to not only close the gap where automatic detection doesn't work out, but to recategorize and prioritize titles accordingly.</p> <p>It doesn't use a scoring system based on region and language to determine which title to pick, but instead puts titles through a series of filters based on detailed criteria. It makes use of scraped data from Redump and No-Intro's websites to provide additional language details not present in title names.</p> <p>Finally, it can treat languages as both a filter and something that should have higher priority than regions, although you can prioritize regions if you desire.</p>"},{"location":"system-config/","title":"System config example","text":"<p>This file should be stored in <code>config/systems</code>, and named <code>Sony - PlayStation (Redump).yaml</code>.</p> <pre><code>---\n# This file contains the system settings for Sony - PlayStation (Redump).\n#\n# It might override settings in config/user-config.yaml specifically for that\n# DAT.\n#\n# ==============================================\n# CLONE LIST, METADATA FILE, AND OUTPUT LOCATION\n# ==============================================\npaths:\n- override: false\n- clone list: # clonelists\\your-clone-list.json\n- metadata file: # metadata/your-metadata-file.json\n- output: # C:\\path\n#\n# ==============\n# LANGUAGE ORDER\n# ==============\n# If the -l option is used, only include titles with the following languages.\n# Comment out languages you don't want. Order is important.\nlanguage order:\n- override: false\n# - Afrikaans\n# - Albanian\n# - Arabic\n# - Basque\n# - Bulgarian\n# - Catalan\n# - Cornish\n# - Croatian\n# - Czech\n# - Danish\n# - Dutch\n# - Estonian\n# - Finnish\n# - French\n# - Gaelic\n# - German\n# - Greek\n# - Hebrew\n# - Hindi\n# - Hungarian\n# - Icelandic\n# - Indonesian\n# - Italian\n# - Japanese\n# - Korean\n# - Latvian\n# - Lithuanian\n# - Macedonian\n# - Norwegian\n# - Polish\n# - Portuguese\n# - Punjabi\n# - Romanian\n# - Russian\n# - Serbian\n# - Slovak\n# - Slovenian\n# - Spanish\n# - Swedish\n# - Tamil\n# - Thai\n# - Turkish\n# - Ukranian\n- Chinese\n- English\n# ============\n# REGION ORDER\n# ============\n# Only include titles with the following regions. Comment out the regions you\n# don't want. Order is important.\nregion order:\n- override: true\n- China\n- Hong Kong\n- Taiwan\n- Singapore\n- Asia\n- World\n- USA\n- Canada\n- UK\n- Australia\n- New Zealand\n- Ireland\n- Europe\n- Japan\n- Thailand\n- Spain\n- Mexico\n- Argentina\n- Latin America\n- Brazil\n- Portugal\n- France\n- Belgium\n- Netherlands\n- Germany\n- Austria\n- Italy\n- Switzerland\n- Korea\n- Russia\n- Ukraine\n- Estonia\n- Poland\n- Latvia\n- Lithuania\n- Denmark\n- Norway\n- Sweden\n- Scandinavia\n- Finland\n- Iceland\n- Hungary\n- Czech\n- Greece\n- Macedonia\n- India\n- South Africa\n- Israel\n- Slovakia\n- Turkey\n- Croatia\n- Slovenia\n- United Arab Emirates\n- Bulgaria\n- Romania\n- Albania\n- Serbia\n- Indonesia\n- Unknown\n# ===========\n# VIDEO ORDER\n# ===========\n# Priority for titles with a video tag in their name. Do not comment out any\n# lines.\nvideo order:\n- override: true\n- PAL\n- PAL 60Hz\n- MPAL\n- NTSC\n- SECAM\n# ============================\n# LIST NAMES PREFIX AND SUFFIX\n# ============================\n# If the --listnames option is used, you can optionally add a prefix and\n# suffix to each title.\n#\n# If you start a prefix with http://, https://, or ftp://, each line in the\n# list will be URL encoded.\n#\n# The text must be inside double quotes. You must escape other double quotes\n# and backslashes inside the quotes like so: \\\", \\\\\nlist prefix:\n- \"http://www.example.com/\"\nlist suffix:\n- \".zip\"\n# ====================================\n# GLOBAL EXCLUDE AND INCLUDE OVERRIDES\n# ====================================\n# Override Retool and force exclude or include specific titles by adding your own\n# text to match against. Items in the list are case sensitive. See the\n# documentation for more information, and pay particular attention to how system\n# overrides interact with global overrides.\n#\n# The formatting is as follows:\n#\n# * Plain text indicates a partial string match.\n# * A prefix of / indicates a regular expression match.\n# * A prefix of | indicates a full string match.\n# * Additionally, wrap a string in &lt;&gt; to also remove any match's related clones.\n#\n# The text must be inside double quotes. You must escape double quotes and\n# backslashes like so: \\\", \\\\\n#\n# Comment out lines you don't want.\nexclude:\n# - \"[b]\"\n# - \"/.*?\\(Virtual*\"\ninclude:\n# - \"|My favorite title (Japan)\"\n# ============\n# POST FILTERS\n# ============\n# After Retool has finished processing, remove all titles except the ones that\n# match the text listed here. Items in the list are case sensitive. See the\n# documentation for more information.\n#\n# The formatting is as follows:\n#\n# * Plain text indicates a partial string match.\n# * A prefix of / indicates a regular expression match.\n# * A prefix of | indicates a full string match.\n#\n# The text must be inside double quotes. You must escape double quotes and\n# backslashes like so: \\\", \\\\\n#\n# Comment out lines you don't want\nfilters:\n- override: false\n# - \"/.*?\\(Virtual*\"\n# - \"|My favorite title (Japan)\"\n# ======================\n# EXCLUSIONS AND OPTIONS\n# ======================\n# You should use the GUI to generate these options, even if you\n# intend to use the CLI. Add a DAT, go the the System settings\n# tab, and then change the exclusions and options to populate\n# this section.\nexclusions and options:\n- override exclusions: true\n- override options: true\n- d\n- e\n- listnames\n- log\n- nodtd\n- nofilters\n- r\n- regionsplit\n- removesdat\n- singlecpu\n- trace: \"Metal Gear Solid\"\n- warningpause\n- warnings\n- y\n- z\n- exclude: AaBbcdDekmMopPruv\n</code></pre>"},{"location":"terminology/","title":"Terminology","text":"<p>Retool inherits a lot of terminology already established by ROM managers, and adds its own. This page contains the definitions for many of the terms used in Retool and its documentation.</p> <p>When you see a dotted link, it means the link points to another definition on this page.</p>"},{"location":"terminology/#1g1r","title":"1G1R","text":"<p>\"One game, one ROM.\" Putting aside the fact that not everything is a ROM, 1G1R is an ideal that states that for the many, many different versions of a single title that are available around the world, you should only really possess one. It then becomes a question of which one... which is what Retool is designed to help with.</p>"},{"location":"terminology/#clone-lists","title":"Clone lists","text":"<p>Clone lists are JSON files that manually define relationships between titles that Retool ordinarily wouldn't automatically pick up. They're useful both for matching titles of completely different names, and for overriding some of the default choices that Retool makes.</p> <p>Clone lists are stored in the <code>clonelists</code> subfolder, organized by system name. Retool selects the correct clone list by checking the <code>&lt;name&gt;</code> tag in the header of the input DAT file, and then looking for a matching filename in the <code>clonelists</code> folder. If a file isn't found, then only Retool's automatic clone detection is used.</p> <p>Learn more about clone lists</p>"},{"location":"terminology/#compilations","title":"Compilations","text":"<p>A title that in itself contains multiple titles. They might be from the same series of games, a single publisher, or completely unrelated.</p>"},{"location":"terminology/#datsdat-files","title":"DATs/DAT files","text":"<p>So called because they're files that usually have the extension <code>.dat</code>. They contain a catalog of titles, usually focused on a single system like the Atari 2600 or Sega Master System. A DAT often contains attributes for each of its titles, including file names, hashes, and sizes.</p> <p>Used in combination with a ROM manager, the information in a DAT can be used to audit files on your hard drive to ensure that they are named correctly, and that they match the attributes recorded in the DAT file.</p> <p>DAT files usually follow one of two standards: either a variant on the XML-based LogiqX format, or the less commonly used CLRMAMEPro format. There are many more less common formats.</p> <p>Retool supports DAT files released by two groups: No-Intro and Redump.</p>"},{"location":"terminology/#implied-languages","title":"Implied languages","text":"<p>An implied language is the dominant language for a region. For the USA, it's English, Brazil has an implied language of Portuguese, and so on. Implied languages are used when a title doesn't have languages listed explicitly in its name, or in an associated metadata file. They're also used when a user doesn't set an explicit language priority \u2014 when this happens, Retool builds an implied language priority based on the user's region choices.</p> <p>Implied languages help Retool to determine the intent of a user when it comes to selecting a 1G1R title. For example, if a user has set the following region order:</p> <ol> <li> <p>USA</p> </li> <li> <p>Canada</p> </li> </ol> <p>And Retool is considering the following titles:</p> <pre><code>This is a title (USA) (Es)\nThis is a title (Canada)\n</code></pre> <p>If the user doesn't explicitly set any language priorities, Retool implies from the choice of USA as the top region that the user's preferred language in this situation is English, and the USA title in this example only supports Spanish. It also knows that English is the dominant anguage in Canada, and so even though that title has no explicit language tags, there's a good chance it's in English. In this scenario, even though USA is ranked higher than Canada, the Canadian title is chosen as it has a higher chance of being in English.</p> <p>Some regions don't have an implied language. For example, a title from Asia could be in Chinese, Japanese, English, or otherwise, but because you can't tell without explicit data, an implied language isn't assigned.</p>"},{"location":"terminology/#metadata-files","title":"Metadata files","text":"<p>Metadata files are JSON files that hold extra information about titles not included in their DAT files. At this point in time, this means extra language data scraped from No-Intro and Redump's databases.</p> <p>Metadata files are stored in the <code>metadata</code> subfolder, organized by system name. Retool selects the correct metadata file by checking the <code>&lt;name&gt;</code> tag in the header of the input DAT file, and then looking for a matching filename in the <code>metadata</code> folder. If a file isn't found, then only the languages specified in the title's full name are used, or the languages inferred from the region of the title.</p>"},{"location":"terminology/#parents-and-clones","title":"Parents and clones","text":"<p>DAT files can mark titles as being a \"clone\" of a \"parent\" title \u2014 effectively setting up a relationship between two or more titles. Some DAT files are even marked as specifically containing parent/clone relationships, and these relationships are used to produce the poor standard of 1G1R experienced in most other tools.</p> <p>The concept comes from MAME, and enables one of the ways in which it organizes its ROMs. In a split set, the parent ROM contains the base or common files for a game, and is often the latest version of a game. It is in itself a complete version of a game. Clone ROMs, on the other hand, only contain files that are different from the parent. If you load a clone game in MAME, it's smart enough to load the required base files from the parent, and then any of the modified files it needs from the clone to create a full title.</p> <p>This existing parent/clone infrastructure in DAT files was taken advantage of by No-Intro as a way to introduce 1G1R into its sets. The parent and clone designation starts to lose meaning here, as all ROMs, discs, or otherwise are complete titles in No-Intro, not a series of files. In this scenario it doesn't matter which title is designated as a parent or clone in the DAT \u2014 it's just a way to indicate a relationship so ROM managers can select a 1G1R title based on a user's region and language preferences.</p> <p>In the case of Retool, when using this terminology every title that's related to each other is considered a clone. The selected 1G1R title is called exactly that \u2014 the 1G1R title.</p>"},{"location":"terminology/#rom-managers","title":"ROM managers","text":"<p>ROM managers read DAT files, and organize files on your hard drive according to the data found inside those DAT files. They are primarily used to verify that you have a known good dumps of ROMs or disc images according to certain datting groups like No-Intro, Redump, and TOSEC, and authors of emulators like MAME.</p> <p>The most popular ROM managers are CLRMamePro and RomVault. If you've never used a ROM manager before, the learning curve can be quite steep.</p>"},{"location":"terminology/#supersets","title":"Supersets","text":"<p>Supersets are versions of titles that contain more content, or for some reason are superior to another version. This might include, for example, a Game of the Year edition, an all-in-one pack that bundles a game and all its DLC, or a DVD version of a title previously released on multiple CDs.</p> <p>Occasionally a superset might be a title with a minor advantage compared to the others in its group: for example, the Japanese version of Sonic the Hedgehog is in English, but compared to the USA version has additional parallax effects. Fahrenheit, the European version of Indigo Prophecy has uncensored content. These are still considered supersets.</p> <p>Caution</p> <p>Censorship or licensing changes aren't always a reason for designating something as a superset. Quite often such changes involve a simple sprite or palette swap that doesn't materially affect a game, and there's no guarantee there weren't other bug fixes included along the way. If you disagree with a choice Retool makes, you can always set your own user filters.</p>"},{"location":"terminology/#tags","title":"Tags","text":"<p>Tags indicate properties of a title, and are usually appended to a title's name in a DAT file. They are always surround by parentheses. For example, <code>(USA)</code>, <code>(Disc 1)</code>, <code>(En,De)</code>, <code>(Special Edition)</code> and so on.</p>"},{"location":"terminology/#titles","title":"Titles","text":"<p>Entire games or applications. A title has properties, like a name, the regions it was released in, the languages it supports, and more. In an XML-based DAT file, it's often represented by the <code>&lt;game&gt;</code> node.</p>"},{"location":"user-config/","title":"user-config.yaml example","text":"<p>This file should be stored in the <code>config</code> folder.</p> <pre><code>---\n# ==============\n# LANGUAGE ORDER\n# ==============\n# If the -l option is used, only include titles with the following languages.\n# Comment out languages you don't want. Order is important.\nlanguage order:\n# - English\n# - Afrikaans\n# - Albanian\n# - Arabic\n# - Basque\n# - Bulgarian\n# - Catalan\n# - Chinese\n# - Cornish\n# - Croatian\n# - Czech\n# - Danish\n# - Dutch\n# - Estonian\n# - Finnish\n# - French\n# - Gaelic\n# - German\n# - Greek\n# - Hebrew\n# - Hindi\n# - Hungarian\n# - Icelandic\n# - Indonesian\n# - Italian\n# - Japanese\n# - Korean\n# - Latvian\n# - Lithuanian\n# - Macedonian\n# - Norwegian\n# - Polish\n# - Portuguese\n# - Punjabi\n# - Romanian\n# - Russian\n# - Serbian\n# - Slovak\n# - Slovenian\n# - Spanish\n# - Swedish\n# - Tamil\n# - Thai\n# - Turkish\n# - Ukranian\n# ============\n# REGION ORDER\n# ============\n# Only include titles with the following regions. Comment out the regions you\n# don't want. Order is important.\nregion order:\n- USA\n- World\n- Canada\n- Europe\n- UK\n- Australia\n- New Zealand\n- Singapore\n- Ireland\n- Japan\n- Asia\n- Thailand\n- Spain\n- Mexico\n- Argentina\n- Latin America\n- Brazil\n- Portugal\n- France\n- Belgium\n- Netherlands\n- Germany\n- Austria\n- Italy\n- Switzerland\n- Hong Kong\n- China\n- Taiwan\n- Korea\n- Russia\n- Ukraine\n- Estonia\n- Poland\n- Latvia\n- Lithuania\n- Denmark\n- Norway\n- Sweden\n- Scandinavia\n- Finland\n- Iceland\n- Hungary\n- Czech\n- Greece\n- Macedonia\n- India\n- South Africa\n- Israel\n- Slovakia\n- Turkey\n- Croatia\n- Slovenia\n- United Arab Emirates\n- Bulgaria\n- Romania\n- Albania\n- Serbia\n- Indonesia\n- Unknown\n# ===========\n# VIDEO ORDER\n# ===========\n# Priority for titles with a video tag in their name. Do not comment out any\n# lines.\nvideo order:\n- NTSC\n- PAL\n- PAL 60Hz\n- MPAL\n- SECAM\n# ============================\n# LIST NAMES PREFIX AND SUFFIX\n# ============================\n# If the --listnames option is used, you can optionally add a prefix and\n# suffix to each title.\n#\n# If you start a prefix with http://, https://, or ftp://, each line in the\n# list will be URL encoded.\n#\n# The text must be inside double quotes. You must escape other double quotes\n# and backslashes inside the quotes like so: \\\", \\\\\nlist prefix:\n# - \"This text will be at the start of each line\"\nlist suffix:\n# - \"This text will be at the end of each line\"\n# ====================================\n# GLOBAL EXCLUDE AND INCLUDE OVERRIDES\n# ====================================\n# Override Retool and force exclude or include specific titles by adding your own\n# text to match against. Items in the list are case sensitive. See the\n# documentation for more information, and pay particular attention to how system\n# overrides interact with global overrides.\n#\n# The formatting is as follows:\n#\n# * Plain text indicates a partial string match.\n# * A prefix of / indicates a regular expression match.\n# * A prefix of | indicates a full string match.\n# * Additionally, wrap a string in &lt;&gt; to also remove any match's related clones.\n#\n# The text must be inside double quotes. You must escape double quotes and\n# backslashes like so: \\\", \\\\\n#\n# Comment out lines you don't want.\nexclude:\n# - \"[b]\"\n# - \"/.*?\\(Virtual*\"\ninclude:\n# - \"|My favorite title (Japan)\"\n# ============\n# POST FILTERS\n# ============\n# After Retool has finished processing, remove all titles except the ones that\n# match the text listed here. Items in the list are case sensitive. See the\n# documentation for more information.\n#\n# The formatting is as follows:\n#\n# * Plain text indicates a partial string match.\n# * A prefix of / indicates a regular expression match.\n# * A prefix of | indicates a full string match.\n#\n# The text must be inside double quotes. You must escape double quotes and\n# backslashes like so: \\\", \\\\\n#\n# Comment out lines you don't want\nfilters:\n# - \"/.*?\\(Virtual*\"\n# - \"|My favorite title (Japan)\"\n# ============\n# GUI SETTINGS\n# ============\n# GUI settings only, not used by the CLI.\ngui settings:\n- exclude:\n- output:\n</code></pre>"},{"location":"what-qualifies-as-a-clone/","title":"What qualifies as a clone?","text":"<p>There's a lot of subjectivity in deciding whether a title is a clone of another. Retool follows these guidelines to identify clones when looking at a set of titles:</p> <ul> <li>Revisions, rereleases, and preproduction variations of the same title.</li> <li>Titles that are identical aside from their title screen or the languages available.</li> <li>Titles with only cosmetic differences, such as reskins or sprite swaps.</li> </ul> <p>The decision isn't always clear-cut. A game might not qualify as a clone, for example, if it has unique levels or gameplay attributes that aren't a superset of another title. Every situation is approached on a case-by-case basis.</p> <p>Demos are not considered clones of their complete variants. This is because some demos provide a unique experience not replicated in the full version of a game.</p> <p>BIOSes are never considered clones of other titles, even if they contain games, come from different regions, or are different revisions. This is because some emulators can be sensitive to the BIOS being run in combination with a particular game.</p> <p>Remasters and remakes are usually considered their own games.</p>"},{"location":"includes/file/","title":"File","text":"<p>retool-2.01.4-win-x86-64.zip</p>"},{"location":"includes/sha256/","title":"Sha256","text":"<p>9ae79cf49134d144449e280bea2943113b2a78bf19ccf58e1a37337b7bbcc83e</p>"}]}