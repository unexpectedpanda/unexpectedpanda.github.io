{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#retool","title":"Retool","text":"<p>Retool is no longer maintained</p> <p>Read the thread for more information on what this means.</p> <p>Retool is a filter utility for Redump and No-Intro DAT files. By customizing the DAT files before you load them into a ROM manager, you can more effectively trim, consolidate, and deduplicate your ROM sets.</p> <p></p> <p>Retool offers the following features:</p> <ul> <li> <p>Superior One Game, One ROM (1G1R) functionality compared to other tools.</p> </li> <li> <p>Priority-based region and language filtering.</p> </li> <li> <p>Exclusions of unwanted title types like demos, applications, and more.</p> </li> <li> <p>Custom regular expression filters for including or excluding titles.</p> </li> <li> <p>Local filenames for titles, such as <code>`\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9\u2161 \u300e\u53e4\u306e\u5c01\u5370\u300f</code> instead of   <code>Shining Force II - Inishie no Fuuin</code>.</p> </li> <li> <p>CLI and GUI versions.</p> </li> </ul> <p>You add your DAT files to Retool, and it creates new DAT files with all your preferences, leaving the originals intact. You can then load the new DAT files in a ROM manager like RomVault, CLRMamePro, or IGIR to do your file management \u2014 you just don't need to use their 1G1R modes, as Retool has already done the work for you.</p> <p>Download Retool</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#242-2025-10-06","title":"2.4.2 (2025-10-06)","text":"<ul> <li> <p>Change: The <code>&lt;rom&gt;</code> elements in output DAT files are now listed in alphabetical    order based on file name. This makes it easier to find problems when analyzing DAT    files.</p> </li> <li> <p>Fix: Removed video regular expressions from the tags Retool ignores when grouping    titles together. These were added accidentally in 2.4.0.</p> </li> <li> <p>Fix: Original header output now works again for custom No-Intro DAT files (for    example, RVZ and WUX versions of Redump DAT files). Turns out reading the file in as    bytes required extra work to deal with LF line endings.</p> </li> <li> <p>Fix: The data source that provided RetroAchievement hashes has switched from    providing ISO, BIN, and CHD hashes to CHD and RVZ hashes. As such, Retool can now add    RetroAchievements labels to    MAME Redump DAT files.</p> </li> </ul>"},{"location":"changelog/#241-2025-08-13","title":"2.4.1 (2025-08-13)","text":"<ul> <li> <p>Fix: Turns out pathing in QT is case sensitive, and a path rename broke wherever there   were arrow icons on buttons. This has now been fixed.</p> </li> <li> <p>Fix: The <code>&lt;retool&gt;</code> element is now added to output DAT file headers again in all   circumstances. This enables the skipping of files that have already been processed.</p> </li> <li> <p>Fix: Added a Benesse ID regex to version detection.</p> </li> </ul>"},{"location":"changelog/#240-2025-08-11","title":"2.4.0 (2025-08-11)","text":"<p>Consider this update a bonus, as I wanted to correct a few things. It isn't a sign of future updates to come.</p> <p>Redump clone lists have been updated. No-Intro clone lists... maybe, maybe not. Pulling No-Intro data is just as arduous as it's ever been, its bot protection and missing downloads frustrating automating the process.</p> <p>The primary focus of this update is fixing coding sins of the past, while making memory and speed improvements.</p> <p>Benchmarking platform:</p> <ul> <li> <p>CPU: Intel Core i7 14700K (28 threads across 8 P-Cores and 12 E-cores)</p> </li> <li> <p>RAM: 64GB DDR DD5-6400</p> </li> <li> <p>Disk: Samsung SSD 990 Pro 2TB</p> </li> </ul> <p>Windows 10, Python 3.13.3 results:</p> DAT file Number of titles Options <p>DAT processing time</p> <p>(seconds, averaged over five runs)</p> <p>Peak memory usage</p> <p>(Resident size, MB)<p> <p>Measured by memory-profiler</p> v2.3.9 v2.4.0 Improvement v2.3.9 v2.4.0 Improvement Commodore - Amiga CD 567 Default 1.45 0.35 4.14x 54.70 47.60 1.15x Nintendo - Nintendo 3DS (Digital) (CDN) 10,152 Default 66.51 4.67 14.24x 298.10 197.80 1.51x Nintendo - Nintendo Entertainment System 6,965 Default 3.71 2.68 1.38x 143.00 120.20 1.19x Sony - PlayStation 10,776 Default 4.88 2.83 1.72x 286.50 207.70 1.38x Sony - PlayStation 10,776 Exclude <code>aABcdDefmMopPruv</code> 10.58 3.04 3.48x 271.20 192.50 1.41x <p>Ubuntu 24.04.2 LTS on WSL, Python 3.12.3 results:</p> DAT file Number of titles Options <p>DAT processing time</p> <p>(seconds, averaged over five runs)</p> <p>Peak memory usage</p> <p>(Heap size, MB)</p> <p>Measured by Memray</p> <p>Peak memory usage</p> <p>(Resident size, MB)</p> <p>Measured by Memray v2.3.9 v2.4.0 Improvement v2.3.9 v2.4.0 Improvement v2.3.9 v2.4.0 Improvement Commodore - Amiga CD 567 Default 0.35 0.34 1.03x 15.47 12.64 1.22x 67.13 62.92 1.07x Nintendo - Nintendo 3DS (Digital) (CDN) 10,152 Default 63.75 3.70 17.23x 235.40 70.96 3.32x 336.40 126.10 2.67x Nintendo - Nintendo Entertainment System 6,965 Default 5.93 1.56 3.80x 52.50 28.01 1.87x 113.30 79.79 1.42x Sony - PlayStation 10,776 Default 3.63 2.24 1.62x 181.20 65.76 2.76x 255.80 118.10 2.17x Sony - PlayStation 10,776 Exclude <code>aABcdDefmMopPruv</code> 8.27 2.31 3.58x 182.10 66.83 2.72x 257.60 118.80 2.17x <p>While I've done my best to equalize performance between Windows and Linux, the Python interpreter on Linux is much better than on Windows for multiprocessing, even when Linux is running under Windows. Mostly this is because of the different ways Python starts a process on different operating systems. Perhaps by the time the thread-free model becomes the default in Python and has been optimized things will change a little \u2014 but that's not going to happen for at least another year or more.</p> <p>For curiosity, I ran the same Sony - PlayStation DAT file on Retool 0.53, which dates back to 2020. It took 2m, 10.51s to complete. Now it's down to 2.83s, a 46x speed improvement in five years. Knowledge is a crazy thing. At this point in time there probably isn't many big performance wins left to squeeze out, just a collection of infinite tiny tweaks of diminishing returns that are likely not worth making.</p> <p>Here are the changes for 2.4.0:</p> <ul> <li> <p>Feature: Retool can now assign titles as RetroAchievements compatible by adding a     <code>retroachievements=\"yes\"</code> attribute on <code>game</code> or <code>machine</code> tags. You can also set your     1G1R title selection to prefer RetroAchievement titles. RetroAchievements data is     retrieved from an external source. If the source stops updating or becomes     unavailable, using RetroAchievements features won't be effective.</p> </li> <li> <p>Feature: Unrecognized attributes in <code>game</code> and <code>machine</code> elements are now passed     through to the output DAT file.</p> </li> <li> <p>Feature: Unrecognized child elements in the <code>game</code> and <code>machine</code> elements are     now passed through to the output DAT file.</p> </li> <li> <p>Change: There's now a <code>versionIgnore</code> array in <code>internal-config.json</code>, which     details the titles that shouldn't be picked up by automatic version detection.     Retool's version detection originally caused confusion in creating clone lists, where     you'd have to get tricky with workarounds for titles like Pokemon - Black Version 2,     as Retool would see it as version 2.0 of Pokemon - Black \u2014 not its own game.</p> <p>Now, so long as those problem titles are in the <code>versionIgnore</code> array, you can refer to them directly in the clone lists instead of using workarounds.</p> </li> <li> <p>Change: Windows no longer uses the maximum amount of CPU cores available to it     in all scenarios. The cost of spinning up a process in Python under Windows is very     high, meaning that using more cores can mean less performance than fewer cores in     many cases. Instead, Retool makes a ballpark guess at the best number of processes to     use for best performance. While there is a penalty for adding processes in Linux as     well, the total processing time is still so small you may as well just use all cores     anyway. MacOS likely suffers the same fate as Windows as it also uses the <code>spawn</code>     method instead of <code>fork</code> to create a process, but I don't have the hardware to test,     so no changes have been made there.</p> </li> <li> <p>Change: Removed the Include titles without hashes or sizes option, as it was     tied to old code that was no longer used.</p> </li> <li> <p>Change: CLRMAMEPro DAT files are no longer converted to LogiqX before     processing. Instead, data gets ingested directly.</p> </li> <li> <p>Change: Retool no longer checks for XML external entity attacks, as its DAT file     parsing doesn't resolve these entities anyway.</p> </li> <li> <p>Change: DTD validation is no longer performed against a LogiqX DAT file. It's     clear people aren't really following the DTD, and the validation just takes up     processing time.</p> </li> <li> <p>Change: Output files now terminate with an empty line for easier diff     comparisons.</p> </li> <li> <p>Change: MIAs are no longer labelled by default. The <code>--nolabelmia</code> flag has been     inverted to be <code>--labelmia</code>.</p> </li> <li> <p>Change: MIA data is now downloaded from an external source. If the source stops     updating or becomes unavailable, marking MIAs won't be effective.</p> </li> <li> <p>Change: The option to remove MIAs now removes the entire title if it's missing a     file, not just the individual file from the title.</p> </li> <li> <p>Change: Numbered DAT files are now output sorted according to their number, not     their name without the number.</p> </li> <li> <p>Change: Since Retool's code base has matured enough, and there are now enough     tests to find problems, Retool no longer checks for clones that are also assigned as     parents. Files should process faster as a result.</p> </li> <li> <p>Fix: Redump now uses two sets of language tags for some titles. For example,     Gears of War 2 (Europe) (En,Fr,De,Es,It,Zh,Ko,Pl,Ru,Cs,Hu) (En,Es,It) and     Ultimate Action Triple Pack (Europe) (En,Fr,De,Es,It,Nl,Pt) (En,Fr,De). The     second set of languages unfortunately is used to mean more than one thing, so is not     useful for filtering based on the filename alone. For example, in     Gears of War 2 (Europe) (En,Fr,De,Es,It,Zh,Ko,Pl,Ru,Cs,Hu) (En,Es,It), English,     Spanish, and Italian are the spoken languages available for the title. For     Ultimate Action Triple Pack (Europe) (En,Fr,De,Es,It,Nl,Pt) (En,Fr,De) however,     the second set of languages represents the common languages found in each of the games     in the compilation:</p> <ul> <li> <p>Deus Ex: Human Revolution (BLES-01151) (v01.00) (Fr,De,Es,It)</p> </li> <li> <p>Hitman: Absolution (BLES-01403) (v01.00) (En,Fr,Es)</p> </li> <li> <p>Thief (BLES-01982) (v01.01) (En,Fr,De,Es,It,Pl,Ru)</p> </li> </ul> <p>In the compilation's case, the second language block is being used as a marker of where the title was intended to be distributed, since Redump is unable to add new regions to their system.</p> <p>Since this data is not presented in a syntax that's useful for filtering, the second language tag is now stripped by Retool, and only the first is used to determine language.</p> </li> <li> <p>Fix: You could turn on a system setting override in the GUI, but turning it off     again wouldn't save the off state in the config. This has been fixed.</p> </li> <li> <p>Fix: When you enabled Prefer titles ripped from modern rereleases, the     output file name added a code of <code>-r</code>, which is actually for     Prefer licensed over unlicensed titles. A code of <code>-z</code> is now used, as intended.     The content of the output DAT file was always correct, so no fix was required there.</p> </li> <li> <p>Fix: Fixed a crash when using include overrides.</p> </li> <li> <p>Fix: If one line was marked in the include or exclude overrides to remove     related titles, Retool removed the related titles for all lines in the include or     exclude overrides. This has been fixed.</p> </li> <li> <p>Fix: If titles can be removed due to more than one exclusion setting, they now     always show up in the same exclusion category in the report.</p> </li> <li> <p>Fix: Fixed a stat counting bug to do with supersets.</p> </li> <li> <p>Fix: Fixed the <code>cloneof</code> property in legacy mode being set as a non-numbered     name in numbered DAT files.</p> </li> <li> <p>Fix: Fixed CLRMAMEPro BIOS DAT files from Redump exporting with a category of     <code>Console</code> instead of <code>BIOS</code>.</p> </li> <li> <p>Fix: Fixed the exclude and include options comment in system config files, so     it now correctly says \"SYSTEM\" instead of \"GLOBAL\".</p> </li> <li> <p>Fix: Some version comparison bugs were squashed.</p> </li> <li> <p>Chore: Created custom checkboxes as SVGs, as QT's default checkboxes don't scale     properly. Amusingly I'd done this before for Retool's first GUI, so was able to take     some of that work as a starting point. Also fixed the down arrow on dropdown boxes, as     the default moves weirdly on 4k monitors when you mouse over it.</p> </li> <li> <p>Chore: Retool now more aggressively skips some title comparisons to avoid doing     work it doesn't have to, improving performance for large groups. This was put in place     due to Doko Demo Honya-san in the Nintendo 3DS CDN DAT file, which has 1,519 titles     bundled into the one group with no clones, and dramatically slowed down processing.</p> </li> <li> <p>Chore: Multiprocessing performance improvements. When each new process is     spawned/forked, Python does a bunch of serializing of data for each process. The more     data that goes in, the more performance tax there is for starting a process. As such,     things have been refactored to push as little as possible into each process.</p> </li> <li> <p>Chore: Memory usage improvements.</p> <ul> <li> <p>Entire DAT files are no longer loaded into memory to read them. Instead, one <code>game</code>,   <code>set</code>, or <code>machine</code> element is ingested at a time.</p> </li> <li> <p>A full copy of the original data read in from the DAT file is no longer kept to   makes override includes work.</p> </li> <li> <p>Metadata and clone list content are discarded when they're no longer used.</p> </li> </ul> </li> <li> <p>Chore: The progress bar now increments per title during the     Selecting 1G1R titles stage, instead of incrementing milestone style after each     sub-stage completes.</p> </li> <li> <p>Chore: Deduped search strings found in both <code>internal-config.json</code> and Retool's     code.</p> </li> <li> <p>Chore: Moved most of the version normalization code out of the comparison loop,     so it's only performed once per title instead of for every comparison.</p> </li> <li> <p>Chore: Overhauled how Retool handles exclusions and stats, and got a nice speed     boost out of it.</p> </li> <li> <p>Chore: Overhauled how Retool handles config file incompatibilities between     versions.</p> </li> <li> <p>Chore: Fixed doc strings so they format properly in Visual Studio code when     hovering over the function name.</p> </li> <li> <p>Chore: Corrected multiple typing hints.</p> </li> <li> <p>Chore: Added multiple tests.</p> </li> <li> <p>Chore: Did some profiling between Austin,     Memray, and     memory-profiler to reduce performance     issues.</p> </li> <li> <p>Chore: Updated dependencies. Unpinned QT version, as the bug that interfered     with testing was fixed.</p> </li> <li> <p>Chore: Almost six years into Python and apparently I missed the basics of     setting defaults in a function. Check out this function:</p> <pre><code>def message(\n    message_add: str = '',\n    message_list: list[str] = []\n    ) -&gt; list[str]:\n        message_list.append(message_add)\n\n        return message_list\n\na: list[str] = message('Hello')\nb: list[str] = message('Goodbye')\n</code></pre> <p>What is the value of <code>a</code> going to be?</p> <pre><code>&gt;&gt;&gt; print(a)\n['Hello', 'Goodbye']\n</code></pre> <p>Huh, that's weird. What about <code>b</code>?</p> <pre><code>&gt;&gt;&gt; print(b)\n['Hello', 'Goodbye']\n</code></pre> <p>The same?!</p> <p>It turns out that when you set a default for a function argument to an empty value of a mutable type, that value only gets used the first time the function runs as part of constructing and assigning that variable.</p> <p>So the first time <code>message</code> is called without specifying <code>message_list</code>, it creates the empty list, <code>[]</code>... but every subsequent time the function is called, it says \"oh hey, I've already got a reference to this variable... I'm going to use that instead!\"</p> <p>So when <code>a = message('Hello')</code> is called, <code>message_list</code> starts as <code>[]</code>, and then <code>Hello</code> is added to it. When <code>b = message('Goodbye')</code> is called... as far as Python is concerned, the value for <code>message_list</code> already exists, and it's <code>['Hello']</code>... so it appends <code>'Goodbye'</code> to it. And because that value is just a reference, and both <code>a</code> and <code>b</code> are pointing to that reference... they now both equal <code>['Hello', 'Goodbye']</code>.</p> <p>To work around this, we need some Python boilerplate that's apparently well known... that somehow I missed.</p> <pre><code>def message(\n    message_add: str = '',\n    message_list: list[str] | None = None\n    ) -&gt; list[str]:\n        message_list = message_list if message_list is not None else []\n\n        message_list.append(message_add)\n\n        return message_list\n\na: list[str] = message('Hello')\nb: list[str] = message('Goodbye')\n</code></pre> <p>Now let's see how things go:</p> <pre><code>&gt;&gt;&gt; print(a)\n['Hello']\n\n&gt;&gt;&gt; print(b)\n['Goodbye']\n</code></pre> <p>Much better, much more predictable, and this is now fixed in Retool's code.</p> </li> </ul>"},{"location":"changelog/#239-2025-03-09","title":"2.3.9 (2025-03-09)","text":"<ul> <li>Fix: Retool now handles empty description fields.</li> </ul>"},{"location":"changelog/#238-2024-05-06","title":"2.3.8 (2024-05-06)","text":"<ul> <li>Fix: Fixed post filters not working.</li> </ul>"},{"location":"changelog/#237-2024-04-28","title":"2.3.7 (2024-04-28)","text":"<ul> <li>Fix: Fixed clone list and <code>internal-config.json</code> minimum version detection.</li> </ul>"},{"location":"changelog/#236-2024-04-27","title":"2.3.6 (2024-04-27)","text":"<ul> <li> <p>Feature: You can now choose to prefer the oldest production version of a title     instead of the newest.</p> </li> <li> <p>Fix: Budget rereleases are now promoted above original titles with high     revisions. For example, <code>Example Title (USA) (PlayStation the Best)</code> is now chosen     over <code>Example Title (USA) (Rev 3)</code>. This is on the assumption that budget rereleases     most likely contain the latest revisions. This was also necessary to implement the     oldest version feature properly.</p> </li> <li> <p>Fix: Fixed the flags in the output DAT file filename to reflect system settings     when system settings are in use, instead of reflecting global settings.</p> </li> </ul>"},{"location":"changelog/#235-2024-04-27","title":"2.3.5 (2024-04-27)","text":"<ul> <li> <p>Fix: Fixed Retool crashing when Prefer titles ripped from modern rereleases     was enabled.</p> </li> <li> <p>Change: Because case can change frequently between DAT file revisions, overrides     and post filters are no longer case sensitive. This increases convenience, but also     means you're more likely to shoot your own foot off with partial and regex matches, so     caveat utilitor.</p> </li> <li> <p>Change: The way the version is reported has changed to accommodate dynamic     versioning in Hatch. Instead of 2.03.5, Retool now shows 2.3.5.</p> </li> <li> <p>Chore: Lately Windows Defender has been finding false positives on the compiled     Windows version of Retool. While there's not much that can be done about this other     than marking an exception in Defender on your machine, Python, PyInstaller, and UPX     have all been updated in the hope that enough changes have occured to prevent the     incorrect alert from happening.</p> </li> <li> <p>Chore: Cleaned up how Retool outputs to screen. Made more use of code page 437     characters to freshen up the look.</p> </li> <li> <p>Chore: Started reorganizing where functions live for future clean up and     optimizations. While I don't really expect anyone will go code diving, those who do     will find things are stored in an inconsistent fashion until this task is complete.</p> </li> </ul>"},{"location":"changelog/#2034-2024-04-08","title":"2.03.4 (2024-04-08)","text":"<ul> <li> <p>Change: When you specify <code>--output</code> in a non-interactive terminal, the output     is now written to a file, not <code>STDOUT</code>.</p> </li> <li> <p>Fix: If you didn't populate your region priority list with all the regions in     a clone list filter, the condition would fail to <code>true</code>, causing odd title selection.     This has now been fixed.</p> </li> </ul>"},{"location":"changelog/#2033-2024-04-07","title":"2.03.3 (2024-04-07)","text":"<ul> <li>Feature: Clone list and metadata updates now use threaded downloads to reduce     wait times.</li> </ul>"},{"location":"changelog/#2032-2024-04-06","title":"2.03.2 (2024-04-06)","text":"<ul> <li> <p>Fix: Fixed Retool falsely thinking CLRMAMEPro DAT files have already been     processed.</p> </li> <li> <p>Chore: Updated dependencies. Pinned PySide6 version due to a bug     that interferes with testing.</p> </li> </ul>"},{"location":"changelog/#2031-2024-04-06","title":"2.03.1 (2024-04-06)","text":"<ul> <li> <p>Change: The Prefer regions over languages setting now also overrides     superset selection.</p> </li> <li> <p>Fix: DTD file detection wasn't updated to take into account the new entry point     paths. This didn't matter on Windows, but did affect Linux and MacOS.</p> </li> </ul>"},{"location":"changelog/#2030-2024-04-06","title":"2.03.0 (2024-04-06)","text":"<ul> <li> <p>Feature: Some changes aimed at ROMVault and DATVault users:</p> <ul> <li> <p>You can now choose not to add MIA attributes to titles and ROMs from clone lists.     This is mainly useful if you're a DATVault subscriber.</p> </li> <li> <p>You can now add a quick import folder through File &gt; Settings. When you click     the Add DAT files recursively from your quick import folder button, all DAT     files in that folder and its subfolders are loaded into Retool.</p> </li> <li> <p>You can now replace your input DAT files with the Retool version instead of creating     new files. Make sure you've backed up your original DAT files first.</p> </li> <li> <p>By default, Retool no longer processes files it has already processed. You can     bypass this by going to the Options tab and enabling     Allow processing of already processed files.</p> </li> </ul> </li> <li> <p>Feature: Thanks to a rewrite of the compilations code and Retool's new testing     framework, you can now choose how to handle compilations. There are four modes:</p> <ul> <li> <p>Default: Chooses individual titles most of the time. Only chooses compilations     when they have a higher region, language, or clone list priority, or contain     unique titles. When choosing a compilation for unique titles, if other titles in     the compilation have individual equivalents, the individual titles are also     included, leading to some title duplication.</p> </li> <li> <p>Prefer individual titles: Chooses individual titles regardless of region,     language, and clone list priorities, and discards compilations unless they contain     unique games. You're likely to prefer this mode if you use ROM hacks or Retro     Achievements. When choosing a compilation for unique titles, if other titles in     the compilation have individual equivalents, the individual titles are also     included, leading to some title duplication.</p> </li> <li> <p>Keep individual titles and compilations: Ignores the relationship between     individual titles and compilations, meaning individual titles are only compared     against other individual titles, and compilations against other compilations. This     option has the most title duplication.</p> </li> <li> <p>Optimize for least possible title duplication: Beta, not recommended. Prefers     compilations to minimize file count. While this mode can save disk space, it can     be hard to tell what compilations contain based on their filename. This mode might     not choose the most optimal solution when supersets or clone list priorities are     involved.</p> </li> </ul> </li> <li> <p>Change: In Retool GUI you now set the global output path in the Paths tab.</p> </li> <li> <p>Change: The Unlicensed exclude settings are now more intuitively laid out in     Retool GUI, which allows for more granular choices.</p> </li> <li> <p>Change: The <code>u</code> exclude option in Retool CLI no longer includes aftermarket and     pirate titles. Instead, set the flags separately for each unlicensed title type: <code>u</code>     for <code>(unl)</code>, <code>f</code> for <code>(Aftermarket)</code>, <code>p</code> for <code>(Pirate)</code>.</p> </li> <li> <p>Change: A separator has been placed between the add and remove buttons in     Retool GUI, to reduce accidental clicks and to more cleanly separate functions.</p> </li> <li> <p>Change: A majority of the Retool GUI interface is now disabled during processing     to prevent settings changes while the program is working.</p> </li> <li> <p>Change: The open file dialog box now opens at the currently set folder for the     specific Retool option you're changing. This reduces needless navigation.</p> </li> <li> <p>Change: Output DAT file headers have been tweaked a little to make replacing and     splitting DAT files easier.</p> </li> <li> <p>Change: Thanks to @thiagokokada, entry points     have been set up properly for Retool. Additionally, Retool now treats the folder where     it lives as the root folder for its relative paths, no matter the current working     directory.</p> <p>This isn't consequential for Windows users running the EXE file, but to those running the Python scripts directly and launching from the command line, it means instead of navigating to the Retool folder and running <code>python retool.py</code> or <code>python retoolgui.py</code>, if you have your environment set up correctly you can just run <code>retool</code> or <code>retoolgui</code> from anywhere.</p> <p>Want to try it out? Clone Retool from the GitHub repo, navigate to the folder it was cloned to, then install it as a package with <code>pip install .</code>. Retool is then installed to your Python scripts folder, and your config files, clone lists, and metadata files are also kept there. Providing that folder is added to your system path, you can now run <code>retool</code> or <code>retoolgui</code> from any folder on the command line.</p> <p>There's a caveat: if you do things this way, every time you update Retool you need to run <code>pip install --upgrade .</code> to update the package version too, or you'll see the old version of Retool when you run <code>retool</code> or <code>retoolgui</code>.</p> </li> <li> <p>Change: <code>config/systems/template.yaml</code> is no longer needed, as Retool now     generates system config files from scratch.</p> </li> <li> <p>Fix: Compensated for yet another of No-Intro's inconsistent date formats, this     time in the (~YYYY-XX-XX) format.</p> </li> <li> <p>Fix: Retool used to try to make another decision if it ultimately chose a bad     dump, a preproduction title, or a pirate title. If the user didn't prefer modern     titles or preferred licensed titles over unlicensed, it would also try again if it     selected a title the user didn't want. This was causing selection errors, particularly     when it came to preferring regions over languages. This is now treated as a filter     instead of a recovery process and happens earlier, resulting in better title     selection.</p> </li> <li> <p>Fix: Fixed the incorrect default region order for system configs, which placed     Europe lower than the global default region order.</p> </li> <li> <p>Fix: Fixed user override titles not being excluded from the output DAT file when     they had already been reassigned groups by a clone list.</p> </li> <li> <p>Fix: Fixed the Process DAT files button not enabling if you clicked a button     to add DAT files, cancelled, then actually added DAT files.</p> </li> <li> <p>Fix: Retool now works on Windows Server 2019+.</p> </li> <li> <p>Chore: Removed the <code>(Homebrew)</code> tag from Retool's processing, as No-Intro doesn't     use it anymore.</p> </li> </ul>"},{"location":"changelog/#2022-2024-03-08","title":"2.02.2 (2024-03-08)","text":"<ul> <li> <p>Fix: Ensured MAME Redump DAT files have unique config settings, but     load Redump clone lists and metadata.</p> </li> <li> <p>Fix: Fixed titles without regions being assigned a blank set of regions     instead of being set to <code>(Unknown)</code>. This was most obvious when converting     Redump BIOS DAT files.</p> </li> <li> <p>Fix: When outputting a DAT file of removed titles while using legacy parent/clone     format, the removes DAT file no longer contains clones found in the legacy parent/clone     DAT file.</p> </li> <li> <p>Fix: More reliable sorting of exclusions and user option tags in     filenames and descriptions.</p> </li> <li> <p>Fix: If a title is in a <code>&lt;game&gt;</code> or <code>&lt;machine&gt;</code> node, that node is used in the     output DAT file.</p> </li> <li> <p>Chore: Style fixes and reduction of unnecessary work across the code     base in preparation for building out more comprehensive tests.</p> </li> </ul>"},{"location":"changelog/#2021-2024-02-18","title":"2.02.1 (2024-02-18)","text":"<ul> <li> <p>Feature: Retool now supports MAME Redump     sets. These DATs match against Redump clone lists.</p> </li> <li> <p>Feature: You can now choose to use <code>&lt;machine&gt;</code> for your title nodes in     the output DAT file instead of <code>&lt;game&gt;</code>.</p> </li> <li> <p>Change: <code>&lt;rom&gt;</code> and <code>&lt;disk&gt;</code> nodes in an input DAT file no longer need     a size assigned for Retool to process them. This is because CHDs are often     defined with only a hash.</p> </li> <li> <p>Fix: If you run Retool CLI on a folder with only one DAT file, and no     titles are in that DAT file that match your preferences, Retool no longer     ends the task with a crash.</p> </li> </ul>"},{"location":"changelog/#2020-2024-02-08","title":"2.02.0 (2024-02-08)","text":"<ul> <li> <p>Breaking change: The clone list format has changed. Update to 2.02.0     to avoid issues.</p> </li> <li> <p>Feature: You can now output a DAT using the local name of a title in     unicode, if it's available in the metadata scraped from Redump and No-Intro,     or included in a clone list. For example, instead of     <code>Shining Force II - Inishie no Fuuin (Japan)</code>, you can output     <code>\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9II \u300e\u53e4\u306e\u5c01\u5370\u300f (Japan)</code>. Tags like <code>(Japan)</code> and     <code>(Disc 1)</code> remain in English.</p> <p>Open the Local names tab to choose which languages to enable local names for, and to set language priorities for titles with multiple local names.</p> <p>This is very much a work in progress. Both No-Intro and Redump aren't consistent about recording local names, so there are plenty missing. Retool community contributions are needed to fill the gaps. Find something you think should have a local name? Create an issue or pull request, provide the correct name, and post a screenshot of the title screen or box image for validation.</p> </li> <li> <p>Feature: You can now add <code>filters</code> to a title entry in clone lists.     Think of the <code>filters</code> parameter as an easy way to isolate specific titles     in a search result, and apply changes to them based on conditions.</p> <p>For example:</p> <pre><code>{\n    \"group\": \"Bomberman GB 2\",\n    \"titles\": [\n        {\n            \"searchTerm\": \"Bomberman GB 2\",\n            \"filters\": [\n                {\n                    \"conditions\": {\"matchRegions\": [\"Japan\"]},\n                    \"results\": {\"group\": \"Bomberman GB\"}\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>In the previous example the <code>searchTerm</code> of <code>Bomberman GB2</code> finds all titles with the short name <code>Bomberman GB2</code>, and gathers them in the <code>Bomberman GB2</code> group. If the region of a title happens to include <code>Japan</code>, then that title is moved to the group <code>Bomberman GB</code> instead.</p> <p>Conditions include:</p> <ul> <li> <p><code>matchRegions</code>: <code>array[string]</code>. Regions a title must have for the   condition to be true.</p> </li> <li> <p><code>matchLanguages</code>: <code>array[string]</code>. Languages a title must have for the   condition to be true.</p> </li> <li> <p><code>matchString</code>: <code>regex string</code>. A regex string that must find a match   in a title's full name for the condition to be true.</p> </li> <li> <p><code>regionOrder</code>: <code>object[string, array[string]]</code>. The user region order   that must be fulfilled for the condition to be true.</p> </li> </ul> <p>All conditions in a filter must be true for the <code>result</code> to be executed.</p> <p>Results include:</p> <ul> <li> <p><code>categories</code>: <code>array[string]</code>. A list of categories to assign to the   title.</p> </li> <li> <p><code>englishFriendly</code>: <code>bool</code>: Whether a title is English friendly.</p> </li> <li> <p><code>group</code>: <code>string</code>. The group to assign the title to.</p> </li> <li> <p><code>localNames</code>: <code>object[string, string]</code>: Local names to assign to the   title.</p> </li> <li> <p><code>priority</code>: <code>integer</code>. The clone list priority to assign to the title.</p> </li> <li> <p><code>superset</code>: <code>bool</code>. Elevate the title to a superset.</p> </li> </ul> </li> <li> <p>Feature: You can now mark titles as \"English friendly\" in clone lists.     For example, the Japanese version of Enduro Racer on the Sega Master     System has twice as many levels as the USA version. Of what little text     there is, it's in English, but the No-Intro database lists its language as     Japanese. To make sure the Japanese version is selected even when USA is     higher in the region order, we can construct a clone list entry as follows:</p> <pre><code>{\n    \"group\": \"Enduro Racer\",\n    \"titles\": [\n        {\n            \"searchTerm\": \"Enduro Racer\",\n            \"filters\": [\n                {\n                    \"conditions\": {\n                        \"matchRegions\": [\"Japan\"]\n                    },\n                    \"results\": {\n                        \"englishFriendly\": true,\n                        \"superset\": true\n                    }\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>You don't always need a filter to apply the <code>englishFriendly</code> tag \u2014 it's available at the <code>searchTerm</code> level as well.</p> </li> <li> <p>Change: To better support regional language variants, the following     languages have been split:</p> <ul> <li> <p>Chinese is now available as Chinese (Simplified) and Chinese   (Traditional). They detect <code>Zh-Hans</code> and <code>Zh-Hant</code> respectively, but   also the generic Chinese code of <code>Zh</code>. When faced with just <code>Zh</code>, Retool   attempts to infer which written language is used based on region. This won't   be perfect \u2014 if a mismatch is found in No-Intro, get them to use the   more accurate language code. If a mismatch is found in Redump, all you can   do is request that they adopt the more accurate language codes in the   first place.</p> </li> <li> <p>Portuguese is now available as Portuguese and Portuguese (Brazilian).   Brazilian titles with no language set are now set to <code>Pt-BR</code> instead of   <code>Pt</code>.</p> </li> <li> <p>Spanish is now available as Spanish, Spanish (Latin American), and Spanish   (Mexican). Mexican titles with no language set are now set to <code>Es-MX</code>   instead of <code>Es.</code> Latin American titles with no languages set are now set to   <code>Es-XL</code>.</p> </li> <li> <p>French is now available as French and French (Canadian).</p> </li> </ul> </li> <li> <p>Change: The <code>Asia</code> region no longer has an implied language of     English. At the time this was implemented, the majority of <code>Asia</code> titles     supported English, but those days are definitely gone and there's no way     to tell language support for a title programmatically. If you find an <code>Asia</code>     title with no languages listed, get No-Intro or Redump to fix it.</p> </li> <li> <p>Change: There's now a check if a DAT file starts a filename with     <code>.</code>. In these circumstances, it's replaced with the fixed-width version,     <code>\uff0e</code>.</p> </li> <li> <p>Change: Clone lists have been refactored for greater flexibility and     to make contributing easier.</p> <ul> <li> <p>Group names in clone lists are now used verbatim, instead of being     converted to a sanitized equivalent. This means you can include     parentheses and version-like strings such as \"v2\" and they won't get     stripped, reducing potential confusion for contributors.</p> </li> <li> <p>The <code>overrides</code> array is no longer supported in clone lists. Instead,     use the <code>filters</code> parameter in the same object as a <code>searchTerm</code> in     the <code>variants</code> array.</p> <p>For example, take the King's Field problem.</p> Japanese title Equivalent USA title King's Field None King's Field II King's Field King's Field III King's Field II <p>How do we deal with King's Field (Japan) not getting mixed up with King's Field (USA), or King's Field II (Japan) getting mixed up with King's Field II (USA)?</p> <p>This is how you'd do it with old school overrides:</p> <pre><code>\"overrides\": [\n    {\n    \"searchTerm\": \"King's Field II (Japan)\",\n    \"newGroup\": \"King's Field\"\n    },\n    {\n        \"searchTerm\": \"King's Field (Japan)\",\n        \"newGroup\": \"King's Field Japan\"\n    }\n]\n</code></pre> <p>Now it's all done with <code>filters</code> in the <code>variants</code> array:</p> <pre><code>\"variants\": [\n    {\n        \"group\": \"King's Field\",\n        \"titles\": [\n            {\n                \"searchTerm\": \"King's Field\",\n                \"filters\": [\n                    {\n                        \"conditions\": {\"matchRegions\": [\"Japan\"]},\n                        \"results\": {\"group\": \"King's Field (Japan)\"}\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"group\": \"King's Field II\",\n        \"titles\": [\n            {\n                \"searchTerm\": \"King's Field II\",\n                \"filters\": [\n                    {\n                        \"conditions\": {\"matchRegions\": [\"Japan\"]},\n                        \"results\": {\"group\": \"King's Field\"}\n                    }\n                ]\n            }\n        ]\n    }\n]\n</code></pre> <p>In the previous example:</p> <ul> <li> <p>The group <code>King's Field</code> collects all titles that match the short     name <code>King's Field</code>. When Retool finds a <code>King's Field</code> title with     a region of <code>Japan</code>, it's moved to the group <code>King's Field (Japan)</code>.</p> </li> <li> <p>The group <code>King's Field II</code> collects all titles that match the short     name <code>King's Field II</code>. When Retool finds a <code>King's Field II</code> title     with a region of <code>Japan</code>, it's moved to the group <code>King's Field</code>.</p> </li> </ul> <p>It's ultimately more code, but it allows greater flexibility when combined with the rest of the <code>filters</code> options, not to mention everything now lives in the <code>variants</code> array so you don't have to look in two places. Additionally, Retool should be a bit more performant as a result of this change.</p> </li> <li> <p>The <code>categories</code> array is no longer supported in clone lists. Instead,     add a <code>categories</code> key in the same object as a <code>searchTerm</code> in the     <code>variants</code> array:</p> <pre><code>{\"searchTerm\": \"Cite des Enfants Perdus, La\", \"categories\": [\"Games\", \"Demos\"]}\n</code></pre> <p>You can also set <code>categories</code> at the top level to apply categories to every title in the group (unless categories have been set at the individual title or <code>filters</code> level). In the following example, everything in the <code>titles</code> array now has the categories of <code>Games</code> and <code>Demos</code>:</p> <pre><code>{\n    \"group\": \"City of Lost Children, The\",\n    \"categories\": [\"Games\", \"Demos\"],\n    \"titles\": [\n        {\"searchTerm\": \"Cite des Enfants Perdus, La\"},\n        {\"searchTerm\": \"City of Lost Children, The\"},\n        {\"searchTerm\": \"Ciudad de los Ninos Perdidos, La\"},\n        {\"searchTerm\": \"Lost Children - The City of Lost Children\"},\n        {\"searchTerm\": \"Stadt der verlorenen Kinder, Die\"}\n    ]\n}\n</code></pre> </li> <li> <p>The <code>removes</code> array is no longer supported in clone lists. Instead, set     a property of <code>\"ignore\": true</code> in the same object as a <code>searchTerm</code> in     the <code>variants</code> array:</p> <pre><code>{\"searchTerm\": \"Cite des Enfants Perdus, La\", \"ignore\": true}\n</code></pre> <p>You can also set an <code>ignore</code> at the top level to ignore every title in the group. In the following example, everything in the <code>titles</code> array is now ignored by Retool:</p> <pre><code>{\n    \"group\": \"City of Lost Children, The\",\n    \"ignore\": true,\n    \"titles\": [\n        {\"searchTerm\": \"Cite des Enfants Perdus, La\"},\n        {\"searchTerm\": \"City of Lost Children, The\"},\n        {\"searchTerm\": \"Ciudad de los Ninos Perdidos, La\"},\n        {\"searchTerm\": \"Lost Children - The City of Lost Children\"},\n        {\"searchTerm\": \"Stadt der verlorenen Kinder, Die\"}\n    ]\n}\n</code></pre> <p>As with the <code>removes</code> array, an <code>ignore</code> completely removes a title from Retool's consideration. You should only use <code>ignore</code> if you can't achieve what you want using other clone list methods.</p> </li> <li> <p>The <code>tagFree</code> name type is no longer supported in clone lists. Clone list    capability has been improved enough that it's no longer required.</p> </li> </ul> </li> <li> <p>Change: DAT filename tags have been externalized into     <code>internal-config.json</code> so the Retool application doesn't have to be updated     when No-Intro makes a change.</p> </li> <li> <p>Change: Closing the main Retool GUI now force closes the title tool     if it's open, so the app quits as expected.</p> </li> <li> <p>Change: Shifted some search terms from regex to strings for a small     speed boost.</p> </li> <li> <p>Fix: Depending on region settings, sometimes a superset could be     assigned as both a parent and clone. Retool used to remove clone     relationships in this instance to resolve conflicts, but this resulted in     unwanted supersets being in the output DAT. It now assigns titles with the     superset as a parent to the superset's parent instead.</p> </li> <li> <p>Fix: Windows: Fixed checkboxes flickering on hover on 4k monitors.</p> </li> <li> <p>Fix: Ubuntu: link colors are now more readable in dark mode, and title     tool fields are no longer white text on a white background.</p> </li> </ul>"},{"location":"changelog/#2019-2024-01-02","title":"2.01.9 (2024-01-02)","text":"<ul> <li>Added a few extra No-Intro DAT formats to take into account recent Lynx   changes.</li> </ul>"},{"location":"changelog/#2018-2023-12-10","title":"2.01.8 (2023-12-10)","text":"<ul> <li> <p>Retool now makes better selection choices when a multi-region title is     involved. Mostly this affects users that place Europe higher than USA in     their region priority, however USA users might notice improvements in some     places too, particularly when selecting single titles in preference of     compilations.</p> <p>For example, if a DAT file contains the following titles:</p> <pre><code>Example title (USA)\nExample title (USA, Europe) (Rev 1)\nExample title (Europe) (Rev 2)\n</code></pre> <p>And you put Europe above USA in your region order, Retool used to choose   <code>Example title (USA, Europe) (Rev 1)</code>, as it had multiple regions. Now, it   chooses <code>Example title (Europe) (Rev 2)</code>, giving you the higher revision.</p> <p>Additionally, language selection is now weighted higher than multi-region   selection during in-region comparison (for example, Europe versus Europe   titles, USA versus USA titles). This results in smarter selection choices,   particularly where European titles are involved.</p> <p>For example, if a DAT file contains the following titles:</p> <pre><code>Example Title (Europe, Australia) (En,It)\nExample Title (Europe) (En,De)\n</code></pre> <p>And your region order begins with Europe &gt; Germany, Retool used to select   <code>Example Title (Europe, Australia) (En,It)</code> as it had multiple regions,   even though the title that supports German is clearly the better choice   for the user. It now selects <code>Example Title (Europe) (En,De)</code> instead, as   it should.</p> </li> <li> <p>If there are duplicate <code>game</code> nodes in an input DAT, they are now removed.</p> </li> </ul>"},{"location":"changelog/#2017-2023-12-03","title":"2.01.7 (2023-12-03)","text":"<ul> <li> <p>Fixed a bug that would crash the clone list updater when it found unicode     characters.</p> </li> <li> <p>Fixed a bug that would crash Retool if you used an override to include some     compilations.</p> </li> </ul>"},{"location":"changelog/#2016-2023-12-03","title":"2.01.6 (2023-12-03)","text":"<ul> <li> <p>Added an extra code to the PlayStation 1 / 2 disc ID regex.</p> </li> <li> <p>Fixed a bug where Retool wouldn't choose between two competing supersets,     and clones wouldn't be assigned.</p> </li> <li> <p>Fixed an uncommon bug that crashed Retool when the user preferred regions     over languages.</p> </li> <li> <p>Fixed some button tooltips in the GUI that incorrectly mentioned \"regions\"     instead of \"languages\".</p> </li> </ul>"},{"location":"changelog/#2015-2023-08-05","title":"2.01.5 (2023-08-05)","text":"<ul> <li>Prevented preproduction titles being selected over modern edition titles.</li> </ul>"},{"location":"changelog/#2014-2023-07-25","title":"2.01.4 (2023-07-25)","text":"<ul> <li>Actually fixed the bug where the system language list fell back to the     global language list when empty.</li> </ul>"},{"location":"changelog/#2013-2023-07-23","title":"2.01.3 (2023-07-23)","text":"<ul> <li> <p>You can now press the <code>Del</code> key on your keyboard in the DAT, region, and     language lists to remove the selected entry.</p> </li> <li> <p>The title tool now decodes HTML entities like <code>&amp;amp;</code> in title names.</p> </li> <li> <p>The Fujitsu version code regex was modified to take into account a new     variation.</p> </li> </ul>"},{"location":"changelog/#2012-2023-07-22","title":"2.01.2 (2023-07-22)","text":"<ul> <li> <p>Fixed a bug where an empty system language list fell back to a global     language list instead of using all languages.</p> </li> <li> <p>Fixed a bug that crashed Retool when a trace string was entered in the     global settings, the Options tab was set to override in the system     settings, and no system-level trace string was entered.</p> </li> <li> <p>Added a PlayStation Vita disc ID regex to automate one stage of choosing     between Vita titles.</p> </li> <li> <p>Added a few more demo regexes to identify different demo types.</p> </li> <li> <p>When Redump or No-Intro forgot to add the <code>(Demo)</code> tag to a title's full     name but added a category of <code>Demos</code>, Retool would append <code>(Demo)</code> to the     full, short, tag-free, and region-free names to avoid confusion with the     full version of the title.</p> <p>This lead to strange situations in clone lists where a title like <code>Example Title (USA) (Trial)</code> had a short name of <code>Example Title (Trial) (Demo)</code>. This behavior also wasn't taken into account for Retool GUI's title tools, making clone list updating harder than it needed to be for contributors.</p> <p>Now a <code>(Demo)</code> tag is only added if a title doesn't contain any of a collection of demo regexes, making short names more predictable to deal with.</p> </li> <li> <p>The title tool now has a checkbox for when a title has a DAT category of     <code>Demos</code>, which can affect how a title's names are generated.</p> </li> </ul>"},{"location":"changelog/#2011-2023-07-16","title":"2.01.1 (2023-07-16)","text":"<p>Looks like post filters needed a little more testing before release. The feature now works properly.</p> <ul> <li> <p>Post filters now work if you don't have a system settings file for the DAT     you're processing.</p> </li> <li> <p>Post filters now remove superset titles that exist across multiple groups.</p> </li> <li> <p>Post filters now remove titles that are related to compilations. Previously,     even if a such a title was meant to be filtered out, it could randomly turn     up in the output DAT due to the way compilations work.</p> </li> </ul>"},{"location":"changelog/#2010-2023-07-16","title":"2.01.0 (2023-07-16)","text":"<ul> <li> <p>The Games title type is now an option for exclusion. Retool assume     titles without categories assigned in the input DAT are games. For those who     click Select all in the Exclusions tab, make sure to deselect     Games if you want to keep them.</p> </li> <li> <p>User filters have been renamed to overrides, since that's what they actually     do.</p> </li> <li> <p>Added post filters. After Retool has finished its processing, any title     matches it finds in the post filter list are kept, and everything else is     discarded. This is for those who only keep a short list of titles, but want     to make sure they're getting the latest versions via Retool's processing     first.</p> </li> <li> <p>You can now use the original input DAT header in the output DAT. This is     useful if you already have original Redump and No-Intro DATs in CLRMAMEPro,     and want to treat the Retool DAT as an update.</p> </li> <li> <p>Made several small tweaks to improve results for those who rank Europe     higher than USA in their region order. This mainly results in European     titles with languages reflecting user preferences being chosen over <code>(USA,     Europe)</code> titles that don't specify languages.</p> </li> <li> <p>During compilation comparisons, the World, Europe, and Japan regions     are considered equivalent. This was already the case for USA and World.     This means that individual World titles can be chosen in place of USA,     Europe, or Japan compilations (and vice versa).</p> </li> <li> <p>Exclusions are now much faster.</p> </li> <li> <p>Fixed a bug on exclusions that caused Retool to crash.</p> </li> <li> <p>Fixed a bug where Retool included more titles than it should when     considering multi-region titles For example,     Bonanza Bros. (USA, Europe, Korea) (En) (Rev B) and     Bonanza Bros. (Japan, Europe) (En) (Rev A) were both being kept in the     Genesis DAT. Now Retool correctly chooses only one.</p> </li> <li> <p>Fixed a bug introduced in 2.00.4 where superset titles with more languages     would be selected over higher region priority titles.</p> </li> <li> <p>Fixed a bug where setting a legacy export in the system options didn't work.</p> </li> <li> <p>Fixed a bug where some compilation titles weren't set to clones.</p> </li> <li> <p>Made some tweaks to the GUI so the interface is more solid on Windows for     4k, 150% scaled screens.</p> </li> <li> <p>An internal automated test framework is now used when making changes to     Retool. It checks the output of multiple different configurations, verifies     the output is consistent, and makes it easier to pick up errors as a result     of code changes.</p> </li> </ul>"},{"location":"changelog/#2005-2023-05-21","title":"2.00.5 (2023-05-21)","text":"<ul> <li>Fixed handling of No-Intro's quasi-RFC 3339 date format.</li> </ul>"},{"location":"changelog/#2004-2023-05-20","title":"2.00.4 (2023-05-20)","text":"<ul> <li> <p>Added another level of language selection fallback if you have a language     order specified. If Retool finds none of the languages it's looking for in     your language order when it compares titles, its next step is to check the     language order derived from your region order.</p> <p>This is most beneficial for European titles when you're filtering by a language, and want to preference but not filter by other languages. You might want to do this when you want a title that was released in a specific country, but due to No-Intro and Redump naming rules gets assigned to the Europe region.</p> <p>For example, if a DAT file has the following titles:</p> <ul> <li> <p>Example Title (Europe) (En,Fr,De,It)</p> </li> <li> <p>Example Title (Europe) (En,Es,Pt)</p> </li> </ul> <p>And you have the following region order:</p> <ol> <li> <p>Europe</p> </li> <li> <p>Spain</p> </li> <li> <p>Portugal</p> </li> <li> <p>France</p> </li> </ol> <p>And you filter by English and no other language, Retool used to choose Example Title (Europe) (En,Fr,De,It), as it contains English (the only language you specified in your language priority) and has the most languages.</p> <p>But given your region order, you've expressed a clear preference for Spanish and Portuguese above French.</p> <p>Now because of the new region order language fallback, the language order effectively becomes:</p> <ol> <li> <p>English (explicitly in the language filter, and also the implied language    for Europe)</p> </li> <li> <p>Spanish</p> </li> <li> <p>Portuguese</p> </li> <li> <p>French</p> </li> </ol> <p>You still only get titles that support English because of the filter, however this means that Retool now selects Example Title (Europe) (En,Es,Pt) instead of Example Title (Europe) (En,Fr,De,It).</p> </li> <li> <p>Added granularity back to the kept/removed list. Instead of filing every     user exclusion under \"category removes\", Retool now categorizes under     individual exclusions like \"application\", \"audio\", \"bad dump\" and so on.</p> </li> <li> <p>Made heading underlines in the kept/removed list variable depending on     heading length.</p> </li> <li> <p>Fixed an index heading in the kept/removed list that incorrectly had \"system     excludes\" instead of \"global excludes\".</p> </li> <li> <p>Made some minor GUI tweaks for consistency.</p> </li> </ul>"},{"location":"changelog/#2003-2023-05-07","title":"2.00.3 (2023-05-07)","text":"<ul> <li>Due to the influx of pirate ROMs in the No-Intro NES DAT, pirate ROMs are     now treated like bad dumps. That is, they are demoted below licensed     variations of games, even if the pirate ROM is in a preferred language and     the licensed version isn't.</li> </ul>"},{"location":"changelog/#2002-2023-04-30","title":"2.00.2 (2023-04-30)","text":"<ul> <li>Expanded support for some newer No-Intro DATs.</li> </ul>"},{"location":"changelog/#2001-2023-04-24","title":"2.00.1 (2023-04-24)","text":"<ul> <li>Expanded the demo regex to incorporate a set of Genesis demos.</li> </ul>"},{"location":"changelog/#2000-2023-04-10","title":"2.00.0 (2023-04-10)","text":"<ul> <li>Fixed grouping of titles with oddly-named video standards in the filename.</li> </ul>"},{"location":"changelog/#2000-beta-9-2023-04-07","title":"2.00.0 Beta 9 (2023-04-07)","text":"<ul> <li>Fixed conditional override priorities not working.</li> </ul>"},{"location":"changelog/#2000-beta-8-2023-04-07","title":"2.00.0 Beta 8 (2023-04-07)","text":"<ul> <li> <p>You can now drag and drop DAT files into the file list.</p> </li> <li> <p>Retool now understands preproduction compilations when comparing against     individual titles.</p> </li> <li> <p>When considering compilations, individual titles are now preferred over     compilations except in the following scenarios:</p> <ul> <li> <p>The compilation has a higher priority primary region than the individual   title (during compilation comparisons, the World and USA regions are   considered equivalent).</p> </li> <li> <p>The compilation has a higher priority primary language than the individual   title.</p> </li> <li> <p>The individual title is set as lower priority than the compilation in the   related clone list.</p> </li> </ul> <p>Compilations are otherwise only included if they feature unique titles. This increases duplicates in the output DAT, but is much better for patches, retro achievements, and actually knowing which individual titles you have.</p> </li> <li> <p>Compilation selection has been dramatically sped up.</p> </li> <li> <p>If you overrode global settings for system languages but didn't specify any     languages, Retool used to fall back to the global language order and disable     the system languages override. This isn't what the label says: \"an empty     filter list includes all languages\". This behavior has been changed to match     the label \u2014 when you override system languages and leave an empty     filter list, it first uses the implied language order from the system     regions, and if they're not available, the implied language order from the     global regions. In both cases, this is makes sure all languages are     included.</p> </li> <li> <p>The Python version check is now done earlier, and explains to the user the     minimum version required.</p> </li> <li> <p>The CLI progress bar no longer shows if multiprocessing is disabled, to make     debugging with print and input statements easier.</p> </li> <li> <p>Fixed a bug where compilations specified in a clone list broke user filter     includes.</p> </li> <li> <p>Fixed a bug where clone list priorities could be misassigned.</p> </li> <li> <p>Fixed a bug where user-supplied regexes weren't validated for some patterns.</p> </li> <li> <p>Fixed a bug where regex escapes for a title trace that were set in the GUI     weren't interpreted properly.</p> </li> <li> <p>Polished up some rough areas of code, made some minor GUI tweaks.</p> </li> </ul>"},{"location":"changelog/#2000-beta-7-2023-03-21","title":"2.00.0 Beta 7 (2023-03-21)","text":"<ul> <li>System languages are now filtering correctly again.</li> </ul>"},{"location":"changelog/#2000-beta-6-2023-03-18","title":"2.00.0 Beta 6 (2023-03-18)","text":"<ul> <li> <p>Fixed a compilations bug introduced with the last version that added extra     titles to the output DAT.</p> </li> <li> <p>Another fix for the parent/clone warning message.</p> </li> </ul>"},{"location":"changelog/#2000-beta-5-2023-03-17","title":"2.00.0 Beta 5 (2023-03-17)","text":"<ul> <li> <p>The GUI is now resizable.</p> </li> <li> <p>GUI optimizations have been made. It's unlikely you'll notice a difference    using it, but it's easier to maintain now.</p> </li> <li> <p>Europe has been moved further up the default English region order, as    Retool's new language prioritization bypasses any particular issues there.</p> </li> <li> <p>Added an extra filter stage for compilations, checking for which title has    more of the user's languages.</p> </li> <li> <p>Fixed titles with multiple regions not being categorized into the correct    primary region. For example, <code>(Europe, Australia)</code> titles were being filtered    into the <code>Australia</code> region instead of <code>Europe</code>, which caused some duplicates    to sneak through to the final output DAT.</p> </li> <li> <p>The <code>Export</code> region for Redump titles    is now treated as equivalent to <code>World</code>.</p> </li> <li> <p>Fixed a problem where a new system config would populate selected languages    from the global config.</p> </li> <li> <p>Fixed the log not outputting in the correct folder when a system output was    selected.</p> </li> <li> <p>Fixed the parent/clone clash warning message so it displayed the correct    clone title.</p> </li> </ul>"},{"location":"changelog/#2000-beta-4-2023-03-12","title":"2.00.0 Beta 4 (2023-03-12)","text":"<ul> <li> <p>Pirate and unlicensed exclusions work again. Pirate titles have been added     to the unlicensed exclude option.</p> </li> <li> <p>The GUI documentation link now goes to the right place.</p> </li> </ul>"},{"location":"changelog/#2000-beta-3-2023-03-11","title":"2.00.0 Beta 3 (2023-03-11)","text":"<ul> <li> <p>Fixed user filter excludes not removing some excludes.</p> </li> <li> <p>Fixed system name formatting in the GUI, so the right system settings file     is referenced.</p> </li> <li> <p>Unified CLI and GUI versions, as splitting them was no longer useful.</p> </li> </ul>"},{"location":"changelog/#2000-beta-2-2023-03-10","title":"2.00.0 Beta 2 (2023-03-10)","text":"<p>A minor update to fix system user filters for No-Intro's Redump Custom DATs.</p>"},{"location":"changelog/#2000-beta-1-2023-03-05","title":"2.00.0 Beta 1 (2023-03-05)","text":"<p>Retool 2.0 is here in beta form. Ten months in the making, it'll be in beta for a few more months to get feedback and fix bugs found by users. Retool 1.x is still available from the v1 branch, although it won't receive clone list updates from this point, and issues will only be fixed for v2.</p> <p>Retool 2.0 is a hefty rewrite with a focus on static typing, better code practices, maintainability, and making things go faster.</p> <p>Check out how much things have improved over time, despite a huge increase in Retool's capability (measurements taken on a Core i7-8700K, Python 3.10):</p> <p>Redump: Sony PlayStation (10628) (2021-12-29 02-47-27)</p> Retool version DAT process time Speed vs previous 0.53 3m, 44s N/A 0.62 28.23s 7.93x 1.17 27.15s 1.04x 2.00.0 7.76s 3.50x <p>Improvement 0.53 &gt; 2.00.0: 29x speed increase</p> <p>Redump: IBM - PC Compatible (28316) (2021-07-23 22-27-03)</p> Retool version DAT process time Speed vs previous 0.53 20m, 56s N/A 0.62 2m, 4s 10.13x 1.17 1m, 27s 1.43x 2.00.0 14.88s 5.85x <p>Improvement 0.53 &gt; 2.00.0: 84x speed increase</p> <p>No-Intro: Sony - PlayStation 3 (PSN) (Updates) (20211224-182932)</p> Retool version DAT process time Speed vs previous 0.53 (Unsupported) N/A 0.62 (Unsupported) N/A 1.17 5m, 45s N/A 2.00.0 21.72s 15.88x <p>Additionally, large and complex DATs like Nintendo 3DS (Digital) (CDN) now actually finish processing in a reasonable time. A Retool user timed that DAT to take 72,776 seconds on an Intel Core i7 8700K, which equates to 20 hours, 13 minutes. Retool v2 finishes it on the same processor in 245 seconds, which is 297x faster.</p> <p>There's no doubt code in there that would still make more experienced developers shudder, but it's nice to see things get better \ud83d\ude01</p> <p>It's not all benefits though \u2014 Retool's increase in complexity means that some DATs that were previously ultra-fast in v1 are slower to complete in v2:</p> <p>No-Intro: Atari - Lynx - (20220513-205052)</p> Retool version DAT process time Speed vs previous 0.53 (Unsupported) N/A 0.62 (Unsupported) N/A 1.17 0.39s N/A 2.00.0 1.83s 0.21x <p>The total time spent is still quite brief, and is worth the price of admission for the very slow DATs to be faster and the increase in accuracy.</p> <p>Check out the following list for other changes that have come in v2.</p> Accuracy <ul> <li> <p>Language order is now taken into account. If you don't filter by languages,     the language order will be inferred from your region order. This mostly     impacts European titles, where compared to previous versions of Retool     another title might be selected to better reflect your language choices. For     example, take these titles in Redump's PlayStation DAT:</p> <ul> <li> <p>Hugo (Europe)</p> </li> <li> <p>Hugo (Europe) (Nl,Pt) (Rev 1)</p> </li> <li> <p>Hugo (Europe) (Nl,Pt)</p> </li> <li> <p>Hugo (France)</p> </li> <li> <p>Hugo (Germany)</p> </li> <li> <p>Hugo (Italy)</p> </li> <li> <p>Hugo (Scandinavia) (Da,Fi)</p> </li> <li> <p>Hugo (Scandinavia) (Sv,No)</p> </li> <li> <p>Hugo (Spain)</p> </li> </ul> <p>If you have USA as your top region, followed by Europe, Retool 1.x selects Hugo (Europe) (Nl,Pt) (Rev 1) as the 1G1R title, because it's the highest revision in Europe. Retool 2.0 realizes that because USA is your highest region, that it's looking for English titles as a priority, and selects Hugo (Europe) instead.</p> <p>This also applies to say, Japanese titles that are only in English, and a special edition is available in English in another region. For example, take these titles, again in Redump's PlayStation DAT:</p> <ul> <li> <p>Car and Driver Presents - Grand Tour Racing '98 (USA)</p> </li> <li> <p>Gekisou!! Grand Racing - Total Drivin' (Japan)</p> </li> <li> <p>M6 Turbo Racing (France)</p> </li> <li> <p>Total Drivin (Europe) (En,Fr,De,Es,It,Pt)</p> </li> </ul> <p>If you have Japan as your top region, Retool 1.x selects Gekisou!! Grand Racing - Total Drivin' (Japan) as the top title. Retool 2.0 recognizes that the Japanese title is only in English, sees that the USA title is a special edition, and selects Car and Driver Presents - Grand Tour Racing '98 (USA) instead. You may as well get more content if the title's going to be in the same language anyway.</p> <p>If you don't like this style of selection, you can turn on strict region filtering with <code>-r</code>.</p> </li> <li> <p>Compilations are now automatically handled by adding them to a system's     clone list with the correct syntax. Retool figures out the most optimal     combination of titles, taking your language and region preferences into     account. Sometimes it might look like Retool hasn't chosen the optimal     combination, but this is usually due to user region preferences and titles     being available in both the Europe region and specific European countries.     For example, take the following titles, and assume Italy is higher than     Europe in the user's region order:</p> <ul> <li> <p>2 Games in 1 - Disney Principesse + Il Re Leone (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</p> </li> <li> <p>2 Games in 1 - Disney Principesse + Koda, Fratello Orso (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</p> </li> <li> <p>Brother Bear (Europe) (Fr,De,Es,It,Nl,Sv,Da)</p> </li> </ul> <p>For those who don't speak Italian, Fratello Orso is the Italian version of Brother Bear. Therefore, the most optimal solution for disk space and minimal redundancy is:</p> <ul> <li> <p>2 Games in 1 - Disney Principesse + Il Re Leone (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</p> </li> <li> <p>Brother Bear (Europe) (Fr,De,Es,It,Nl,Sv,Da)</p> </li> </ul> <p>This works, as both titles support Italian. However, because Italy is prioritized as a region, Retool selects the Italian release of Brother Bear instead, meaning you end up with:</p> <ul> <li> <p>2 Games in 1 - Disney Principesse + Il Re Leone (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</p> </li> <li> <p>2 Games in 1 - Disney Principesse + Koda, Fratello Orso (Italy) (It+En,Fr,De,Es,It,Nl,Sv,Da)</p> </li> </ul> <p>Although you get two versions of Disney Princess, this choice is by design. The assumption is that the region-specific version of the game should enable that region's language by default, instead of requiring a language switch after boot up.</p> </li> <li> <p>Priority level 0 is now gone, replaced by a <code>supersets</code> array. It functions in     almost the same way, preferring language over region, except that order in the     clone lists doesn't determine superset priority any more. For example, here's     how things used to look for Persona 3 in Redump's PlayStation 2 DAT:</p> <pre><code>\"Shin Megami Tensei - Persona 3\": [\n  [\"Shin Megami Tensei - Persona 3 FES\", 0],\n  [\"Persona 3 FES\", 0],\n  [\"Yeosin Jeonsaeng Persona 3 FES\", 0],\n  [\"P3 - Persona 3\", 1],\n  [\"Persona 3\", 1]\n]\n</code></pre> <p>Retool used to assume the top 0 priority title had higher priority than the 0 priority title after it, and so on. Unfortunately in this scenario, we have two titles that should be the same rank: Shin Megami Tensei - Persona 3 FES, the USA version, and Persona 3 FES, the European version. In Retool v1, if someone put Europe above USA in their region order and specified English as their highest language, they would get the USA title instead of the European title that they wanted, as internally the first 0 priority title was ranked above the second.</p> <p>With the introduction of the <code>supersets</code> array, things change a little:</p> <pre><code>{\n  \"group\": \"Shin Megami Tensei - Persona 3\",\n  \"titles\": [\n    {\"searchTerm\": \"P3 - Persona 3\"},\n    {\"searchTerm\": \"Persona 3\"},\n    {\"searchTerm\": \"Shin Megami Tensei - Persona 3\"}\n  ],\n  \"supersets\": [\n    {\"searchTerm\": \"Shin Megami Tensei - Persona 3 FES\"},\n    {\"searchTerm\": \"Persona 3 FES\"}\n  ]\n}\n</code></pre> <p>Retool v2 now chooses the correct superset for the selected region, You can still specify a <code>priority</code> on supersets, just in case there are multiple supersets of varying amounts of content. That priority is only respected between supersets, and isn't related to the priority set on a <code>title</code>.</p> </li> <li> <p>You can now use regex in the <code>categories</code>, <code>overrides</code> and <code>variants</code>     objects in clone lists. Just set the <code>nameType</code> value to <code>regex</code>. The     <code>removes</code> object does not support regex.</p> </li> <li> <p>Overrides now support a <code>priority</code> key within a <code>regionOrder</code> condition.     This means a title's clone list priority can be set from within a condition     if that condition is true, not just its group and short name.</p> </li> <li> <p>You can now define clones in the <code>variants</code> object not just by short name,     but full name, region-free name, tag-free name, or regex on the full name.     While mostly you should stick to short names, this extra flexibilty can     solve some complex problems. For example     Silent Hill 2 (USA) (En,Ja,Fr,De,Es,It) (v2.01) is the USA version of     Silent Hill 2 - Director's Cut. Unfortunately, due to its title the short     name for     Silent Hill 2 (USA) (En,Ja,Fr,De,Es,It) (v2.01) is just Silent Hill 2     \u2014 exactly the same as the standard version of the game. Historically     with Retool this would mean we couldn't set unique priorities for both     titles, and would have to figure out an esoteric workaround. Now, however,     there's another way:</p> <pre><code>{\n  \"group\": \"Silent Hill 2\",\n  \"titles\": [\n    {\"searchTerm\": \"Silent Hill 2 (?:(?!USA.*v2.01).)*$\", \"nameType\": \"regex\"},\n  ],\n  \"supersets\": [\n    {\"searchTerm\": \"Silent Hill 2 (USA) (En,Ja,Fr,De,Es,It) (v2.01)\", \"nameType\": \"full\"},\n    {\"searchTerm\": \"Silent Hill 2 - Director's Cut\"},\n    {\"searchTerm\": \"Silent Hill 2 - Saigo no Uta\"}\n  ]\n}\n</code></pre> <p>The first entry effectively says \"Match every Silent Hill title except the one with USA and v2.01 in it\". We then specifically call out the v2.01 title as a superset afterward. Mind you, this is overkill. The following example works just fine:</p> <pre><code>{\n  \"group\": \"Silent Hill 2\",\n  \"titles\": [\n    {\"searchTerm\": \"Silent Hill 2\"},\n  ],\n  \"supersets\": [\n    {\"searchTerm\": \"Silent Hill 2 (USA) (En,Ja,Fr,De,Es,It) (v2.01)\", \"nameType\": \"full\"},\n    {\"searchTerm\": \"Silent Hill 2 - Director's Cut\"},\n    {\"searchTerm\": \"Silent Hill 2 - Saigo no Uta\"}\n  ]\n}\n</code></pre> <p>There's also the situation where the Japanese version of Sonic the Hedgehog is in English, and features extra parallax effects the USA version doesn't, making it the more desirable version. Even if the user preferences USA above Japan, we can still select the Japanese one:</p> <pre><code>{\n  \"group\": \"Sonic The Hedgehog\",\n  \"titles\": [\n    {\"searchTerm\": \"Sonic The Hedgehog\"},\n  ],\n  \"supersets\": [\n    {\"searchTerm\": \"Sonic The Hedgehog \\\\(Japan.*\", \"nameType\": \"regex\"}\n  ]\n}\n</code></pre> </li> <li> <p>Hong Kong's implied language is now Chinese. This is because the available     titles in No-Intro are solely in Chinese.</p> </li> <li> <p>India's implied language is now set to English, since all Indian Redump     titles feature English, and there are many English-only titles.</p> </li> <li> <p>Thailand's implied language is now set to nothing, as a number of Thai-only     titles have been dumped.</p> </li> <li> <p>Scandinavia's implied language is now set to nothing.</p> </li> <li> <p>Iceland and Icelandic have been added to the regions and languages.</p> </li> <li> <p>Retool now handles No-Intro's (Language+Language+Language) format more     efficiently, which is used exclusively in its GBA DAT.</p> </li> <li> <p>Retool now supports mastering codes for FM Towns, Nintendo, and NEC     consoles, and uses them as a versioning system.</p> </li> <li> <p>Retool now supports disc IDs of some more modern consoles and uses them as a     versioning system.</p> </li> <li> <p>Added yet another No-Intro date format, YYYY-MM-DDTHHMMSS.</p> </li> <li> <p>If there are duplicate title names in a DAT, Retool renames the dupes. As a     result, they aren't considered when selecting 1G1R titles and remain in the     DAT. Contact the DAT author to get the title renamed, as all title names     should be unique.</p> </li> <li> <p>The Redump website scraper has been majorly overhauled, which means metadata     is now more up to date. This tool is kept internal to prevent people from     spamming the Redump site.</p> </li> </ul> New features <ul> <li> <p>System settings. You can now override global settings on a per-system basis.     For example, you can set global settings that affect all of the DATs you     process, but set unique options for Sony PlayStation that override the global     settings when Retool processes that DAT.</p> </li> <li> <p>You can now disable 1G1R mode with <code>-d</code>. This is useful if you only want to     filter the input DAT by region, language, or excludes, and ignore all the     parent/clone relationships. It's also useful to use with the new     <code>--regionsplit</code> feature, which outputs multiple DATs based on the regions     you've selected.</p> </li> <li> <p>You can now prioritize titles based on their video standard, including MPAL,     NTSC, PAL, and SECAM. This only works on titles explicitly tagged with a video     standard in their name (for example, <code>(NTSC)</code>), and is processed after     languages and regions are processed. It is mainly used as a tie breaker for     titles that were released in the same region with multiple video standards.</p> </li> <li> <p>You can now additionally output a DAT file featuring all the removed titles     with the <code>--removesdat</code> argument.</p> </li> <li> <p>You can now exclude known MIA titles and individual MIA ROMs from both     No-Intro and Redump DATs by using <code>k</code> with the <code>--exclude</code> option.</p> </li> <li> <p>You can now update clone lists directly with Retool using <code>--update</code>. The DTD     file is now included as part of this bundle.</p> </li> <li> <p>You can now specify a custom clone list to load with <code>--clonelist</code>, and a     custom metadata file with <code>--metadata</code>. This is mostly useful if:</p> <ul> <li> <p>Redump or No-Intro changes their DAT names, and the clone lists/metadata   files are no longer automatically detected.</p> </li> <li> <p>You're building your own clone lists, and want to compare the output   versus the original.</p> </li> </ul> </li> <li> <p>You can now specify a custom local path where your clone lists and metadata     live. You can change this path in <code>internal-config.json</code> \u2014 check out     the <code>localDir</code> subkey under <code>clonelists</code> and <code>metadata</code>.</p> </li> <li> <p>You can use a different user config file than the default with the     <code>--config</code> argument.</p> </li> <li> <p>You can wrap custom exclude and include strings in <code>&lt;&gt;</code> to also remove all     titles related to a match. For example, <code>&lt;/Fah..nheit.*&gt;</code> would match     Fahrenheit (Europe) (En,Fr,De,Es,It), but also Indigo Prophecy (USA) as     they're linked together by clone lists.</p> </li> <li> <p>Retool GUI now lets you to add multiple DATs, or DATs recursively in a     folder.</p> </li> <li> <p>Retool GUI now lets you drag and drop regions and languages, not just use     the position buttons.</p> </li> </ul> Quality of life updates <ul> <li> <p>There's a brand new Retool website and documentation.</p> </li> <li> <p>Retool can now cope with a user entering a trailing backslash in a path in     Windows.</p> </li> <li> <p>Retool CLI now supports the * wildcard for filenames and folders.</p> </li> <li> <p>You can now download <code>internal-config.json</code> if it's missing.</p> </li> <li> <p>The help text in the CLI version of Retool has been reorganized to make     things easier to parse.</p> </li> <li> <p>A DTD check failure now only gives a warning, it doesn't exit Retool.     No-Intro introduces new violations to the schema with enough frequency that     it's not worth enforcing too strictly any more.</p> </li> <li> <p>Global user filters are now located in <code>user-config.yaml</code>.</p> </li> <li> <p>The Windows binary now has several files UPX packed. This means on disk the     size of Retool is now ~30MB smaller. The compressed archive that users     initially download has also reduced to a total of ~24MB, down from ~32MB for     Retool v1. I suspect as a result of the UPX packing some overzealous     anti-virus tools might raise a false positive for Retool. There's nothing I     can do about this, the issue is with the anti-virus suite, not Retool --     you'll just have to clear Retool to run.</p> </li> <li> <p>The GUI is now written directly in QT6 instead of using the PySimpleGUI     middleware. A lot of changes have been made, including the following     upgrades:</p> <ul> <li> <p>The GUI no longer crashes if the console portion of Retool crashes. It   simply fails to process the current DAT.</p> </li> <li> <p>The issue with the layout getting messed up when the UI was dragged   between screens of different scaling factors should be addressed. This   mostly   impacted users with both 4k and HD screens.</p> </li> <li> <p>The GUI is now more horizontally rectangular, to avoid elements going   offscreen if people have set their scaling high on low resolution monitors.</p> </li> <li> <p>You now add DATs to a list to process, not just open a single file or   folder at a time. This means you can add multiple sets of individual DATs,   multiple folders, or multiple folders recursively to the list, in any   combination.</p> </li> <li> <p>You can now drag and drop between region and language lists, and reorder   items in the selected region and language lists.</p> </li> <li> <p>A title tool is accessible from the File menu. If you enter a title's   full name from the DAT, it shows you the other names Retool assigns to it   to work its magic. This tool is only useful if you intend to contribute to   clone lists or Retool itself.</p> </li> <li> <p>You can now change some default file locations in Settings, also found   in the File menu.</p> </li> <li> <p>Select all and Deselect all buttons have been added to the   exclusions tab.</p> </li> </ul> </li> </ul> Performance and maintenance <ul> <li> <p>Improved conversion of CLRMAMEPro formatted DATs to Logiqx XML, which should     avoid some crashes and handle larger files.</p> </li> <li> <p>Removed BeautifulSoup for increased performance.</p> </li> <li> <p>Changed some functions to use multiple processors.</p> </li> <li> <p>More accurate and readable regular expressions for tag selection.</p> </li> <li> <p>Removed regex queries where not necessary, concatenated them where possible.</p> </li> <li> <p>A lot of code is now statically typed for better predictability.</p> </li> <li> <p>Extra data validation is now performed on clone lists. The upshot is: you     get a warning if things aren't formatted correctly, and even if they are,     they shouldn't crash Retool \u2014 just that clone list entry is skipped.</p> </li> </ul> Developer updates <ul> <li> <p>New clone list format. This is for consistency and to explicitly name     features, so newcomers have a better chance of understanding what's     going on and contributing.</p> <p>Old style categories</p> <pre><code>\"categories\": {\n  \"BASIC Programming\": {\n    \"match\": \"short\",\n    \"categories\": [\"Applications\"]\n  },\n  \"Color Bar Generator\": {\n    \"match\": \"short\",\n    \"categories\": [\"Applications\"]\n  }\n}\n</code></pre> <p>New style categories</p> <pre><code>\"categories\": [\n  {\n    \"searchTerm\": \"BASIC Programming\",\n    \"nameType\": \"short\",\n    \"categories\": [\"Applications\"]\n  },\n  {\n    \"searchTerm\": \"Color Bar Generator\",\n    \"nameType\": \"short\",\n    \"categories\": [\"Applications\"]\n  }\n]\n</code></pre> <p>The biggest thing to call out here is that the search term is now explicitly named, instead of being an undefined object key. Additionally, keys now us camel case. Overrides have had much the same makeover:</p> <p>Old style overrides</p> <pre><code>\"overrides\": {\n  \"CD-Action 03-1997 (10B) (Poland)\": {\n    \"new group\": \"CD-Action 03-1997 (10B) (Poland)\",\n    \"match\": \"full\"\n  },\n  \"CD-Action 06-1997 (13B) (Poland)\": {\n    \"new group\": \"CD-Action 06-1997 (13B) (Poland)\",\n    \"match\": \"full\"\n  }\n}\n</code></pre> <p>New style overrides</p> <pre><code>\"overrides\": [\n  {\n    \"searchTerm\": \"CD-Action 03-1997 (10B) (Poland)\",\n    \"nameType\": \"full\",\n    \"newGroup\": \"CD-Action 03-1997 10B Poland\"\n  },\n  {\n    \"searchTerm\": \"CD-Action 06-1997 (13B) (Poland)\",\n    \"nameType\": \"full\",\n    \"newGroup\": \"CD-Action 06-1997 13B Poland\"\n  }\n]\n</code></pre> <p>Renames have had the biggest rework. They have been renamed to variants, and are significantly more verbose. Supersets and compilations have now been split out into their own arrays, as they are treated differently by Retool. Most notably, the confusing priority <code>0</code> is no longer a thing, with that work now done by either the <code>compilations</code> or <code>supersets</code> array.</p> <p>Old style renames <pre><code>\"renames\": {\n  \"3-D Ultra Pinball\": [\n    [\"3-D Ultra Pinball\"]\n    [\"3-D Ultra Pinball &amp; Trophy Bass\", \"title_position\", 0]\n  ],\n  \"Black &amp; White (Data Disc)\": [\n    [\"Black &amp; White - Platinum Pack\", 0]\n  ],\n}\n</code></pre></p> <p>New style variants (formerly renames) <pre><code>\"variants\": [\n  {\n      \"group\": \"3-D Ultra Pinball\",\n      \"titles\": [\n        {\"searchTerm\": \"3-D Ultra Pinball\"}\n      ],\n      \"compilations\": [\n        {\"searchTerm\": \"3-D Ultra Pinball &amp; Trophy Bass\", \"titlePosition\": 1}\n      ]\n    },\n    {\n      \"group\": \"Black &amp; White (Data Disc)\",\n      \"titles\": [\n        {\"searchTerm\": \"Black &amp; White (Data Disc)\"}\n      ],\n      \"supersets\": [\n        {\"searchTerm\": \"Black &amp; White - Platinum Pack\"}\n      ]\n    },\n    {\n      \"group\": \"Trophy Bass\",\n      \"compilations\": [\n        {\"searchTerm\": \"3-D Ultra Pinball &amp; Trophy Bass\", \"titlePosition\": 2}\n      ]\n    }\n]\n</code></pre></p> <p>Not seen here: you can add <code>priority</code> and <code>nameType</code> keys to each object in the <code>titles</code>, <code>compilations</code>, and <code>supersets</code> arrays. See the documentation for more information.</p> </li> <li> <p>All user messages now go to STDERR instead of STDOUT. If you redirect the     STDOUT with &gt;, &lt;, or &gt;&gt;, the only output is now the data of the final     filtered DAT. This is most useful for those who build their own scripts and     want to chain tools together.</p> </li> <li> <p>There's a new <code>--trace</code> argument that you can use to trace a title's journey     through Retool. It's useful when you're trying to figure out where something     unexpected happens, and don't want to insert a bunch of print and input     statements. It works on regex matches and is very verbose, so be careful     with precision. Running a trace disables file output and multiprocessor     operation in some places, as it's intended for testing only.</p> </li> <li> <p>There's a new <code>--singlecpu</code> argument that you can use to run Retool on just     one CPU. Python doesn't like <code>input</code> statements when it's running things     across multiple processors, so use this argument if you're debugging     multiprocessing parts of the code.</p> </li> <li> <p>There's a new <code>--nodtd</code> argument that bypasses Logiqx's DTD validation.     Despite quoting it in their DATs, No-Intro and Redump don't validate against     the DTD schema. This effectively hides the warning that the input DAT isn't     compliant.</p> </li> <li> <p>All classes and functions now have consistent docstrings so people     (including myself) have a chance to figure out what's going on.</p> </li> <li> <p>You can add the <code>@perf_test</code> decorator to any function to run memory and     time tests.</p> </li> <li> <p>There's a new <code>config</code> object that gets passed around a lot, which contains     almost all the settings Retool needs to operate. Because it's quite large,     it can be browsed interactively by running <code>print(config)</code> where the     <code>config</code> instance is available. This should help those new to the codebase,     or myself when I'm trying to track down bugs or haven't looked at the code     in a while.</p> </li> <li> <p>The <code>input_dat</code> object can now be browsed interactively just like the     <code>config</code> object. It contains all the information about the DAT the user has     fed into Retool.</p> </li> <li> <p>Incidentally, the objects that contain the titles (DatNode objects) can also     be printed to show the title's information in a tree-like fashion.</p> </li> </ul>"},{"location":"changelog/#118-2022-08-27","title":"1.18 (2022-08-27)","text":"<ul> <li>A small change to handle a new versioning system in No-Intro.</li> </ul>"},{"location":"changelog/#117-2022-08-05","title":"1.17 (2022-08-05)","text":"<ul> <li>Retool can now handle No-Intro DATs that reference an XSD file.</li> </ul>"},{"location":"changelog/#116-2022-07-14","title":"1.16 (2022-07-14)","text":"<ul> <li> <p>The <code>&lt;name&gt;</code> tag in the output DAT header has been changed so CLRMAMEPro     recognizes DAT updates between Retool versions.</p> </li> <li> <p>The order of <code>&lt;rom&gt;</code> attributes has been changed in the output DAT to match     that of the in-progress Retool v2. This is mainly to help with internal     testing.</p> </li> <li> <p>A message has been improved that tells a user when Retool can't find titles     that match their preferences.</p> </li> </ul>"},{"location":"changelog/#115-2022-07-09","title":"1.15 (2022-07-09)","text":"<ul> <li>Titles that have invalid filename characters     (<code>:</code>, <code>\\</code>, <code>/</code>, <code>&lt;</code>, <code>&gt;</code>, <code>\"</code>, <code>|</code>, <code>?</code>, <code>*</code>) in DATs now have those     characters removed or replaced with valid ones. No-Intro metadata is     also checked for invalid filename characters.</li> </ul>"},{"location":"changelog/#114-2022-07-01","title":"1.14 (2022-07-01)","text":"<ul> <li> <p>Ring code version checking is now turned on for FM-Towns.</p> </li> <li> <p>The <code>(Homebrew)</code> tag is now recognized.</p> </li> <li> <p>When you exclude unlicensed titles, that now includes aftermarket and     homebrew titles.</p> </li> <li> <p>Unlicensed titles now get demoted if there's a production title in the same     region.</p> </li> <li> <p>Clone lists and metadata have been moved to their own repository.     This is in preparation for the shift to Retool v2.</p> </li> <li> <p>Retool CLI now prompts you to download clone lists and metadata if it finds     the <code>clonelists</code> or <code>metadata</code> folders missing.</p> </li> </ul>"},{"location":"changelog/#113-2022-05-22","title":"1.13 (2022-05-22)","text":"<ul> <li>The <code>(Headered)</code> and <code>(Headerless)</code> tags No-Intro were adding to the new NES     DATs caused Retool to not associate them with the NES clone list. This has     now been fixed.</li> </ul>"},{"location":"changelog/#112-2022-05-21","title":"1.12 (2022-05-21)","text":"<ul> <li>Retool now brings over ROM manager directives in headers, including header     skippers. This should resolve issues around things like headered DATs.</li> </ul>"},{"location":"changelog/#111-2022-05-21","title":"1.11 (2022-05-21)","text":"<ul> <li>Fixed how Retool searches for <code>rom</code> attributes to avoid incorrect substring     matches. Retool should no longer crash on game names that contain <code>mia</code>.</li> </ul>"},{"location":"changelog/#110-2022-05-20","title":"1.10 (2022-05-20)","text":"<ul> <li>Updated Retool to support <code>mia</code> attributes on <code>rom</code> elements.</li> </ul>"},{"location":"changelog/#109-2022-05-17","title":"1.09 (2022-05-17)","text":"<ul> <li>Updated Retool to support <code>header</code> attributes on <code>rom</code> elements.</li> </ul>"},{"location":"changelog/#108-2022-05-12","title":"1.08 (2022-05-12)","text":"<ul> <li>Updated Retool to support SHA256 hashes.</li> </ul>"},{"location":"changelog/#107-2022-04-23","title":"1.07 (2022-04-23)","text":"<ul> <li> <p>Changed the way Retool handles versions to deal with more complex version     systems introduced in recent No-Intro DATs. Some version selections are now     more accurate as a result.</p> </li> <li> <p>Retool can now handle empty <code>&lt;url&gt;</code> tags in DAT headers.</p> </li> </ul>"},{"location":"changelog/#106-2022-03-24","title":"1.06 (2022-03-24)","text":"<ul> <li> <p>The <code>release</code> tag now copies the <code>game name</code> attribute, instead of the     <code>description</code> tag. This is because No-Intro started using descriptions in     the GBA DAT that were different from the name.</p> </li> <li> <p>The <code>(Deprecated)</code> tag is now ignored in DAT file names when matching to     clone lists and metadata.</p> </li> </ul>"},{"location":"changelog/#105-2022-02-24","title":"1.05 (2022-02-24)","text":"<ul> <li> <p>Fixed a region selection regex bug which caused Retool to crash when     including files with specific regex custom filters.</p> </li> <li> <p>Added a more specific error message for DATs with no games.</p> </li> <li> <p>The DTD was updated to make <code>size</code> an optional attribute of <code>rom</code>.</p> </li> </ul>"},{"location":"changelog/#104-2022-01-09","title":"1.04 (2022-01-09)","text":"<ul> <li>Fixed a bug where (United Kingdom) titles in No-Intro DATs were being     recognized as (Unknown) titles as well.</li> </ul>"},{"location":"changelog/#103-2022-01-02","title":"1.03 (2022-01-02)","text":"<ul> <li> <p>The Satellaview-specific <code>(Magazine)</code> tag has been added to the multimedia     filter.</p> </li> <li> <p>The <code>(DEBUG)</code> tag has been added to the preproduction filter.</p> </li> </ul>"},{"location":"changelog/#102-2022-01-02","title":"1.02 (2022-01-02)","text":"<ul> <li> <p>Fixed a Sega ring code version comparison bug.</p> </li> <li> <p>The N-Gage-specific tag <code>(Full Trial)</code> has been added to the demos filter.</p> </li> <li> <p>The N-Gage-specific tag <code>(Review Kit ##)</code> has been added to the     preproduction filter.</p> </li> <li> <p>Fixed errors in the Redump scraper that stopped Croatian and Slovakian being     added as a language to the metadata.</p> </li> <li> <p>Added new languages: Albanian, Indonesian, Latvian, Macedonian, Serbian.</p> </li> <li> <p>Added metadata languages: Catalan, Estonian, Gaelic, Hindi, Lithuanian,     Punjabi, Tamil, Ukranian.</p> </li> </ul>"},{"location":"changelog/#101-2021-10-28","title":"1.01 (2021-10-28)","text":"<ul> <li>Fixed an issue where titles assigned to <code>BIOS</code> in a clone list weren't     removed if a user had selected to remove BIOSes.</li> </ul>"},{"location":"changelog/#100-2021-10-19","title":"1.00 (2021-10-19)","text":"<ul> <li>Fixed an issue where multiple regions caused a crash when determining the     implied language of a title.</li> </ul>"},{"location":"changelog/#099-2021-09-10","title":"0.99 (2021-09-10)","text":"<ul> <li>Fixed an issue where titles on the system include list wouldn't be     recovered.</li> </ul>"},{"location":"changelog/#098-2021-09-04","title":"0.98 (2021-09-04)","text":"<ul> <li>Fixed an issue where if a title was reassigned to the <code>Demos</code> category, and     was also featured in the <code>renames</code> object of a clone list, the clone     wouldn't be assigned.</li> </ul>"},{"location":"changelog/#097-2021-07-08","title":"0.97 (2021-07-08)","text":"<ul> <li>Fixed titles with manually set categories in clone lists being erroneously     added to remove lists when the <code>--log</code> option was set.</li> </ul>"},{"location":"changelog/#096-2021-07-04","title":"0.96 (2021-07-04)","text":"<ul> <li>Fixed DATs with an empty author field causing a crash.</li> </ul>"},{"location":"changelog/#095-2021-06-28","title":"0.95 (2021-06-28)","text":"<ul> <li> <p>Fixed a bug where a combination of modern editions and the <code>(Unl)</code> tag     caused the wrong 1G1R title to be selected when the user preferred modern     ripped titles over the original.</p> </li> <li> <p>Added an option to not replace <code>(Unl)</code> or <code>(Aftermarket)</code> titles if a     production version is found in another region.</p> </li> <li> <p>The Retool version used to create a DAT is now recorded in the DAT header to     assist with troubleshooting.</p> </li> <li> <p>Fixed a bug where \"&amp; Retool\" was added multiple times to the author     field of a DAT previously processed by Retool.</p> </li> <li> <p>Fixed a QT issue where the Retool icon wouldn't load properly on Windows.</p> </li> </ul>"},{"location":"changelog/#093-2021-06-01","title":"0.93 (2021-06-01)","text":"<ul> <li> <p>Fixed a crash for Linux users by adding conditionals to the new Windows CLI     code.</p> </li> <li> <p>Removed Colorama import accidentally left in when fixing Windows formatting.</p> </li> </ul>"},{"location":"changelog/#092-2021-05-31","title":"0.92 (2021-05-31)","text":"<ul> <li> <p>Retool CLI no longer clears the screen on start. Turns out this was also     accidentally enabling VT-100 mode in Windows 10 (which allows ANSI codes     like color formatting and bold to work), so there's now some new code to     manually enable it instead.</p> </li> <li> <p>You can now manually assign categories to titles in clone lists using the     <code>categories</code> key. This is a highly manual task, and will only be maintained     through user submissions.</p> </li> <li> <p>You can now include titles that don't have hashes, ROMs, or disks specified.     This might allow the conversion of DATs from parties other than No-Intro or     Redump \u2014 these DATs aren't officially supported.</p> </li> <li> <p>Files now write in UTF-8 to avoid characters causing crashes.</p> </li> <li> <p>Enhancement chips are now set to the category <code>BIOS</code> in the output DAT.</p> </li> <li> <p>Added some new modern edition tags.</p> </li> <li> <p>Titles with the <code>(Aftermarket)</code> tags are now demoted below official ones     within the same region.</p> </li> <li> <p>Titles with the <code>(Prerelease)</code> tag are now treated as preproduction.</p> </li> <li> <p>The regex for capturing demo titles is now more comprehensive.</p> </li> <li> <p>Added Estonia &amp; Lithuania as regions, along with their languages.</p> </li> </ul>"},{"location":"changelog/#091-2021-04-19","title":"0.91 (2021-04-19)","text":"<ul> <li> <p>Fixed a crash when processing the Mega CD/Sega CD DAT, and Europe or USA was     not included in the region order.</p> </li> <li> <p>Specified in the GUI that custom filters are case sensitive.</p> </li> </ul>"},{"location":"changelog/#090-2021-04-15","title":"0.90 (2021-04-15)","text":"<ul> <li> <p>Excluding demos now also excludes kiosk titles, and matches some extra     strings for trial versions.</p> </li> <li> <p>Excluding videos now excludes trailers as well.</p> </li> </ul>"},{"location":"changelog/#089-2021-04-12","title":"0.89 (2021-04-12)","text":"<p>Things of note for this release:</p> <ul> <li> <p>The way supersets and compilations are handled has changed. Supersets are     now default 1G1R titles. Compilations sometimes get removed, sometimes     become 1G1R titles depending on region order/situation. Right now you won't     see much difference outside of Master System \u2014 the point of this     version was to get the functionality out, then the clone lists can be     updated later.</p> </li> <li> <p>Custom global/system includes now recover files from     countries/languages/type exclusions. Grab that one title you want from     Japan, or save that one demo while excluding the rest.</p> </li> </ul> New features <ul> <li> <p>Custom global or system filter includes can now force inclusion of titles     that have been removed due to:</p> <ul> <li> <p>Region exclusions.</p> </li> <li> <p>Language exclusions.</p> </li> <li> <p>Any of the exclusion options being set in Retool.</p> </li> </ul> </li> <li> <p>Stat calculation now reports removals due to country and language filters.</p> </li> <li> <p>Titles with the string \"Game Boy Advance Video\" are now removed when videos     are excluded.</p> </li> <li> <p>You can now set a custom URL to update from in <code>internal-config.json</code>. This     means should the clone lists stop being updated at the main Git repository,     someone else can more easily take over.</p> </li> <li>Titles with the category \"Add-Ons\" and \"Bonus Discs\" can now be excluded.</li> <li>Clone lists now have Retool minimum version requirements. The user will be     prompted in the command line output whether to continue or not if Retool is     out of date compared to what the clone list requires.</li> </ul> Bug fixes <ul> <li> <p>Stat calculation of custom global/system filters would crash Retool when     <code>--nofilters</code> was set. This has been fixed.</p> </li> <li> <p>Stat calculation of the dat's final title count has been fixed to include     custom global/system includes.</p> </li> <li> <p>Fixed a potential problem when outputting a 1G1R list with a web/ftp     protocol prefix.</p> </li> <li> <p>Fixed Retool GUI not remembering output folders or exclusion settings.</p> </li> <li> <p>Updated a few dependencies.</p> </li> </ul> Behavior changes <ul> <li> <p>Tried to capture general crashes in order to give feedback to Retool GUI     users, to help diagnose future issues.</p> </li> <li> <p>Overrides and conditional overrides in clone lists are now merged into just     overrides. They can also now match on full or tag free names. Note that some     key names have changed \u2014 anything with an underscore in the name has     been replaced by a space.</p> </li> <li> <p>For the longest time, I kept matches as case sensitive just in case there     was an oddity along the way. Turns out for the sake of Windows users not     having problems this isn't the case, so all titles now get lowercase     matched. This should help with clone list resilience as naming standards     change over time.</p> </li> <li> <p>Things started getting confusing with compilations and supersets when it     came to choosing a 1G1R title. This was always an incredibly grey and fuzzy     area, was a pain to maintain, and it became apparent over time that things     needed to change for the sake of clarity. The upshot of all this? You get a     better 1G1R selection without having to select the right options.</p> <p>Things that have changed:</p> <ul> <li> <p>Mega-CD 32x now gets hoisted above Sega CD 32x if you have Europe above   USA in your region order.</p> </li> <li> <p>A <code>removes</code> key is now available to use in clone lists to remove specific   titles from a DAT. It works with full, tag free, or short names. This is   mostly useful to take out titles that don't quite match anything, but   should still be removed \u2014 for example, compilations whose titles are   covered by other compilations, or individual titles in the same region.</p> </li> <li> <p>The supersets option has been removed. It was nice to have in theory, but   in practice, game of the year editions, special editions, and so on are   mostly just the latest versions of games with bonus content and/or DLC   included.</p> </li> </ul> <p>There are incredibly rare exceptions \u2014 such as Ninja Gaiden vs   Ninja Gaiden Black, where dramatic rebalancing was done in addition to   the extra content, along with new enemies and weapons \u2014 but for the   most part, this isn't the case. If you care enough about an older version   of a game, you can always add it to a custom system filter.</p> <p>Supersets are now often assigned a 1 or 0 priority, depending on the   situation.</p> <ul> <li> <p>The exclude compilations option has been removed, and compilations are now   usually treated in one of two ways:</p> </li> <li> <p>As a remove; that is, the compilation is removed entirely from the DAT     as it's covered by other titles or compilations.</p> </li> <li> <p>As the 1G1R title for a set, depending on the region.</p> </li> <li> <p>The guidelines for when to use a 0 priority in clone lists have changed   because of this. You can use a 0 for:</p> </li> <li> <p>Compilations that include multiple titles.</p> </li> <li> <p>DVD releases of titles that are distributed as multiple CDs for other     releases.</p> </li> <li> <p>World releases that should be elevated above USA (as a World release     includes USA).</p> </li> <li> <p>A superset (gold edition, game of the year edition, etc) version of a     title available in one region, but not in another.</p> </li> <li> <p>A title in one region that definitely has more content than another     region. For example, a release in Europe that's uncensored compared to     the US release.</p> </li> </ul> </li> </ul>"},{"location":"changelog/#088-2021-03-01","title":"0.88 (2021-03-01)","text":"<p>Things of note for this release:</p> <ul> <li> <p>A key bug fix for clone list resilience.</p> </li> <li> <p>A lot of command line options have changed.</p> </li> <li> <p>Windows binaries no longer live in the <code>/dist/</code> folder, as it was becoming a     download burden to those cloning the repo.</p> </li> </ul> New features <ul> <li> <p>You can now exclude Manuals.</p> </li> <li> <p>Excluding BIOSes now also excludes enhancement chips.</p> </li> <li> <p>Excluding applications now excludes titles with \"Check Program\" and \"Sample     Program\" in their name.</p> </li> <li> <p>A lot has shifted around in terms of Retool CLI arguments, so Retool can     continue to grow:</p> <ul> <li> <p>The <code>-o</code> option is now <code>--output</code>.</p> </li> <li> <p>The <code>-g</code> option has been removed to bring things in line with Retool     GUI.</p> </li> <li> <p>A new <code>--exclude</code> option that takes arguments is now used in place of a     lot of the old filter options. Check <code>-h</code> for the full list.</p> </li> </ul> </li> <li> <p>Output file names are now a tiny bit smaller in length. User options and     title counts are now at the end of the file name too, so sorting by alpha     doesn't get confusing.</p> </li> <li> <p>Added yet another beta tag variation.</p> </li> <li> <p>In Retool GUI, the user is now prompted to download clone lists if they     don't have any.</p> </li> </ul> Bug fixes <ul> <li> <p>If a key title in a clone list didn't exist in an input DAT (or had been     removed by a Retool option), then all other titles in that array would     become unlinked from one another. This has been fixed.</p> </li> <li> <p>Fixed inaccurate and missing removal stats.</p> </li> <li> <p>Fixed the program crashing if a prefix or suffix wasn't supplied when     exporting a 1G1R list.</p> </li> <li> <p>In Retool GUI, the up/down region priority buttons no longer crash the     program if a region hasn't been selected.</p> </li> <li> <p>Made sure release tags output consistently in legacy mode.</p> </li> </ul> Behavior changes <ul> <li>The demotion of modern ripped titles (for example, Virtual Console) is now     working cross-region. You'll still get them if the modern edition is the     only one available with a language associated with a higher region priority.     For example, sometimes English versions of games were only released much     later on modern platforms, whereas previously they had exclusive Japanese     releases. In this case, if you have an implied English speaking region high     up in your region order, the modern edition will remain.</li> </ul>"},{"location":"changelog/#087-2021-01-24","title":"0.87 (2021-01-24)","text":"<p>Some big changes this time around, including some requested features.</p> New features <ul> <li> <p>There are now user-customizable exclude and include filters, so you can keep     or remove specific titles regardless of what Retool thinks should be done     with them. You can set filters as partial strings, full strings, or regex.     It's fairly advanced, so read the documentation to see how it works.</p> </li> <li> <p>You can now output lists of what titles have been kept, removed, and set as     clones by Retool GUI, just like Retool CLI. Check the Modes tab for the     option.</p> </li> <li> <p>You can now output a list of just the 1G1R title names, and optionally add     your own prefix or suffix to each line. Starting a prefix with http://,     https://, or ftp:// will URL encode each line.</p> </li> <li> <p>The binary version for Windows now opens a heck of a lot faster, at the cost     of having a much messier folder structure. Formerly everything was packed     into a single executable, which meant the operating system had to extract     all the dependencies before it could even think about launching the program,     slowing things down.</p> </li> </ul> Bug fixes <ul> <li> <p>Rewrote the parent assignment code to correct misassignment issues in the     NES DAT. It turns out this results in fixes for other sets too, requiring     clone list changes. For accurate matches, you must update to Retool 0.87 to     use the latest clone lists.</p> </li> <li> <p>Fixed a bug that removed titles from the United Kingdom from No-Intro DATs.</p> </li> <li> <p>Can now handle the new (DV #, #) versioning in No-Intro's FDS DAT without     crashing.</p> </li> <li> <p>Fixed the clone list/metadata update thinking that there was a new file if     the original had been converted from CRLF to LF. Made sure all new clone     lists and metadata are converted to LF before uploading to the repo.</p> </li> <li> <p>The PlayStation Portable No-Intro and Redump DATs now refer to separate     metadata from their respective databases.</p> </li> <li> <p>Numbered samples are now removed when excluding demos and samples, for     example <code>(Sample 1)</code>, <code>(Sample 2)</code> and so on.</p> </li> <li> <p>Those using font scaling &gt; 100% in Windows 10 should no longer have Retool     GUI's layout be thrown all over the place, so long as they stick to the     provided scaling levels. Note that Retool GUI on Windows 7 and 8 isn't     supported.</p> </li> <li> <p>Ubuntu users now get the Ubuntu font in Retool GUI. The UI is also slightly     scaled to avoid text inside buttons being cut off.</p> </li> <li> <p>Removed font colors, styles and fancy terminal things when running Retool     CLI on Windows 7 and 8, as those versions of Command Prompt don't support     them. Things still look shiny on Windows 10 and modern Linux terminals.</p> </li> <li> <p>Stopped the command line instructions showing when Retool GUI was processing     a DAT.</p> </li> <li> <p>The lxml module has been updated, as GitHub advised of a security flaw with     the previously used version.</p> </li> <li> <p>Fixed dependency problems when running <code>updateclonelists.py</code> from the     command line.</p> </li> </ul> Behavior changes <ul> <li> <p>More titles ripped from modern platform rereleases (such as Virtual Console     titles in the SNES DAT, for example) have been demoted by default, as they     don't necessarily play well (or at all) in emulators. You can make these     titles the preferred 1G1R title instead with the <code>-v</code> option, or by     selecting the     Titles ripped from modern platform rereleases replace retro editions     checkbox in Retool GUI.</p> </li> <li> <p>Good titles are now preferred over bad (<code>[b]</code>) ones.</p> </li> <li> <p>No-Intro pre-production titles are now categorized properly in the output     DAT.</p> </li> <li> <p>Updating clone lists now downloads <code>internal-config.json</code> as well, as     updates to this file affect 1G1R title selection.</p> </li> <li> <p>Retool now identifies Redump BIOS titles by the category <code>Console</code>, and     they'll be removed if you excluded BIOSes. BIOS titles are also now assigned     the category of <code>BIOS</code> in the output DAT.</p> </li> <li> <p>Release tags are now only output in legacy mode. They also generate for     every region and language of a title, not just the primary region. This is     just tying a bow on Logiqx-style 1G1R parent/clone DAT files, 1G1R modes in     DAT managers still aren't very useful.</p> </li> </ul> Internal changes <ul> <li> <p><code>user-config.yaml</code> is no longer stored in the GitHub repo. It's also been     removed from Windows ZIP file. This is to prevent users accidentally     overwriting their own <code>user-config.yaml</code> when updating Retool. Both Retool     CLI and GUI auto-generate the file if it's missing.</p> </li> <li> <p>Metadata is now in alphabetical order.</p> </li> </ul>"},{"location":"changelog/#086-2020-12-21","title":"0.86 (2020-12-21)","text":"<ul> <li> <p>Modern rereleases like Virtual Console titles have been demoted in priority,     as quite often emulators won't play them.</p> </li> <li> <p>Now includes scraped language data from No-Intro for more accurate language     filtering.</p> </li> <li> <p>You can now exclude titles that contain the string <code>[BIOS]</code>. This should     only apply to No-Intro DATs.</p> </li> <li> <p>Excluding applications now additionally excludes titles with the string     <code>(Test Program)</code>.</p> </li> <li> <p>Removed a few unused properties from metadata files, which greatly reduced     file sizes.</p> </li> <li> <p><code>-i</code> removed from <code>-g</code> option as some titles are used for soundtracks in     games.</p> </li> </ul>"},{"location":"changelog/#085-2020-11-18","title":"0.85 (2020-11-18)","text":"<ul> <li> <p>Updated the date sorting to take into account another of No-Intro's     inconsistent date formats <code>(Month name, YYYY)</code>.</p> </li> <li> <p>Another tweak to the ordering of the output DAT.</p> </li> </ul>"},{"location":"changelog/#084-2020-11-14","title":"0.84 (2020-11-14)","text":"<ul> <li>Updated the Sega ring code regex so more ring codes are captured.</li> </ul>"},{"location":"changelog/#083-2020-11-09","title":"0.83 (2020-11-09)","text":"<ul> <li> <p>Accidentally uploaded the wrong <code>user-config.yaml</code>, where all regions were     commented out. This resulted in the CLI version of Retool finding no clones     unless manually edited by the user. This has now been fixed.</p> </li> <li> <p>Some code clean up and extra explanation for some options.</p> </li> </ul>"},{"location":"changelog/#082-2020-11-08","title":"0.82 (2020-11-08)","text":"<ul> <li> <p>(Unl) titles in a higher region are now demoted below equivalent production     titles in other regions.</p> </li> <li> <p>You can now exclude by the \"Audio\" and \"Video\" categories.</p> </li> <li> <p>Removed Multimedia from the <code>-g</code> option as the category might contain games.</p> </li> <li> <p>Made clear that the Multimedia category might include games in the GUI.</p> </li> <li> <p>Explained what a coverdisc is in the GUI.</p> </li> <li> <p>Fixed a natural sort bug in the alphabetical ordering of output DATs.</p> </li> </ul>"},{"location":"changelog/#081-2020-11-06","title":"0.81 (2020-11-06)","text":"<ul> <li> <p>Fixed a bug in <code>retool-gui.py</code> where the output DAT file had <code>(-)</code> in its     file name if no options were set.</p> </li> <li> <p>Fixed a bug where clone lists and metadata wouldn't download if their     respective folders didn't exist.</p> </li> </ul>"},{"location":"changelog/#080-2020-11-05","title":"0.80 (2020-11-05)","text":"<ul> <li> <p>Retool can now handle No-Intro numbered DATs.</p> </li> <li> <p>Output DATs used to do alphabetical order based on group, which could look     like things were out of order if you didn't know what was happening behind     the scenes. Output DATs are now ordered based on title.</p> </li> <li> <p>Updated wording around enabling the supersets option, so it was clear that     if you turned it on, supersets would replace standard editions in the output     DAT.</p> </li> <li> <p>Added some extra tooltips to the exclusion options in the GUI, so users have     more information to work with.</p> </li> </ul>"},{"location":"changelog/#079-2020-10-19","title":"0.79 (2020-10-19)","text":"<ul> <li>Fixed the online updating of clone lists to include Redump metadata.</li> </ul>"},{"location":"changelog/#078-2020-10-1","title":"0.78 (2020-10-1)","text":"<ul> <li> <p>Implemented a GUI. You'll need to install <code>pysimpleguiqt</code> with pip, and     after that you can run it with <code>retool-gui.py</code>. It's not as tight and     consistent as it could be due to limitations with PySimpleGUIQt, but given     PySimpleGUI's rapid, active development this should improve over time. Right     now it looks best on Windows. Ubuntu has been tested, and looks a little     janky, but is functional. MacOS hasn't been tested.</p> </li> <li> <p>You can now run <code>updateclonelists.py</code> to download the latest clone lists.     There's also an option available in the GUI under the File menu.</p> </li> <li> <p>Reformatted <code>user-config.yaml</code> so strictyaml liked it a bit more, and things     played well with the GUI. Improved YAML handling at the same time. Make sure     to backup your current <code>user-config.yaml</code> before grabbing this version, so     you can port your region order/language settings over.</p> </li> <li> <p>Moved to argparse to handle user input in the CLI. It's less pretty, but     it's more robust and scalable. This also means that the <code>-i</code> option is no     longer a thing when specifying your input dat/folder \u2014 instead,     specify it immediately after <code>retool.py</code>:</p> <p><code>retool.py &lt;input dat/folder&gt; &lt;options&gt;</code></p> </li> <li> <p>Stopped misassignment in clone lists if Redump left off the <code>(Demo)</code> tag     from a title.</p> </li> <li> <p>Fixed an exit bug when the user would select only regions and/or languages     that didn't exist in the input DAT.</p> </li> <li> <p>Added a few promote tags.</p> </li> <li> <p>Cleaned up some unused variables and imports.</p> </li> <li> <p>Lots of code tweaks to better suit GUI interaction.</p> </li> <li> <p>The <code>-g</code> option now keeps applications, as they are useful for computer     platforms like the Atari ST and Commodore Amiga.</p> </li> <li> <p>The new <code>-y</code> option outputs a list of what titles have been kept and removed     in the output DAT.</p> </li> <li> <p>Refactored how Retool options get listed in the output name.</p> </li> <li> <p>Removed requirement for the !DOCTYPE element to exist that quotes the Logiqx     DTD, so Retool can work with files from sites.dat. The DAT is still     validated against the DTD, however.</p> </li> <li> <p>Dealt with an edge case in selecting the right title if somehow there was     both a version and a revision of a title.</p> </li> <li> <p>Hid displaying options behind the <code>-?</code> option.</p> </li> </ul>"},{"location":"changelog/#076-2020-08-03","title":"0.76 (2020-08-03)","text":"<ul> <li> <p>Fixed filtering by language. This was broken due to a last minute change     from a string to regex in the 0.75 release.</p> </li> <li> <p>Fixed folders not being processed to completion when filter by language was     selected, and no valid titles were found in the current DAT.</p> </li> <li> <p>Added <code>Ukranian</code> as a language.</p> </li> <li> <p>When filtering by language, if titles in the following regions don't have     languages specified, they will be included if you select any of their     respective languages:</p> <ul> <li> <p>Asia \u2014 English, Chinese, Japanese.</p> </li> <li> <p>Hong Kong, Taiwan \u2014 Chinese, English.</p> </li> <li> <p>Latin America \u2014 Spanish, Portuguese</p> </li> <li> <p>South Africa \u2014 Afrikaans, English</p> </li> <li> <p>Switzerland \u2014 German, French, Italian</p> </li> <li> <p>Ukraine \u2014 Ukranian, Russian.</p> </li> </ul> </li> <li> <p>Retool can now handle <code>rom</code> entries with no CRC specified. A <code>rom</code> entry     must have at least a CRC, MD5, or SHA1, otherwise the title is dropped.</p> </li> <li> <p>The <code>-g</code> option now keeps preproduction titles, as they're treated as     versions of titles instead of a separate thing, and many will be removed     automatically on account of production versions existing. You will need to     specify <code>-p</code> if you want to remove all preproduction titles.</p> </li> </ul>"},{"location":"changelog/#075-2020-28-07","title":"0.75 (2020-28-07)","text":"<ul> <li> <p>Now handles No-Intro DATs. Note that Retool grouping follows different rules     to No-Intro. For example, in the Atari 2600 DAT, a compilation is listed as     a clone of a single title, despite featuring unique games. No-Intro also     tends to include demos as clones of production titles. Retool also doesn't     set clones for BIOSes, as you might need a different BIOS version in     different situations. Retool also ignores titles that don't have <code>rom</code> or     <code>disk</code> entries, which happens quite a bit in No-Intro's parent/clone sets.</p> </li> <li> <p>Added <code>Mexico</code> and <code>Hong Kong</code> as regions.</p> </li> <li> <p>Added <code>Zh-Hant</code> and <code>Zh-Hans</code> as languages.</p> </li> <li> <p>Alphas, betas, and prototypes are now treated as versions of titles. This     way you get the highest version of a title available, and less noise without     stripping everything away with the <code>-p</code> tag. Retool prefers production     versions of titles, even if there is a preproduction title in a higher     priority region. Priority is as follows:</p> <ul> <li> <p>Production with highest version</p> </li> <li> <p>Production with highest revision</p> </li> <li> <p>Production with no version/revision</p> </li> <li> <p>Highest beta revision</p> </li> <li> <p>Highest alpha revision</p> </li> <li> <p>Highest prototype revision</p> </li> </ul> </li> <li> <p>The exclude coverdiscs flag is now <code>-f</code>.</p> </li> <li> <p>You can now exclude bad dumps, pirate titles, promotional titles (titles     that contain <code>(Promo)</code>, <code>EPK</code>, and <code>Press Kit</code>), and samples.</p> </li> <li> <p>Retool can now deal with DATs that fail DTD validation due to <code>&lt;clrmamepro&gt;</code>     and <code>&lt;romcenter&gt;</code> tags being in an unexpected order in the header.</p> </li> <li> <p>The DTD file has been updated to take into account that even though people     include it in their XML files, their XML files don't actually validate     against it.</p> </li> <li> <p>Retool can now deal with DATs that don't include MD5 or SHA-1 hashes.</p> </li> <li> <p>Windows and MacOS binaries have been removed. The Windows binary had     performance issues due to the Python environment needing significant start     up time, and I can no longer build the MacOS binary after the virtual     machine stopped working.</p> </li> <li> <p>Some crash fixes and message format tweaking.</p> </li> <li> <p>Moved internal-config.json to the clonelists + metadata file so new releases     of Retool aren't required each time the file is updated.</p> </li> </ul>"},{"location":"changelog/#070-2020-06-15","title":"0.70 (2020-06-15)","text":"<p>Oof, this is a big update, with feature and performance improvements all over the place.</p> Code readability and performance <p>Retool has been largely rewritten for readability, performance, security, and to make forward momentum easier. This means a few breaking changes:</p> <ul> <li> <p>A new format for clone lists, so you need to update them. Retool is now     better at automatically detecting different types of clones, so some titles     no longer need to be listed in the clone lists.</p> </li> <li> <p>The selected 1G1R titles might change compared to previous versions of     Retool, due to a major audit of clone lists, tags, and increases in parent     detection accuracy.</p> </li> <li> <p>Retool no longer exports parent/clone DATs by default. Turns out the format     can't really do the job properly, as it has no concept of priority within     individual regions (and dealing with languages is a misery). As such, using     DAT managers like CLRMAMEPro or Romcenter to manage 1G1R can lead to     unexpected outcomes. Instead, you now use Retool to produce the 1G1R DAT you     want, and only use the DAT manager to manage your files.</p> </li> <li> <p>Retool now has a minimum requirement of Python 3.8.</p> </li> </ul> <p>Processing DATs is now also much faster as a result of better coding practices. While this is nice for all DATs, you'll mostly feel it on the big ones. The PlayStation and IBM DATs, for example, are now 2x faster.</p> Custom region orders, filter by language <p>Custom region orders are now supported \u2014 even for supersets. You can also filter by languages. Make your choices by editing the <code>region order</code> and <code>filter languages</code> sections in <code>user-config.yaml</code>. You can use the <code>-l</code> option to filter by language, or leave it off to include all languages.</p> Other language and region stuff <p>Retool's a lot smarter with languages now.</p> <p>For a start, implied languages are now enabled for most regions, and language data for titles has been scraped from Redump's site. Redump doesn't always include language data in the filename of their titles, so this assists in more accurately selecting parent titles. For example, say your region priority is USA, Europe. The USA title has CDs, but the European title has a DVD version that we now know for sure supports English. Retool can now choose the European DVD version over the USA CD version, depending on how clone lists are set up.</p> <p>The following things have also changed:</p> <ul> <li> <p>A bunch of languages (<code>Af</code>, <code>Ca</code>, <code>Gd</code>, <code>Hr</code>, <code>Pa</code>, <code>Sk</code>, <code>Sl</code>, <code>Ta</code>) have     been added.</p> </li> <li> <p>Slovenia has been added as a region.</p> </li> <li> <p>The incorrect <code>Gr</code> language code has been changed to <code>El</code>.</p> </li> <li> <p>Multi-region titles are now handled more elegantly.</p> </li> <li> <p>Fixed tags with regions in them causing a title to be filtered into the     wrong region. For example, Virtua Fighter 2 (Europe) (Rev A) (Made in USA)     used to be categorized as a USA title \u2014 it's now correctly identified     as a European title.</p> </li> </ul> Other updates <ul> <li> <p>You can now exclude unlicensed titles.</p> </li> <li> <p>Sega ring codes are now mostly handled automatically for assigning clones.     This has greatly reduced the size of some clone lists.</p> </li> <li> <p>Retool can now deal with \"cloneof\" tags in input DATs, as Redump has started     adding a few.</p> </li> <li> <p>Retool now handles Genteiban, Fukyuuban, and many other editions     automatically.</p> </li> <li> <p>If the user specifies an output folder that doesn't exist, that folder is     now created.</p> </li> <li> <p>Fixed problems that previously required overrides in clone lists.</p> </li> <li> <p>Added basic failure states for not finding required data in JSON config     files.</p> </li> <li> <p>DAT header details are now escaped for valid XML, and XML file error     handling is better.</p> </li> <li> <p>A bug in CLRMAMEPro DAT conversions has been fixed.</p> </li> <li> <p>DAT file output is now naturally sorted instead of lexicographically.</p> </li> <li> <p>The decision to include the version of a title on the newest operating     system has been reversed. For the sake of compatibility, if there are     multiple OS versions for a title, all are included.</p> </li> </ul>"},{"location":"changelog/#060-2020-04-19","title":"0.60 (2020-04-19)","text":"<ul> <li> <p>Removed pointless milliseconds from output file name.</p> </li> <li> <p>Added \"Scholastic\" to the publisher/distributor list.</p> </li> <li> <p>Added more disc synonyms.</p> </li> <li> <p>Automated handling PlayStation EDC titles.</p> </li> <li> <p>Language codes removed: <code>At</code>, <code>Be</code>, <code>Ch</code>, <code>Hr</code>.</p> </li> <li> <p>Languages codes added: <code>Bg</code>, <code>Cs</code>, <code>He</code>, <code>Ro</code>, <code>Tr</code>.</p> </li> <li> <p>Regions added: Bulgaria, Romania. There are no games yet from these regions,</p> <p>but there are games with their languages.</p> </li> <li> <p>Extracted configuration data from the main Python script, and moved it into     an external JSON file. This can potentially lead to greater user     customization later.</p> </li> </ul>"},{"location":"changelog/#059-2020-03-30","title":"0.59 (2020-03-30)","text":"<ul> <li> <p>Added \"Best of the Best\" and \"Best Hit Selection\" as     publishers/distributors.</p> </li> <li> <p>Added another disc synonym.</p> </li> </ul>"},{"location":"changelog/#058-2020-03-30","title":"0.58 (2020-03-30)","text":"<ul> <li> <p>Added yet another disc synonym.</p> </li> <li> <p>Added \"Hitsquad - Regenerator\" as a publisher/distributor.</p> </li> <li> <p>Removed <code>_version.py</code>.</p> </li> </ul>"},{"location":"changelog/#057-2020-03-25","title":"0.57 (2020-03-25)","text":"<ul> <li> <p>Separated removing coverdiscs from demos (<code>-d</code>), making it its own option     (<code>-b</code>). Turns out plenty of full version games were given away as     coverdiscs.</p> </li> <li> <p>Made handling the XML definition in a DAT a bit more robust.</p> </li> <li> <p>Fixed importing of CLRMAMEPro DAT files.</p> </li> <li> <p>When a parent or clone of a superset, override, or compilation title is not     found, it no longer crashes Retool or silently fails, but tells you what's     missing.</p> </li> <li> <p>Added \"Teil\" as a synonym for \"Disc\", to automatically pick up some German     titles.</p> </li> <li> <p>Added a <code>-g</code> option, which is shorthand for all options (-abcdemps).</p> </li> <li> <p>Added Th as a language.</p> </li> <li> <p>Converted clone lists to JSON so they're more portable, and binaries don't     require an update every time the clones update.</p> </li> <li> <p>Fixed a bug in selecting supersets.</p> </li> <li> <p>Noted that supersets only currently really work if you follow Retool region     order. Otherwise current limitations in DAT format and DAT managers get in     the way.</p> </li> </ul>"},{"location":"changelog/#056-2020-03-06","title":"0.56 (2020-03-06)","text":"<ul> <li> <p>Messed with the region order a little to be more fair to more popular     languages, taking in mind how many titles were actually released for those     languages.</p> </li> <li> <p>Bumped Portuguese up the priority list when deciding between two identical     titles that support different languages.</p> </li> <li> <p>Moved stuff out of <code>readme.md</code> to make it more readable, and created a     GitHub wiki for more detailed information.</p> </li> </ul>"},{"location":"changelog/#055-2020-03-05","title":"0.55 (2020-03-05)","text":"<ul> <li>Code changes to support a build pipeline.</li> </ul>"},{"location":"changelog/#054-2020-03-04","title":"0.54 (2020-03-04)","text":"<ul> <li> <p>Greatly sped up parent/clone processing, and removed XML conversion in favor     of writing directly to the output DAT. This will be mostly noticeable for     large DATs. The IBM and PlayStation Redump DATs, for example, now process     around 10x faster, cutting a minutes long process for each into seconds on     an i7 8700K.</p> </li> <li> <p>Added another distributor/publisher to check for when scanning for clones.</p> </li> <li> <p>Removed the option to remove titles with Alt tags, as it was a leftover from     when Retool didn't do 1G1R properly.</p> </li> <li> <p>Added a counter for how many compilations were removed, if the option is     enabled.</p> </li> </ul>"},{"location":"changelog/#053-2020-02-24","title":"0.53 (2020-02-24)","text":"<ul> <li> <p>Fixed a bug where if a region name was in a title, it caused clones to be     assigned to the wrong parents. For example,     Daytona USA Deluxe Edition (Taiwan),     Cossacks II - Battle for Europe (Germany) would confuse the logic in     Retool as to what region the title belonged to.</p> </li> <li> <p>Fixed a normalization bug when converting Disc III into Disc 3 for title     matching.</p> </li> </ul>"},{"location":"changelog/#052-2020-02-22","title":"0.52 (2020-02-22)","text":"<p>Added better parent selection for the following:</p> <ul> <li> <p>Titles with multiple date versions.</p> </li> <li> <p>Titles with distributor/publisher, OEM, and covermount tags.</p> </li> <li> <p>Budget titles vs the originals.</p> </li> </ul>"},{"location":"changelog/#051-2020-02-16","title":"0.51 (2020-02-16)","text":"<ul> <li> <p>Added Zh as a language.</p> </li> <li> <p>Fixed a crash if a DAT had no titles, and Retool was trying to process     supersets.</p> </li> </ul>"},{"location":"changelog/#050-2019-11-26","title":"0.50 (2019-11-26)","text":"<ul> <li> <p>A huge architectural shift to move Retool to a 1G1R DAT generator. Due to     this, the <code>_regional_renames.py</code> file has been renamed to <code>_renames.py</code> and     massively expanded to take into account local title dupes. The file has     also been reorganized to make future dupe additions easier.</p> </li> <li> <p>The <code>-re</code>, <code>-ra</code>, and <code>-en</code> options have been removed.</p> </li> <li> <p>The <code>-o</code> flag is no longer mandatory, and now defines an output folder.     Output files are automatically named.</p> </li> <li> <p>You can now remove alternate (Alt) titles with the <code>-l</code> option.</p> </li> <li> <p>You can now promote supersets (for example, Game of the Year editions) to     parents with the <code>-s</code> option.</p> </li> <li> <p>Expanded demo removal criteria, as Redump does not always put demos in the     \"Demos\" category.</p> </li> <li> <p>Region processing is now much faster.</p> </li> <li> <p>OEM and Hibaihin titles that have a matching commercial title with the same     name are now marked as clones.</p> </li> <li> <p>Titles that aren't the latest revisions or versions are now marked as     clones. This doesn't support release versioning, like 0.100 being larger     than 0.99, however there's not much evidence of that style of versioning     being used across Redump titles.</p> </li> <li> <p>Titles that include multiple regions are now deduped, preferencing titles     with more regions. For example, out of Grim Fandango (USA) and     Grim Fandango (USA, Europe), the former is marked as a clone.</p> </li> <li> <p>Titles with the same name from the same region that include different     language sets are now handled. The rules are quite complex:</p> <ul> <li> <p>If one title is in English, but the other isn't, mark the English title as   the parent.</p> </li> <li> <p>If one title from Europe has no languages listed, and the other has   languages listed but English isn't one of them, mark the title with no   languages listed as the parent (on the assumption that English may be in   there).</p> </li> <li> <p>If English is listed for both titles, and one title has more languages,   mark the title with more languages as the parent.</p> </li> <li> <p>If English is listed for both titles, and both titles have the same number   of languages, check for preferred languages one by one, in the order   listed below. The first title that doesn't support a preferred language is   marked as a clone.</p> <ol> <li> <p>Spanish</p> </li> <li> <p>French</p> </li> <li> <p>Japanese</p> </li> <li> <p>Portuguese</p> </li> <li> <p>German</p> </li> <li> <p>Italian</p> </li> <li> <p>Swedish</p> </li> <li> <p>Danish</p> </li> <li> <p>Norwegian</p> </li> <li> <p>Polish</p> </li> <li> <p>Greek</p> </li> <li> <p>Dutch</p> </li> <li> <p>Finnish</p> </li> <li> <p>Swiss</p> </li> <li> <p>Hungarian</p> </li> <li> <p>Russian</p> </li> </ol> </li> </ul> </li> <li> <p>Brazil and Latin America have been moved off the native English list. Modern     games from these regions aren't guaranteed to have English translations.</p> </li> <li> <p>Japan has been moved up to second highest priority for non-native English     regions, after Europe. The Asia region being higher priority than Japan was     stealing titles that should have had Japanese parents.</p> </li> <li> <p>The requirement for the Logiqx doctype string in input files has been     removed, as some non-Redump DATs didn't have the string and were erroring.</p> </li> <li> <p>DTD validation has been added for Logiqx-style DAT files. Redump DAT files     are invalid by default, as the category tag isn't in the spec. A modified     DTD file has been included in the release with the category tag added, so     Redump DATs should pass.</p> </li> <li> <p>When you add a newer version of a DAT to CLRMAMEPro that has been generated     by Retool, it now triggers an update prompt where appropriate.</p> </li> <li> <p>Redump is no longer required to be the DAT author.</p> </li> <li> <p>Characters that aren't valid in XML (&lt;, &gt;, &amp;) have been escaped in generated     DAT files.</p> </li> <li> <p>Empty name, description, author, url, and version fields in DATs are now     handled, instead of crashing the program.</p> </li> <li> <p>Several bugs involving options flags were fixed.</p> </li> <li> <p>The title count was missing when DATs were split into regions. This is now     fixed.</p> </li> <li> <p>Bye bye ASCII logo. Vertical screen real estate is now more important.</p> </li> <li> <p>Added CloneRel tool, that exports an Excel file from a DAT to better display     existing parent/clone relationships.</p> </li> <li> <p>Dealt with the \"King's Field problem\". King's Field (Japan) didn't get a     Western release. King's Field in the USA is known as King's Field II in     Japan. King's Field II in the USA is King's Field III in Japan. Without     extra logic, the program would mark all King's Field II titles as clones,     which is not what we want.</p> </li> </ul>"},{"location":"changelog/#034-2019-10-29","title":"0.34 (2019-10-29)","text":"<ul> <li> <p>Added textwrap module for better readability on MacOS/Linux.</p> </li> <li> <p>Bundled MacOS and Windows binaries.</p> </li> </ul>"},{"location":"changelog/#033-2019-10-27","title":"0.33 (2019-10-27)","text":"<ul> <li> <p>Added ability to operate on folders.</p> </li> <li> <p>Fixed output file naming bugs.</p> </li> <li> <p>Fixed some user input issues.</p> </li> <li> <p>Tidied up some output for increased readability.</p> </li> <li> <p>Added the following regions: Argentina, Czech, Hungary, Singapore, Slovakia,     Thailand, Turkey, Ukraine, United Arab Emirates.</p> </li> </ul>"},{"location":"changelog/#032-2019-10-24","title":"0.32 (2019-10-24)","text":"<ul> <li> <p>Reimplemented <code>-re</code> and <code>-ra</code> flags.</p> </li> <li> <p>Fixed header so the user wasn't prompted with false update warnings when the     DAT was loaded in CLRMAMEPro.</p> </li> </ul>"},{"location":"changelog/#031-2019-10-22","title":"0.31 (2019-10-22)","text":"<ul> <li> <p>Used dictionaries and classes to greatly increase performance and improve     code readability.</p> </li> <li> <p>Removed minidom dependency.</p> </li> <li> <p>Removed unused importlib dependency.</p> </li> <li> <p>Usability tweaks.</p> </li> </ul>"},{"location":"changelog/#020-2019-10-06","title":"0.20 (2019-10-06)","text":"<ul> <li> <p>Refactored for performance, code readability, and usability.</p> </li> <li> <p>Can handle CLRMAMEPro DAT files now, not just Logiqx XML format.</p> </li> <li> <p>Added Germany, Ireland, Israel, Latin America, New Zealand, and Taiwan     locales.</p> </li> <li> <p>Fixed user input bugs.</p> </li> <li> <p>Fixed excessive looping in some sections.</p> </li> <li> <p>Fixed title exclusion bugs.</p> </li> <li> <p>Added more error checking.</p> </li> <li> <p>Removed <code>-re</code> and <code>-ra</code> flags until refactor is finished next version.</p> </li> </ul>"},{"location":"changelog/#010-2019-10-05","title":"0.10 (2019-10-05)","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"clrmamepro/","title":"CLRMAMEPro \"wrong name\" issue","text":"<p>When scanning with CLRMAMEPro you might see a lot of \"wrong name\" messages that match unrelated titles.</p> <p>This isn't Retool making a mistake or anything going wrong; it's CLRMAMEPro not giving enough detail about what's happening. If you let CLRMAMEPro do its thing and say yes to everything, you'll end up with a set that's fine after it's finished processing.</p>"},{"location":"clrmamepro/#the-full-explanation","title":"The full explanation","text":"<p>CLRMAMEPro gives misleading messages when it scans existing non-1G1R Redump sets with a Retool DAT file, and finds matching files that were shared between titles in the original Redump DAT file. This mainly happens with DAT files that contain multitrack discs (CUE/BIN) like Saturn or Mega CD, where it's common to find the same file across multiple unrelated titles.</p> <p>Here's an example to help clarify. Let's assume you have the following things:</p> <ul> <li>Redump's Saturn DAT file.</li> <li>A Retool version of the Saturn DAT file with a region order of USA &gt; Europe &gt; Japan.</li> <li>A folder with a complete Redump Saturn collection.</li> </ul> <p>You run a scan with CLRMAMEPro using the Retool DAT file against your existing Saturn collection, and CLRMAMEPro reports something like this:</p> <p>wrong name: Z:\\Saturn\\Area 51 (Japan).zip [wrong: Z:\\Saturn\\Area 51 (Japan)] [right: Gungriffon (USA)]</p> <p>On the surface it looks like CLRMAMEPro is claiming that Area 51 is Gungriffon \u2014 which is not true. So what's going on?</p> <p>First, let's take a look at Area 51 (Japan) and Gungriffon (USA) in the original Redump Saturn DAT file, since those are the titles mentioned by CLRMAMEPro:</p> <pre><code>&lt;game name=\"Area 51 (Japan)\"&gt;\n    &lt;category&gt;Games&lt;/category&gt;\n    &lt;description&gt;Area 51 (Japan)&lt;/description&gt;\n    ...\n    &lt;rom name=\"Area 51 (Japan) (Track 2).bin\" size=\"1413552\" crc=\"5af76f8c\" md5=\"5fedd4a8361a9c6ca005b5d48a38ca68\" sha1=\"db9145b3f24a83bcb28a93889001c778d7ab656a\"/&gt;\n&lt;/game&gt;\n</code></pre> <pre><code>&lt;game name=\"Gungriffon (USA)\"&gt;\n    &lt;category&gt;Games&lt;/category&gt;\n    &lt;description&gt;Gungriffon (USA)&lt;/description&gt;\n    ...\n    &lt;rom name=\"Gungriffon (USA) (Track 33).bin\" size=\"1413552\" crc=\"5af76f8c\" md5=\"5fedd4a8361a9c6ca005b5d48a38ca68\" sha1=\"db9145b3f24a83bcb28a93889001c778d7ab656a\"/&gt;\n    ...\n&lt;/game&gt;\n</code></pre> <p>While these titles are not the same game, they do share a file. Name aside, <code>Area 51 (Japan) (Track 2).bin</code> is the exact same file as <code>Gungriffon (USA) (Track 33).bin</code>, with matching sizes and checksums (CRC/MD5/SHA1). This is common \u2014 this particular file can also be found in the following titles:</p> <ul> <li>Area 51 (Europe) (En,Fr,De,Es)</li> <li>Area 51 (USA)</li> <li>Gun Griffon (Europe) (multiple times)</li> <li>House of the Dead, The (Japan) (Demo)</li> <li>Maximum Force (Europe)</li> <li>Maximum Force (USA)</li> </ul> <p>Second, if we look at the Retool DAT file, we can see that due to the region priority (USA &gt; Europe &gt; Japan), Area 51 (Japan) has been removed in favor of Area 51 (USA). GunGriffon (USA), being a USA title, makes it in.</p> <p>When the Retool DAT file is used in CLRMAMEPro to scan the existing Saturn folder, and CLRMAMEPro comes across <code>Area 51 (Japan).zip</code>, the process goes something like this:</p> <ol> <li>I've found a file called <code>Area 51 (Japan).zip</code>.</li> <li>I've checked the current DAT file, and a set with the same name doesn't exist.</li> <li>I did find a file inside the ZIP file though that matches a file in the GunGriffon    (USA) set, which is in the DAT file.</li> <li>I'm making an educated (but incorrect) guess that this is meant to be GunGriffon    (USA) because of that matching file. Regardless of whether that's true, I want to get    that file into the GunGriffon set if it needs it, then I'll deal with the remaining    files.</li> <li> <p>Let's tell the user I'm being helpful with the following misleading message!</p> <p>wrong name: Z:\\Saturn\\Area 51 (Japan).zip [wrong: Z:\\Saturn\\Area 51 (Japan)] [right: Gungriffon (USA)]</p> </li> </ol> <p>Ultimately, it doesn't matter that Area 51 (Japan) isn't the same game as GunGriffon (USA), all that's happening here is that CLRMAMEPro is rescuing the one file from <code>Area 51 (Japan).zip</code> it thinks is useful.</p> <p>If you let CLRMAMEPro do its thing and say yes to everything, you'll end up with a set that's fine after its finished processing. If you're worried about affecting a current set and are looking for peace of mind, there's a way you can verify things are working as they're meant to:</p> <ol> <li>Point the Retool DAT file in CLRMAMEPro at a new ROM path that's an empty folder.</li> <li>Set your original folder with the existing Redump set in it as an Add path.</li> <li>Use the rebuilder function to create the 1G1R set in the new folder from the existing    set (make sure to select Use Add-Paths).</li> <li>Scan the new 1G1R set with the original Redump DAT file to verify that the 1G1R titles    properly match their Redump counterparts. RomVault does a better job than CLRMAMEPro    here of visually showing you what sets are complete.</li> </ol>"},{"location":"contribute-clone-lists-description/","title":"Description","text":"<p>The <code>description</code> object holds information related to the clone list itself, and is always at the top of the file. It is mandatory to include.</p>"},{"location":"contribute-clone-lists-description/#structure","title":"Structure","text":"<p>A <code>description</code> object looks similar to the following example:</p> <pre><code>\"description\": {\n  \"name\": \"Sony - PlayStation (Redump)\",\n  \"lastUpdated\": \"26 December 2023\",\n  \"minimumVersion\": \"2.02\"\n}\n</code></pre> <p>A <code>description</code> object contains the following keys:</p> Key Type Description <code>name</code> <code>str</code> The system name and release group of the DAT file the clone list is related       to. <code>lastUpdated</code> <code>str</code> The last time the clone list was updated, in DD-MMMM-YYYY format. <code>minimumVersion</code> <code>str</code> <p>The minimum version of Retool required to understand all of the features of the       clone list.</p> <p>The <code>minimumVersion</code> key is the only data in the description used by       Retool, the rest is to make parsing and updating the clone list easier for humans.</p>"},{"location":"contribute-clone-lists-mias/","title":"MIAs","text":"<p>A missing in action (MIA) title is one that has had its sizes and hashes indexed, but the title itself hasn't been made available to the public.</p> <p>The <code>mias</code> array is only required in clone lists for Redump DAT files, as No-Intro specifies MIAs directly in its DAT files. MIAs are scraped from Redump's wiki, and as a general rule shouldn't be manually added or removed.</p>"},{"location":"contribute-clone-lists-mias/#structure","title":"Structure","text":"<p>An <code>mias</code> array looks similar to the following example:</p> <pre><code>\"mias\": [// (1)!\n  \"Arc the Lad III (Japan) (Demo 2)\",// (2)!\n  \"Cochons de GuerreLes (France) (Rev 1)\"\n]\n</code></pre> <ol> <li>The MIAs array.</li> <li>The full name of the title to search for in the input DAT file.</li> </ol> <p>MIAs only use full names to search for matching titles in the associated DAT file, and so an <code>mias</code> array only contains strings that match those full names.</p>"},{"location":"contribute-clone-lists-pull-request/","title":"Prepare your pull request","text":"<p>Before you make a pull request for a clone list, make sure it observes the following standards.</p>"},{"location":"contribute-clone-lists-pull-request/#format-clone-lists","title":"Format clone lists","text":"<p>Clone lists follow a particular format to keep maintainence easy:</p> <ul> <li> <p>Valid JSON.</p> </li> <li> <p>Tabbed indenting.</p> </li> <li> <p>LF line endings.</p> </li> <li> <p>Top-level keys should be kept in the correct order.</p> </li> <li> <p>Object keys should be in the order shown in the clone list structure examples.</p> </li> <li> <p>Array contents should be in alphabetical order, sorted by an object's top key. This is   either going to be <code>group</code> or <code>searchTerm</code>.</p> </li> </ul>"},{"location":"contribute-clone-lists-pull-request/#test-clone-lists","title":"Test clone lists","text":"<p>Before submitting a pull request, it's important to test your changes to make sure they're correct.</p> <p>Test your clone list update against the newest version of a DAT file from No-Intro or Redump, and enable the following settings:</p>  GUI:simple-windowsterminal: Command line <ul> <li> <p>In the Global settings tab, click Options.</p> </li> <li> <p>Enable Report clone list warnings during processing and   Pause on clone list warnings.</p> </li> </ul> <p><code>--warnings --warningpause</code></p> <p>Run Retool on the DAT file, and fix your clone list until no warnings are given.</p>"},{"location":"contribute-clone-lists-pull-request/#make-your-pull-request","title":"Make your pull request","text":"<p>When you make your pull request, make sure to justify the choices you have made. For example, if you add new clones, provide a link or images that show the titles are clones.</p>"},{"location":"contribute-clone-lists-pull-request/#update-hashes","title":"Update hashes","text":"<p>Retool manages clone list updates via the <code>hash.json</code> file in the clone lists subfolder. When looking for updates, the newest <code>hash.json</code> is downloaded from from the location specified in <code>internal-config.json</code>:</p> <pre><code>\"cloneListMetadataUrl\": \"https://raw.githubusercontent.com/unexpectedpanda/retool-clonelists-metadata/\",\n</code></pre> <p>The SHA256 hashes in that file are then compared against the clone lists on the local disk. If a clone list hash doesn't match, then a new version of that file is downloaded from the same location as listed above.</p> <p>After your PR has been merged, the <code>hash.json</code> is updated by unexpectedpanda with the SHA256 hash of the updated or new clone lists.</p>"},{"location":"contribute-clone-lists-top-level-keys/","title":"Top level keys","text":"<p>Each clone list JSON file contains different top level keys that determine how Retool treats the titles in the related input DAT file. The keys are as follows:</p> <ul> <li> <p><code>description (obj[str, str])</code></p> </li> <li> <p><code>mias (array[str])</code></p> </li> <li> <p><code>variants (array[obj])</code></p> </li> </ul> <p>All keys are optional, except for <code>description</code>. They should be kept in the same order as shown on this page.</p>"},{"location":"contribute-clone-lists-variants-compilations/","title":"The compilations array","text":"<p>The <code>compilations</code> array is found in objects inside the <code>variants</code> array. The objects inside the <code>compilations</code> array list variants of titles that belong to a <code>group</code>.</p> <p>Tip</p> <p>Make sure you've read how the <code>titles</code> array works before learning about compilations.</p> <p>You add compilations to the groups of each individual title that's found in the compilation. For example, for a compilation of Example Title 1 &amp; Example Title 2 (Europe) (En,De,Fr+En,Ja) you add it to the groups Example Title and Example Title 2.</p> <p>Even if a title in the compilation is not available separately, for Retool to work properly you must create a group as if the standalone title exists, and add the compilation to it.</p> <p>A <code>compilations</code> array looks similar to the following example:</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Example Title\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title\"},\n      {\"searchTerm\": \"Exemple de Titre\"},\n      {\"searchTerm\": \"Titolo di Esempio\"},\n      {\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n    ],\n    \"compilations\": [\n      {\"searchTerm\": \"Example Title 1 &amp; Example Title 2\", \"titlePosition\": 1}\n    ]\n  },\n  {\n    \"group\": \"Example Title 2\",\n    \"compilations\": [\n      {\"searchTerm\": \"Example Title 1 &amp; Example Title 2\", \"titlePosition\": 2}\n    ]\n  }\n]\n</code></pre> <p>When Retool is comparing titles, a compilation inside a group is treated as if it is only one of the titles in the compilation. For example, <code>Example Title 1 &amp; Example Title 2</code> inside a group of <code>Example Title 2</code> is treated as if it is only Example Title 2 for comparison purposes. This is known as a virtual title.</p> <p>You can use the following keys in an object that's in a <code>compilations</code> array:</p> Key Type Description <code>searchTerm</code> <code>str</code> The search term used when looking for a title in an input DAT file. <code>nameType</code> <code>str</code> <p>Optional. What name type the search term is, so Retool can match it         accurately against names in the input DAT file. The valid values are:</p> <ul> <li><code>short</code>: Default. The             short name.           </li> <li><code>full</code>: The             full name.           </li> <li><code>regionFree</code>: The             region-free name.           </li> <li><code>regex</code>: A regex match on the full name. <code>priority</code> <code>int</code> <p>Optional, defaults to <code>1</code>. Lower numbers are considered higher           priority, with <code>1</code> the highest priority. Typically, a title with a           higher priority wins when Retool is choosing a 1G1R title.</p> <p>Setting a priority on a compilation sets it for the virtual title, not the           compilation itself. Virtual title priorities are compared against           <code>titles</code> and <code>supersets</code> priorities.</p> <code>categories</code> <code>array[str]</code> <p>Optional, A category is a class of titles, like Demos, Games, and Multimedia.           Multiple categories can be assigned to a title, and existing categories are           overridden.</p> <code>titlePosition</code> <code>int</code> <p>Optional. Sometimes No-Intro uses the <code>+</code> notation in         language tags for compilations, using it as a separator to assign different         languages to each title in the compilation. For example,         Example Title 1 + Example Title 2 (Europe) (En,De,Fr+En,Ja)         means that Example Title 1 in the compilation supports English, German,         and French, whereas Example Title 2 supports English and Japanese.</p> <p>To assign the correct languages to the appropriate virtual title when the         <code>+</code> notation is used, you need to set a <code>titlePosition</code>. As         Example Title is first in the compilation name, in the         <code>Example Title</code> group you set a <code>titlePosition</code> of         <code>1</code> on the compilation. This creates the virtual title         :V: Example Title (Europe) (En,De,Fr), which is used to compare against         the individual variants of that title also listed in the group. In the         <code>Example Title 2</code> group you set a <code>titlePosition</code> of         <code>2</code>. This creates the virtual title         :V: Example Title 2 (Europe) (En,Ja) for the sake of comparison.</p> <code>localNames</code> <code>obj[str, str]</code> <p>Optional. Contains the local names of a title. Add names for all available         languages, including English.</p> <p>Language keys must be lowercase versions of languages found in the         <code>user-config.yaml</code> file or RetoolGUI languages list. For example,         <code>japanese</code>, <code>russian</code>, <code>chinese (traditional)</code>.</p> <pre><code>\"localNames\": {\n  \"english\": \"Example title\",\n  \"chinese (traditional)\": \"\u6a19\u984c\u7bc4\u4f8b\",\n  \"japanese\": \"\u30bf\u30a4\u30c8\u30eb\u306e\u4f8b\"\n}\n</code></pre> <p>See Local names         for more information on specifying local names.</p>"},{"location":"contribute-clone-lists-variants-compilations/#how-it-works","title":"How it works","text":"<p>Assume a DAT file contains the following titles:</p> <pre><code>Example Title (USA)\nExample Title (Europe)\nExample Title Budget Edition (USA)\nExample Title 1 &amp; Example Title 2 (Europe) (En,Fr,De+En,Ja)\nExemple de Titre (France)\nTitolo di Esempio (Italy)\nExample Title 2 - Special Edition (USA)\n</code></pre> <p>They are all individual titles, except for Example Title 1 &amp; Example Title 2 (Europe) (En,Fr,De+En,Ja), which is a compilation of Example Title and Example Title 2. How do we make sure that compilation is properly compared against the individual titles it's made of?</p> <p>The answer is to add the compilation to a group for each individual title.</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Example Title\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title\"},\n      {\"searchTerm\": \"Exemple de Titre\"},\n      {\"searchTerm\": \"Titolo di Esempio\"},\n      {\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n    ],\n    \"compilations\": [\n      {\"searchTerm\": \"Example Title 1 &amp; Example Title 2\", \"titlePosition\": 1}\n    ]\n  },\n  {\n    \"group\": \"Example Title 2\",\n    \"titles\": [\n        {\"searchTerm\": \"Example Title 2 - Special Edition\"}\n      ],\n    \"compilations\": [\n      {\"searchTerm\": \"Example Title 1 &amp; Example Title 2\", \"priority\": 2, \"titlePosition\": 2}\n    ]\n  }\n]\n</code></pre> <p>Assuming a user sets USA as their highest region, here's what happens when Retool processes these groups:</p> <ol> <li> <p>Retool looks at the <code>Example Title</code> group, and finds     Example Title 1 &amp; Example Title 2 (Europe) (En,Fr,De+En,Ja) in the DAT file via the     compilations search term <code>Example Title 1 &amp; Example Title 2</code>.</p> </li> <li> <p>That compilation is assigned a virtual name that matches the group name, and includes     region and language information: :V: Example Title (Europe) (En,Fr,De). The languages     of <code>En,Fr,De</code> are added because a <code>titlePosition</code> of <code>1</code> has been set, so Retool knows     to use the first set of languages out of <code>(En,Fr,De+En,Ja)</code>.</p> <p>Creating a virtual title effectively splits out that indvidual title from the compilation for comparison, meaning the second title in the compilation isn't considered when comparing titles in this group. Because no <code>priority</code> is defined, the virtual title is assigned a priority of <code>1</code>.</p> </li> <li> <p>Retool looks at the <code>Example Title 2</code> group, and finds     Example Title 1 &amp; Example Title 2 (Europe) (En,Fr,De+En,Ja) in the DAT file via the     compilations search term <code>Example Title 1 &amp; Example Title 2</code>.</p> </li> <li> <p>Although it's the same compilation as before, it's assigned a virtual name that     matches the <code>Example Title 2</code> group name: :V: Example Title 2 (Europe) (En,Ja). The languages     of <code>En,Ja</code> are added because a <code>titlePosition</code> of <code>2</code> has been set, so Retool knows     to use the second set of languages out of <code>(En,Fr,De+En,Ja)</code>.</p> <p>This means the first title in the compilation isn't considered when comparing titles in this group. This variant of the title inside the compilation is a lower version than Example Title 2 - Special Edition (Europe), so it is assigned a priority of <code>2</code>.</p> </li> <li> <p>Example Title (USA) wins against other individual titles in its group, because the     user has set USA as their highest region, and <code>Example Title Budget Edition</code> has been     set to a priority of <code>2</code>.</p> </li> <li> <p>Example Title 2 - Special Edition (Europe) wins as the individual title in its group,     because it is the only individual title in the <code>Example Title 2</code> group.</p> </li> <li> <p>Retool compares the virtual compilation titles against the individual titles in the     same groups:</p> <ul> <li> <p>Example Title (USA) is compared against :V: Example Title (Europe) (En,Fr,De).   The individual USA title wins due to region priority.</p> </li> <li> <p>Example Title 2 - Special Edition (Europe) is compared against   :V: Example Title 2 (Europe) (En,Ja). The latter is discarded because it has a lower   priority.</p> </li> </ul> </li> </ol> <p>Ultimately Example Title (USA) and Example Title 2 - Special Edition (Europe) become the 1G1R titles, and Example Title 1 &amp; 2 (Europe) (En,Fr,De+En,Ja) is discarded.</p>"},{"location":"contribute-clone-lists-variants-filters/","title":"Filters","text":"<p>Filters are a way to isolate specific titles in a search result, and apply <code>results</code> to them based on <code>conditions</code>.</p> <pre><code>{\n  \"group\": \"Bomberman GB 2\",\n  \"titles\": [\n    {\n      \"searchTerm\": \"Bomberman GB 2\",\n      \"filters\": [\n        {\n          \"conditions\": {\"matchRegions\": [\"Japan\"]},\n          \"results\": {\"group\": \"Bomberman GB\"}\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>In the previous example the <code>searchTerm</code> of <code>Bomberman GB2</code> finds all titles with the short name <code>Bomberman GB2</code>, and gathers them in the <code>Bomberman GB2</code> group. If the region of a title happens to include <code>Japan</code>, then that title is moved to the group <code>Bomberman GB</code> instead.</p> <p>Because the <code>filters</code> key is an array, you can add as many conditions and results pairs as you like.</p> <p>The valid conditions are:</p> Key Type Description <code>matchLanguages</code> <code>array[str]</code> <p>Optional. A list of languages using                        ISO-639-1         two-letter language codes, that a title must match for the condition to         be true.</p> <pre><code>\"conditions\": {\n  \"matchLanguages\": [\"Fr\", \"Nl\" , \"Sv\", \"No\", \"Da\", \"Fi\"]\n}\n</code></pre> <code>matchRegions</code> <code>array[str]</code> <p>Optional. A list of regions that a title must match for the condition         to be true.</p> <pre><code>\"conditions\": {\n  \"matchRegions\": [\"Europe\", \"Japan\"]\n}\n</code></pre> <code>matchString</code> <code>str</code> <p>Optional. A regex string that must match against the title's full name         for the condition to be true.</p> <pre><code>\"conditions\": {\n  \"matchString\": \"\\\\(Special Edition\\\\)\"\n}\n</code></pre> <code>regionOrder</code> <code>obj[str[array[str]]]</code> <p>Optional. A list of regions that must be higher than others in the         user's region priority for the condition to be true.</p> <p>If any of the regions in the <code>higherRegions</code>         array is higher in the user region order than all of the         regions in the <code>lowerRegions</code> array, then the condition is         true.         <pre><code>\"regionOrder\": {\n  \"higherRegions\": [\"Europe\"],\n  \"lowerRegions\": [\"Spain\"]\n}\n</code></pre> <p>You can also use <code>All other regions</code> as the only region in         either the <code>higherRegions</code> or <code>lowerRegions</code>         arrays, and the remaining regions will be calculated automatically based         on the array you've already populated.</p> <pre><code>\"regionOrder\": {\n  \"higherRegions\": [\"Japan\", \"Korea\", \"Taiwan\", \"Asia\"],\n  \"lowerRegions\": [\"All other regions\"]\n}\n</code></pre> <p>The valid results are:</p> Key Type Description <code>categories</code> <code>array[str]</code> Optional. A category is a class of titles, like Demos, Games, and         Multimedia. Multiple categories can be assigned to a title, and existing         categories are overridden. <code>englishFriendly</code> <code>bool</code> <p>Optional, defaults to <code>false</code>. An English-friendly title           is one that hasn't been marked as supporting English, but an           English-speaking player can easily play to completion. Setting           <code>englishFriendly</code> to <code>true</code> makes Retool treat a           title as if it supports English.</p> <code>group</code> <code>str</code> Optional. The <code>group</code> value is used as the new         group name and         short name for all the titles         that match the filter. <code>isOldest</code> <code>bool</code> <p>Optional, defaults to <code>false</code>. When a user selects         Prefer oldest production versions instead of newest, this can         be used to manually override Retool's automatic choice, or override priority         settings in clone lists. Setting <code>isOldest</code> to <code>true</code>         manually marks which title is the oldest in the group.</p> <code>superset</code> <code>bool</code> Optional. Designates the title as a superset. Supersets are variants         of titles that contain more content, or for some reason are superior to         another version. This might include, for example, a Game of the Year         edition, an all-in-one pack that bundles a game and all its DLC, or a         DVD version of a title previously released on multiple CDs. <code>localNames</code> <code>object[str, str]</code> <p>Optional. Contains the local names of a title. Add names for all           available languages, including English.</p> <p>Language keys must be lowercase versions of languages found in the           <code>user-config.yaml</code> file or RetoolGUI languages list. For           example, <code>japanese</code>, <code>russian</code>,           <code>chinese (traditional)</code>.</p> <pre><code>\"localNames\": {\n  \"english\": \"Example title\",\n  \"chinese (traditional)\": \"\u6a19\u984c\u7bc4\u4f8b\",\n  \"japanese\": \"\u30bf\u30a4\u30c8\u30eb\u306e\u4f8b\"\n}\n</code></pre> <p>See Local names         for more information on specifying local names.</p> <code>priority</code> <code>int</code> <p>Optional, defaults to <code>1</code>. Lower numbers are considered higher           priority, with <code>1</code> being the highest priority. Typically, a title           with a higher priority wins when Retool is choosing a 1G1R title.</p> <p>Priorities for <code>titles</code> are only taken into account for titles in           the same region, with same group and short name.</p>"},{"location":"contribute-clone-lists-variants-local/","title":"Local names","text":"<p>The No-Intro and Redump standard is to romanize title names from languages that don't use a Latin-based alphabet. They also restrict filenames to the 7-bit ASCII character set, which removes vital pronunciation cues from even latin-derived alphabets.</p> <p>While this is useful as a standard for those who primarily speak English or are managing a collection, it's not great for those looking to operate in their own language, or for people who are multilingual.</p> <p>The following examples show how to correct for common local naming scenarios.</p>"},{"location":"contribute-clone-lists-variants-local/#single-language-names","title":"Single language names","text":"<p>These names fall into one of the following categories:</p> <ul> <li> <p>Names that have have been romanized (given Latin characters to represent the original   characters) or reduced to 7-bit ASCII in a DAT file, but have a proper local name.</p> </li> <li> <p>Names that copy the American or European name for the sake of easily bundling together   clones, but don't actually feature that English name on the title screen or box.</p> </li> </ul> <p>For example, <code>Shining Force II - Inishie no Fuuin</code> is the romanized version of the proper Japanese name, <code>\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9II \u300e\u53e4\u306e\u5c01\u5370\u300f</code>. The title doesn't support English, and when someone chooses local names for Japanese titles in Retool, the name should be replaced with the Japanese version.</p> <p>Here's how to add this information to a clone list:</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Shining Force II - Inishie no Fuuin\",\n    \"titles\": [\n      {\n        \"searchTerm\": \"Shining Force II - Inishie no Fuuin\",\n        \"localNames\": {\n          \"japanese\": \"\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9II \u300e\u53e4\u306e\u5c01\u5370\u300f\"\n        }\n      }\n    ]\n  }\n]\n</code></pre> <p>If a user adds Japanese to their local names list in Retool and then processes the DAT file related to this clone list, the following process occurs:</p> <ol> <li> <p>Retool looks up the short name <code>Shining Force II - Inishie no Fuuin</code> in the input DAT     file, and finds that the full name <code>Shining Force II - Inishie no Fuuin (Japan)</code>     matches.</p> </li> <li> <p>Because the user has indicated that they want Japanese local names, if a     <code>localNames</code> object is present within a <code>searchTerm</code>, Retool checks for a     <code>japanese</code> key. If found, it uses the key's value for the title's new full name:     <code>\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9II \u300e\u53e4\u306e\u5c01\u5370\u300f</code>.</p> <p>Retool doesn't check if the title actually supports Japanese \u2014 because No-Intro and Redump language data can be incomplete, this is up to the clone list maintainer to determine.</p> </li> <li> <p>All tags are copied from the original title to the new full name. In this case,     <code>(Japan)</code> is appended to <code>\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9II \u300e\u53e4\u306e\u5c01\u5370\u300f</code>.</p> </li> <li> <p><code>\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9II \u300e\u53e4\u306e\u5c01\u5370\u300f (Japan)</code> is used instead of     <code>Shining Force II - Inishie no Fuuin (Japan)</code> in the output DAT file.</p> </li> </ol> <p>All languages supported in Retool are also supported in the <code>localNames</code> object. Use the lowercase representation of the language as shown in <code>config/internal-config.json</code> or RetoolGUI. For example, <code>Chinese (Simplified)</code> becomes <code>chinese (simplified)</code> in a clone list.</p> <p>Warning</p> <p>Romanized or translated English names by definition don't have native English titles, so don't include <code>english</code> in their <code>localNames</code> object. See multi-language names for situations where you can use the <code>english</code> key.</p>"},{"location":"contribute-clone-lists-variants-local/#multi-language-names","title":"Multi-language names","text":"<p>When a title displays a different name depending on the hardware or software configuration it's loaded on, then it's a multi-region name.</p> <p>For example, Streets of Rage shows exactly that name on the title screen if loaded in a US Sega Genesis. But load the exact same cartridge in a Japanese Mega Drive, and you'll see the English Bare Knuckle on the title screen. The Japanese box has both Bare Knuckle on it in English, and the katakana and kanji combination <code>\u30d9\u30a2\u30ca\u30c3\u30af\u30eb \u6012\u308a\u306e\u9244\u62f3</code> \u2014 roughly translated, <code>Bare Knuckle: Fists of Fury</code>. Still, a Japanese person is far more likely to think of the series as <code>\u30d9\u30a2\u30ca\u30c3\u30af\u30eb</code> than <code>Bare Knuckle</code> or <code>Streets of Rage</code>.</p> <p>You're also likely to see multi-region names for European titles, which can include many languages.</p> <p>Here's how to add this information to a clone list:</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Streets of Rage\",\n    \"titles\": [\n      {\n        \"searchTerm\": \"Streets of Rage\",\n        \"localNames\": {\n          \"english\": \"Streets of Rage\",\n          \"japanese\": \"\u30d9\u30a2\u30ca\u30c3\u30af\u30eb \u6012\u308a\u306e\u9244\u62f3\"\n        }\n      }\n    ]\n  }\n]\n</code></pre> <p>Depending on what languages a user adds to their localization list, a different name is written to the output DAT file:</p> <ul> <li> <p>If a user adds no languages to the localization list, the default name,   <code>Streets of Rage (Japan, USA)</code>, is used.</p> </li> <li> <p>If a user adds only Japanese to the localization list,  <code>\u30d9\u30a2\u30ca\u30c3\u30af\u30eb \u6012\u308a\u306e\u9244\u62f3 (Japan, USA)</code> is used.</p> </li> <li> <p>If a user adds Japanese and English to the localization list, but ranks Japanese above   English, then <code>\u30d9\u30a2\u30ca\u30c3\u30af\u30eb \u6012\u308a\u306e\u9244\u62f3 (Japan, USA)</code> is used. If they rank English above   Japanese, then <code>Streets of Rage (Japan, USA)</code> is used.</p> </li> </ul> <p>Tip</p> <p>You might have figured out that you can use local names to rename a title to whatever you want. As a general rule, official Retool clone lists won't change English names as recorded by No-Intro or Redump. If you need to correct a name, report the issue upstream.</p>"},{"location":"contribute-clone-lists-variants-local/#automated-local-names","title":"Automated local names","text":"<p>In many circumstances, No-Intro and Redump have listed local names in their databases. This information is stored in files found in the <code>metadata</code> folder. If there's no corresponding clone list entry for a title, Retool uses the <code>localName</code> value in the relevant <code>metadata</code> file for a title's local name.</p>"},{"location":"contribute-clone-lists-variants-local/#standards","title":"Standards","text":"<p>The following standards should be adhered to when adding local titles to a clone list.</p>"},{"location":"contribute-clone-lists-variants-local/#use-filters-for-multi-region-titles","title":"Use filters for multi-region titles","text":"<p>While there might only be one Example Title (USA, Japan) in a DAT file at the time you make a clone list, at some point in time an Example Title (Europe) or Example Title (Japan) might be added. To avoid a title getting the wrong local name, it's good practice to set a filter on a <code>searchTerm</code>, and set the <code>localNames</code> inside the filter so only the correct title is renamed.</p> <p>It's likely good enough to use a <code>matchRegions</code> condition in most circumstances:</p> <pre><code>{\n  \"group\": \"Raiden Trad\",\n  \"titles\": [\n    {\n      \"searchTerm\": \"Raiden Trad\",\n      \"filters\": [\n        {\n          \"conditions\": {\n            \"matchRegions\": [\"Japan\", \"USA\"]\n          },\n          \"results\": {\n            \"localNames\": {\n              \"english\": \"Raiden Trad\",\n              \"japanese\": \"\u96f7\u96fb\u4f1d\u8aac\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"contribute-clone-lists-variants-local/#japanese-titles","title":"Japanese titles","text":"<ul> <li> <p>Many Japanese titles show English names on their title screens and boxes, but are   referred to online using katakana/hiragana/kanji. Follow the Redump standard and use   Japanese kana wherever possible. When in doubt, search through Japanese sites that   sell classic titles or Japanese Wikipedia to check what title is used.</p> </li> <li> <p>Use zenkaku (full width) characters, not hankaku (half width). This includes   kana, punctuation, arabic numerals, and latin characters.</p> </li> </ul>"},{"location":"contribute-clone-lists-variants-local/#chinese-titles","title":"Chinese titles","text":"<p>Many entries in the Redump and No-Intro databases don't specify which written Chinese variant is being used: traditional (language code: <code>Zh-Hant</code>) or simplified (<code>Zh-Hans</code>). A lot of the time they just list the unspecified Chinese language code, <code>Zh</code>. Both databases also don't make a distinction between spoken languages (Mandarin or Cantonese in this case), written languages, or the availability of subtitles or dubs in a title.</p> <p>For Retool, thankfully we're only dealing with the local written name for a title, and so can stick with one of the following languages in the <code>localNames</code> object:</p> <ul> <li> <p><code>chinese (simplified)</code></p> </li> <li> <p><code>chinese (traditional)</code></p> </li> </ul> <p>For non-Chinese speakers trying to find out which language is used, you can make an educated guess. The following table serves as a cheat sheet for the Chinese variants that regions around the world mostly use.</p> Region Written language Spoken language Most of mainland China Simplified Mandarin Guangdong province, mainland China Simplified Cantonese Hong Kong Traditional Cantonese Macao Traditional Cantonese Malaysia Simplified Mandarin Singapore Simplified Mandarin Taiwan Traditional Mandarin <p>For extra confirmation of the written language being used, try putting a Chinese title name into Google Translate, and see what language the auto-detect suggests.</p>"},{"location":"contribute-clone-lists-variants-supersets/","title":"The supersets array","text":"<p>The <code>supersets</code> array is found in objects inside the <code>variants</code> array. The objects inside the <code>supersets</code> array list variants of titles that belong to a <code>group</code>.</p> <p>Tip</p> <p>Make sure you've read how the <code>titles</code> array works before learning about supersets.</p> <p>Supersets are variants of titles that contain more content, or for some reason are superior to another version. This might include, for example, a Game of the Year edition, an all-in-one pack that bundles a game and all its DLC, or a DVD version of a title previously released on multiple CDs.</p> <p>A <code>supersets</code> array looks similar to the following example:</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Example Title\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title\"},\n      {\"searchTerm\": \"Exemple de Titre\"},\n      {\"searchTerm\": \"Titolo di Esempio\"},\n      {\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n    ],\n    \"supersets\": [\n      {\"searchTerm\": \"Example Title - Game of the Year Edition\"}\n    ]\n  }\n]\n</code></pre> <p>You can use the following keys in an object that's in a <code>supersets</code> array:</p> Key Type Description <code>searchTerm</code> <code>str</code> The search term used when looking for a title in an input DAT file. <code>nameType</code> <code>str</code> <p>Optional. What name type the search term is, so Retool can match it         accurately against names in the input DAT file. The valid values are:</p> <ul> <li><code>short</code>: Default. The             short name.           </li> <li><code>full</code>: The             full name.           </li> <li><code>regionFree</code>: The             region-free name.           </li> <li><code>regex</code>: A regex match on the full name. <code>priority</code> <code>int</code> <p>Optional, defaults to <code>1</code>. Lower numbers are considered higher           priority, with <code>1</code> the highest priority. Typically, a title with a           higher priority wins when Retool is choosing a 1G1R title.</p> <p>Superset priorities are compared against <code>supersets</code> and         <code>compilations</code> priorities, but not <code>titles</code> priorities.</p> <code>categories</code> <code>array[str]</code> <p>Optional, A category is a class of titles, like Demos, Games, and Multimedia.           Multiple categories can be assigned to a title, and existing categories are           overridden.</p> <code>englishFriendly</code> <code>bool</code> <p>Optional, defaults to <code>false</code>. An English-friendly title is one that           hasn't been marked as supporting English, but an English-speaking player can           easily play to completion. Setting <code>englishFriendly</code> to           <code>true</code> makes Retool treat a title as if it supports English.</p> <code>isOldest</code> <code>bool</code> <p>Optional, defaults to <code>false</code>. When a user selects         Prefer oldest production versions instead of newest, this can         be used to manually override Retool's automatic choice, or override priority         settings in clone lists. Setting <code>isOldest</code> to <code>true</code>         manually marks which title is the oldest in the group.</p> <code>localNames</code> <code>obj[str, str]</code> <p>Optional. Contains the local names of a title. Add names for all available         languages, including English.</p> <p>Language keys must be lowercase versions of languages found in the         <code>user-config.yaml</code> file or RetoolGUI languages list. For example,         <code>japanese</code>, <code>russian</code>, <code>chinese (traditional)</code>.</p> <pre><code>\"localNames\": {\n  \"english\": \"Example title\",\n  \"chinese (traditional)\": \"\u6a19\u984c\u7bc4\u4f8b\",\n  \"japanese\": \"\u30bf\u30a4\u30c8\u30eb\u306e\u4f8b\"\n}\n</code></pre> <p>See Local names         for more information on specifying local names.</p> <code>filters</code> <code>array[obj]</code> <p>Optional. Treat some titles found by a search term differently based on         <code>conditions</code>. If all <code>conditions</code> are true, then Retool         executes the <code>results</code>.</p> <pre><code>\"filters\": [\n  {\n    \"conditions\": {\"matchRegions\": [\"Japan\"]},\n    \"results\": {\"group\": \"Somewhere else\"}\n  }\n]\n</code></pre> <p>See Filters         for more information, including the valid <code>conditions</code> and         <code>results</code>.</p>"},{"location":"contribute-clone-lists-variants-supersets/#how-it-works","title":"How it works","text":"<p>Assume a DAT file contains the following titles:</p> <pre><code>Example Title (USA)\nExample Title Budget Edition (USA)\nExample Title - Game of the Year Edition (United Kingdom)\nExample Title (Europe)\nExemple de Titre (France)\nTitolo di Esempio (Italy)\n</code></pre> <p>Most are exactly the same title, just different versions or from different regions. Example Title - Game of the Year Edition (United Kingdom), however, contains the latest version of the game plus all of its DLC, but was never released in the USA or Europe. If the user is an English speaker and puts USA first, then how do we make sure this title gets selected as the superior version of the game? With the <code>supersets</code> array.</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Example Title\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title\"},\n      {\"searchTerm\": \"Exemple de Titre\"},\n      {\"searchTerm\": \"Titolo di Esempio\"},\n      {\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n    ],\n    \"supersets\": [\n      {\"searchTerm\": \"Example Title - Game of the Year Edition\"}\n    ]\n  }\n]\n</code></pre> <p>By default, supersets look at language support over a user's region order. If a superset supports the top language found in a group of titles (in this example, that's English), then it's selected over other standard titles in higher regions as it's considered superior.</p> <p>In this example, because no language order is specified but USA is listed first, Retool infers a preference for English, finds the superset Example Title - Game of the Year Edition (United Kingdom), and selects it as the 1G1R title above the standard USA title, as it supports the same language and is considered superior due to having more content.</p> <p>Note</p> <p>A user can force adherence to region order  with the Prefer regions over languages option. In that scenario, Example Title (USA) is selected at the cost of losing the extra content in Example Title - Game of the Year Edition (United Kingdom).</p> <p>Supersets are also useful to manage things like DVD releases of titles that were previously distributed on multiple CDs. For example, if a DAT file contains the following title names, all of which represent the same title:</p> <pre><code>Example Title (Disc 1) (USA)\nExample Title (Disc 2) (USA)\nExample Title (Disc 3) (USA)\nBeispieltitel (Disc 1) (Germany)\nBeispieltitel (Disc 2) (Germany)\nBeispieltitel (Disc 3) (Germany)\nExample Title (USA)\n</code></pre> <p>And Example Title (USA) is the DVD version of the three-disc CD release Example Title (USA) and Beispieltitel (Germany) titles, then you can set up a <code>variants</code> object as follows:</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Example Title (Disc 1)\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title (Disc 1)\"},\n      {\"searchTerm\": \"Beispieltitel (Disc 1)\"}\n    ],\n    \"supersets\": [\n      {\"searchTerm\": \"Example Title\"}\n    ]\n  },\n  {\n    \"group\": \"Example Title (Disc 2)\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title (Disc 2)\"},\n      {\"searchTerm\": \"Beispieltitel (Disc 2)\"}\n    ],\n    \"supersets\": [\n      {\"searchTerm\": \"Example Title\"}\n    ]\n  },\n  {\n    \"group\": \"Example Title (Disc 3)\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title (Disc 3)\"},\n      {\"searchTerm\": \"Beispieltitel (Disc 3)\"}\n    ],\n    \"supersets\": [\n      {\"searchTerm\": \"Example Title\"}\n    ]\n  }\n]\n</code></pre> <p>Note that the <code>Example Title</code> superset is in all three groups. In this scenario, if a user selects USA as their highest region, then Example Title (USA) is selected as the 1G1R title over the original, multidisc CD version. If they select Germany, then the three German discs are chosen instead.</p>"},{"location":"contribute-clone-lists-variants-titles/","title":"The titles array","text":"<p>The <code>titles</code> array is found in objects inside the <code>variants</code> array. The objects inside the <code>titles</code> array list variants of titles that belong to a <code>group</code>.</p> <p>A <code>titles</code> array looks similar to the following example:</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Example Title\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title\"},\n      {\"searchTerm\": \"Exemple de Titre\"},\n      {\"searchTerm\": \"Titolo di Esempio\"},\n      {\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n    ]\n  }\n]\n</code></pre> <p>You can use the following keys in an object that's in a <code>titles</code> array:</p> Key Type Description <code>searchTerm</code> <code>str</code> The search term used when looking for a title in an input DAT file. <code>nameType</code> <code>str</code> <p>Optional. What name type the search term is, so Retool can match it         accurately against names in the input DAT file. The valid values are:</p> <ul> <li><code>short</code>: Default. The             short name.           </li> <li><code>full</code>: The             full name.           </li> <li><code>regionFree</code>: The             region-free name.           </li> <li><code>regex</code>: A regex match on the full name. <code>priority</code> <code>int</code> <p>Optional, defaults to <code>1</code>. Lower numbers are considered higher           priority, with <code>1</code> being the highest priority. Typically, a title           with a higher priority wins when Retool is choosing a 1G1R title.</p> <p>Priorities for <code>titles</code> are only taken into account for titles in           the same region, with same group and short name.</p> <code>categories</code> <code>array[str]</code> <p>Optional, A category is a class of titles, like Demos, Games, and Multimedia.           Multiple categories can be assigned to a title, and existing categories are           overridden.</p> <code>englishFriendly</code> <code>bool</code> <p>Optional, defaults to <code>false</code>. An English-friendly title is one that           hasn't been marked as supporting English, but an English-speaking player can           easily play to completion. Setting <code>englishFriendly</code> to           <code>true</code> makes Retool treat a title as if it supports English.</p> <code>isOldest</code> <code>bool</code> <p>Optional, defaults to <code>false</code>. When a user selects         Prefer oldest production versions instead of newest, this can         be used to manually override Retool's automatic choice, or override priority         settings in clone lists. Setting <code>isOldest</code> to <code>true</code>         manually marks which title is the oldest in the group.</p> <code>localNames</code> <code>obj[str, str]</code> <p>Optional. Contains the local names of a title. Add names for all available         languages, including English.</p> <p>Language keys must be lowercase versions of languages found in the         <code>user-config.yaml</code> file or RetoolGUI languages list. For example,         <code>japanese</code>, <code>russian</code>, <code>chinese (traditional)</code>.</p> <pre><code>\"localNames\": {\n  \"english\": \"Example title\",\n  \"chinese (traditional)\": \"\u6a19\u984c\u7bc4\u4f8b\",\n  \"japanese\": \"\u30bf\u30a4\u30c8\u30eb\u306e\u4f8b\"\n}\n</code></pre> <p>See Local names         for more information on specifying local names.</p> <code>filters</code> <code>array[obj]</code> <p>Optional. Treat some titles found by a search term differently based on         <code>conditions</code>. If all <code>conditions</code> are true, then Retool         executes the <code>results</code>.</p> <pre><code>\"filters\": [\n  {\n    \"conditions\": {\"matchRegions\": [\"Japan\"]},\n    \"results\": {\"group\": \"Somewhere else\"}\n  }\n]\n</code></pre> <p>See Filters         for more information, including the valid <code>conditions</code> and         <code>results</code>.</p>"},{"location":"contribute-clone-lists-variants-titles/#how-it-works","title":"How it works","text":"<p>Assume a DAT file contains the following titles:</p> <pre><code>Example Title (USA)\nExample Title (Europe)\nExample Title Budget Edition (USA)\nExemple de Titre (France)\nTitolo di Esempio (Italy)\n</code></pre> <p>They are all the same title, just different versions or from different regions. A user in Retool loads the DAT file, and selects the following region order:</p> <pre><code>USA\nEurope\nUnited Kingdom\nFrance\nItaly\n</code></pre> <p>When the DAT file is processed, Retool automatically links together Example Title (USA) and Example Title (Europe), as they have the same short name: <code>example title</code>. However, it misses the other titles, as they have different short names.</p> <p>A <code>variants</code> object like the following example links them all together:</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Example Title\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title\"},\n      {\"searchTerm\": \"Exemple de Titre\"},\n      {\"searchTerm\": \"Titolo di Esempio\"},\n      {\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n    ]\n  }\n]\n</code></pre> <p>Because no <code>nameType</code> is specified in each title object, Retool assumes the <code>searchTerm</code> is a short name, and looks in the related DAT file for names that have the same short name. When it finds those titles, it assigns the same group and short name to them, <code>example title</code>, and then Retool knows they are related.</p> <p>The <code>priority</code> of <code>2</code> for <code>Example Title Budget Edition</code> indicates that when Retool is processing the USA region, to select Example Title (USA) over Example Title Budget Edition (USA) when Retool considers clone list priority. There are other factors that might eliminate a title before Retool gets to clone list priority.</p> <p>In this example, because the user has set USA first in the region order, Example Title (USA) is selected as the 1G1R title, and the others are discarded.</p>"},{"location":"contribute-clone-lists-variants/","title":"Variants","text":"<p>When Retool doesn't automatically detect titles that are related to each other, you can manually group them together in the <code>variants</code> array. The <code>variants</code> array can also be used to set certain properties on titles that aid with filtering.</p> <p>You can do the following things in a <code>variants</code> array:</p> <ul> <li> <p>Assign titles with different names to the same group.</p> </li> <li> <p>Move titles to different groups than Retool initially assigns them to.</p> </li> <li> <p>Group supersets and compilations with individual titles.</p> </li> <li> <p>Set priorities on titles to make sure Retool selects the correct one during   1G1R processing.</p> </li> <li> <p>Assign categories to titles.</p> </li> <li> <p>Set local names for titles.</p> </li> <li> <p>Tell Retool to ignore titles (not recommended).</p> </li> <li> <p>Use <code>filters</code> to conditionally do some of the above things based on a title's   regions, languages, a regex match against its full name, or the user's region   order.</p> </li> </ul>"},{"location":"contribute-clone-lists-variants/#structure","title":"Structure","text":"<p>A <code>variants</code> array contains objects, and looks similar to the following example:</p> <pre><code>\"variants\": [// (1)!\n  {\n    \"group\": \"Example Title\",// (2)!\n    \"categories\": [\"Demos\", \"Games\"],// (8)!\n    \"titles\": [// (3)!\n      {\"searchTerm\": \"Example Title\"},// (4)!\n      {\"searchTerm\": \"Exemple de Titre\"},\n      {\"searchTerm\": \"Titolo di Esempio\"},\n      {\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}// (5)!\n    ],\n    \"supersets\": [// (6)!\n      {\"searchTerm\": \"Example Title Special Edition\"}\n    ],\n    \"compilations\": [// (7)!\n      {\"searchTerm\": \"Example Title I &amp; II Series Collection\", \"titlePosition\": 1}\n    ]\n  }\n]\n</code></pre> <ol> <li>The variants array.</li> <li>The new group and short name to assign to the contained titles, if they're found in an     input DAT file.</li> <li>The <code>titles</code> array contains singular, standard titles that belong to this group.</li> <li>The search term used when looking for a title in an input DAT file.</li> <li>If there are two titles from the same region, a <code>priority</code> can determine which should     be selected. Lower numbers are higher priority. If no <code>priority</code> is specified, the     priority of the entry is <code>1</code>.</li> <li>The <code>supersets</code> array contains singular titles that contain more content, or for some     reason are superior to standard versions. For example, game of the year editions, or a     DVD version of a title that was previously released on multiple CDs.</li> <li>The <code>compilations</code> array contains titles that in themselves contain multiple titles.     They might be from the same series of games, a single publisher, from a single genre,     or otherwise.</li> <li>The <code>categories</code> array overrides an existing title's categories, and replaces them     with the ones in the list. When applied at this level, all <code>titles</code>, <code>supersets</code>,     and <code>compilations</code> are assigned the listed categories.</li> </ol> <p>Each object in the <code>variants</code> array describes a group of titles, and can include the following keys:</p> Key Type Description <code>group</code> <code>str</code> The <code>group</code> value is used as the new       group name and       short name for all of the titles in the       object. <code>categories</code> <code>array[str]</code> Optional. A category is a class of titles, like Demos, Games, and Multimedia.       Multiple categories can be assigned to a title, and existing categories are       overridden. If assigned at this level, all <code>titles</code>,       <code>supersets</code>, and <code>compilations</code> in the object inherit the       listed categories. <code>ignore</code> <code>bool</code> <p>Optional. Force removes the title from Retool's consideration. If assigned at       this level, all <code>titles</code>, <code>supersets</code>, and       <code>compilations</code> in the object are ignored.</p> <p>Caution</p> <p>The <code>ignore</code> key should almost never be used, as ignored titles are           completely removed from Retool's consideration during processing, and their           relationship with other titles is destroyed. This makes it particularly hard to           keep track of relationships when updating clone lists, and can frustrate any           traces you perform to debug issues.</p> <code>titles</code> <code>array[obj]</code> <p>Optional. Contains singular, standard titles that belong to a group.</p> <p>A <code>variants</code> object must contain at least one <code>titles</code>,         <code>supersets</code>, or <code>compilations</code> array.</p> <code>supersets</code> <code>array[obj]</code> <p>Optional. Contains singular titles that contain more content, or for some           reason are superior to standard versions. This might include, for example,           a game of the year edition, an all-in-one pack that bundles a game and all its           DLC, or a DVD version of a title that was previously released on multiple           CDs.</p> <p>A <code>variants</code> object must contain at least one <code>titles</code>,         <code>supersets</code>, or <code>compilations</code> array.</p> <code>compilations</code> <code>array[obj]</code> <p>Optional. Contains titles that in themselves contain multiple titles. They might         be from the same series of games, a single publisher, from a single genre, or         otherwise.</p> <p>A <code>variants</code> object must contain at least one <code>titles</code>,         <code>supersets</code>, or <code>compilations</code> array.</p>"},{"location":"contribute-clone-lists-variants/#standards","title":"Standards","text":"<p>The following standards should be adhered to when contributing to a <code>variants</code> array. This helps to keep clone lists maintainable.</p>"},{"location":"contribute-clone-lists-variants/#order","title":"Order","text":"<ol> <li> <p>Keep all the objects in the <code>variants</code> array in alphabetical order, based on the     <code>group</code> name.</p> </li> <li> <p>Within an object inside the <code>variants</code> array, keep the key order as follows:</p> <ol> <li> <p><code>group</code></p> </li> <li> <p><code>categories</code></p> </li> <li> <p><code>ignore</code></p> </li> <li> <p><code>titles</code></p> </li> <li> <p><code>supersets</code></p> </li> <li> <p><code>compilations</code></p> </li> </ol> </li> <li> <p>Make sure the objects inside the <code>titles</code>, <code>supersets</code>, and <code>compilations</code> arrays are     ordered by priority first, and then alphabetically within those priorities.</p> <p>For example, this is correct:</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Example Title\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title\"},\n      {\"searchTerm\": \"Exemple de Titre\"},\n      {\"searchTerm\": \"Titolo di Esempio\"},\n      {\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2}\n    ]\n  }\n]\n</code></pre> <p>This is incorrect:</p> <pre><code>\"variants\": [\n  {\n    \"group\": \"Example Title\",\n    \"titles\": [\n      {\"searchTerm\": \"Example Title\"},\n      {\"searchTerm\": \"Example Title Budget Edition\", \"priority\": 2},\n      {\"searchTerm\": \"Titolo di Esempio\"},\n      {\"searchTerm\": \"Exemple de Titre\"}\n    ]\n  }\n]\n</code></pre> </li> </ol>"},{"location":"contribute-clone-lists-variants/#group-names","title":"Group names","text":"<p>The <code>group</code> key in each array object should be based on one of the title names in the group, preferably from a USA variant and in English. Some titles won't exist in all regions, so follow this order for naming the <code>group</code> key:</p> <ol> <li> <p>USA name in English</p> </li> <li> <p>United Kingdom name in English</p> </li> <li> <p>European name in English</p> </li> <li> <p>Any other region in English</p> </li> <li> <p>Japanese name</p> </li> <li> <p>Spanish name</p> </li> <li> <p>Portuguese name</p> </li> <li> <p>French name</p> </li> <li> <p>German name</p> </li> <li> <p>Whatever other name is available</p> </li> </ol>"},{"location":"contribute-clone-lists-variants/#avoid-certain-group-names","title":"Avoid certain group names","text":"<p>Avoid having a <code>group</code> name that is the same as a lower priority <code>searchTerm</code> in the titles array, or a <code>searchTerm</code> in a superset. For example:</p> <pre><code>{\n  \"group\": \"Title\",\n  \"titles\": [\n    {\"searchTerm\": \"Title Director's Cut\"}\n    {\"searchTerm\": \"Title\", \"priority\": 2}\n  ]\n}\n</code></pre> <p>In this scenario, Retool sees the first entry <code>Title Director's Cut</code>, and goes looking for titles with the short name <code>title director's cut</code>. When it finds a match, it changes that title's short name to match the group, <code>title</code>.</p> <p>When it gets to the second entry, <code>Title</code>, it goes looking for titles with the short name <code>title</code>... but that's what we just renamed the Director's Cut short name to. Retool promptly assigns everything in the group a priority of <code>2</code> as a result.</p> <p>A similar thing happens if you have a a superset with a <code>searchTerm</code> that's the same as the <code>group</code>:</p> <pre><code>{\n  \"group\": \"Title\",\n  \"titles\": [\n    {\"searchTerm\": \"Title Director's Cut\"}\n  ],\n  \"supersets\": [\n    {\"searchTerm\": \"Title\"}\n  ]\n}\n</code></pre> <p>In this scenario, everything in the group gets assigned as a superset as a result.</p> <p>If you run into this situation, the easiest solution is to rename the group to match the first <code>searchTerm</code> in the <code>titles</code> array, which should be the highest priority:</p> <pre><code>{\n  \"group\": \"Title Director's Cut\",\n  \"titles\": [\n    {\"searchTerm\": \"Title Director's Cut\"}\n    {\"searchTerm\": \"Title\", \"priority\": 2}\n  ]\n}\n</code></pre> <p>Alternatively, you can give the group a name that matches none of the entries.</p>"},{"location":"contribute-clone-lists/","title":"Create and edit clone lists","text":"<p>Clone lists are JSON files that primarily define relationships between titles that Retool doesn't automatically pick up. They're useful both for matching titles of completely different names, and for overriding some of the default choices that Retool makes. Additionally, they can add more accurate filter criteria like different categories to titles, and even additional data like local title names.</p> <p>Contributing to Retool's clone lists directly involves code and being familiar with Git and GitHub. If that's not something you're interested in, you can still request clone list changes by filing an issue.</p> <p>If you want to contribute directly, fork the clone lists and metadata repository, read the following guidelines, make your changes, and then submit a pull request.</p>"},{"location":"contribute-clone-lists/#before-you-begin","title":"Before you begin","text":"<p>If you want to create or edit clone lists, you need to understand JSON and the following data structures:</p> <ul> <li> <p>Key/value pairs</p> </li> <li> <p>Strings</p> </li> <li> <p>Integers</p> </li> <li> <p>Arrays</p> </li> <li> <p>Objects</p> </li> </ul> <p>It also helps to understand Retool's terminology, and the different names it assigns to titles to help match and group them together accurately.</p>"},{"location":"contribute-clone-lists/#titles-that-retool-automatically-detects-as-clones","title":"Titles that Retool automatically detects as clones","text":"<p>Before referencing clone lists, Retool parses a DAT file and creates objects for all of its titles. If multiple titles have the same group name and short name, Retool assumes they're related to each other.</p> <p>Names should only be added to clone lists in the following situations:</p> <ul> <li> <p>To link together titles that ordinarily would have different group/short names due to   regional naming, for example Indigo Prophecy and Fahrenheit.</p> </li> <li> <p>To override Retool's default grouping.</p> </li> <li> <p>To assign categories to titles.</p> </li> <li> <p>To assign local names to titles.</p> </li> <li> <p>To designate a title as missing in action (MIA).</p> </li> </ul>"},{"location":"contribute-clone-lists/#clone-list-location-and-names","title":"Clone list location and names","text":"<p>Clone lists are found by default in the <code>clonelists</code> subfolder. What subfolder Retool looks for clone lists in is defined in <code>config/internal-config.json</code> in the <code>cloneLists</code> object:</p> <pre><code>\"cloneLists\": {\n  \"localDir\": \"clonelists\"\n}\n</code></pre> <p>Retool selects the correct clone list for the loaded DAT file by checking the <code>&lt;name&gt;</code> and <code>&lt;url&gt;</code> tags in the header of the DAT file, and then looking for a matching filename with the release group appended in the <code>clonelists</code> folder. For example, for Redump's Sony PlayStation DAT file, the <code>&lt;name&gt;</code> is <code>Sony - PlayStation</code>. Therefore Retool looks for the clone list <code>Sony - PlayStation (Redump).json</code> in the <code>clonelists</code> folder. If a matching file isn't found, then only Retool's automatic clone detection is used.</p>"},{"location":"contribute-clone-lists/#reference-sites","title":"Reference sites","text":"<p>The following sites can help in identifying titles that are related to each other, or for finding local title names.</p> <p>DAT release groups:</p> <ul> <li> <p>No-Intro    Lists clones on individual title pages.</p> </li> <li> <p>Redump    Useful for local title names that use non-Latin characters like Japanese, Chinese,   Korean, and Russian. You can then use these in Google Search   or Translate to help make connections. Sometimes   there's useful information in the comments of a disc page.</p> </li> </ul> <p>Databases:</p> <ul> <li>Atari Mania (Atari titles)</li> <li>Bootleg Games Wiki</li> <li>GameTDB</li> <li>Handheld Underground</li> <li>LaunchBox Games Database</li> <li>Moby Games</li> <li>Online Games DatenBank</li> <li>PlayStation DataCenter (PlayStation, PlayStation 2,   and PlayStation Portable titles)</li> <li>PSCX2 Wiki (PlayStation 2 titles)</li> <li>Renascene (PlayStation Vita titles)</li> <li>Retroplace</li> <li>Sega Retro (Sega console titles)</li> <li>SMS Power (Sega 8-bit console titles)</li> <li>The PC Engine Software Bible (NEC PC Engine/TurboGrafx-16   titles)</li> <li>The Cutting Room Floor</li> <li>The Video Game Critic</li> <li>The World of CDI (Philips CD-I titles)</li> <li>VGM</li> <li>VGMdb</li> </ul> <p>General sites and retail stores:</p> <ul> <li>Amazon.jp</li> <li>PlayAsia</li> <li>Wikipedia</li> <li>YouTube</li> </ul>"},{"location":"contribute-code/","title":"Contribute to code","text":"<p>Retool uses Hatch for environment management, code formatting and testing. Tests are run using Python 3.10, 3.11, and 3.12.</p> <p>You can install Hatch and <code>hatch-pip-compile</code> with the following command:</p> <pre><code>pip install hatch hatch-pip-compile\n</code></pre> <p>To enter an environment and install Retool's depedencies, run the following command:</p> <pre><code>hatch shell\n</code></pre> <p>When you're done and want to exit the environment, run the following command:</p> <pre><code>exit\n</code></pre>"},{"location":"contribute-code/#run-formatters-and-tests","title":"Run formatters and tests","text":"<p>Before running any tests, install Visual Studio Code, and set its path in <code>tests/integration.py</code>. This is used for comparing diffs if a test fails.</p> <p>To run all formatters and tests, run the following command:</p> <pre><code>hatch run all\n</code></pre>"},{"location":"contribute-code/#formatting-and-syntax","title":"Formatting and syntax","text":"<p>To only run <code>black</code>, <code>isort</code>, and <code>ruff</code> against the code:</p> <pre><code>hatch run style:fix\n</code></pre> <p>To run MyPy against the code:</p> <pre><code>hatch run types:check\n</code></pre>"},{"location":"contribute-code/#integration-tests","title":"Integration tests","text":"<p>Instead of running the complete test suite, you can run individual tests that validate specific Retool functionality.</p> <p>Tests different settings for compilation handling:</p> <pre><code>hatch run integration:compilations\n</code></pre> <p>Tests that Retool outputs the same content five times in a row:</p> <pre><code>hatch run integration:determinism\n</code></pre> <p>Tests that Retool is correctly excluding all user-selected title types:</p> <pre><code>hatch run integration:exclusions\n</code></pre> <p>Tests that Retool is correctly filtering by different language priorities:</p> <pre><code>hatch run integration:languages\n</code></pre> <p>Tests that Retool is correctly filtering by different region priorities:</p> <pre><code>hatch run integration:regions\n</code></pre>"},{"location":"contribute-code/#enable-developer-mode","title":"Enable developer mode","text":"<p>If you create a file named <code>.dev</code> and place it in Retool's folder, the following options are enabled by default:</p> <ul> <li> <p>Output DAT files in legacy parent/clone format. Useful to ensure file relationships   are working as they should.</p> </li> <li> <p>Report clone list warnings during processing. Useful to discover issues with clone   lists. These are silenced in normal operation, as they can get noisy as DAT files   update.</p> </li> <li> <p>Pause on clone list warnings. So you can see what's going on.</p> </li> </ul> <p>You can override this at any time in Retool CLI with the <code>-q</code> flag.</p>"},{"location":"contribute-code/#disable-multiprocessing","title":"Disable multiprocessing","text":"<p>When using <code>input</code> statements in the Python code, make sure to also pass the <code>--singlecpu</code> flag, or turn on Disable multiprocessor usage in Retool GUI. This is because <code>input</code> statements don't play well with multiprocessing and cause crashes.</p>"},{"location":"contribute-metadata-files/","title":"Metadata files","text":"<p>Metadata files are JSON files that contain scraped data from No-Intro's and Redump's websites. They're stored in the <code>metadata</code> folder, and are used to provide extra language information and local title names not included in DAT files.</p> <p>Retool selects the correct metadata file for the loaded DAT file by checking the <code>&lt;name&gt;</code> and <code>&lt;url&gt;</code> tags in the header of the DAT file, and then looking for a matching filename with the release group appended in the <code>metadata</code> folder. For example, for Redump's Sony PlayStation DAT file, the <code>&lt;name&gt;</code> is <code>Sony - PlayStation</code>. Therefore Retool looks for the clone list <code>Sony - PlayStation (Redump).json</code> in the <code>metadata</code> folder.</p> <p>Metadata files are generated, and as a general rule shouldn't be manually edited. To make a change, don't submit a PR. Instead, report the issue upstream:</p>"},{"location":"contribute-metadata-files/#no-intro","title":"No-Intro","text":"<ol> <li> <p>Go to Dat-o-matic.</p> </li> <li> <p>Select the system the title is on.</p> </li> <li> <p>Do a search for the archive name of the title with the issue.</p> </li> <li> <p>Click on the title's name to open its page.</p> </li> <li> <p>Click New ticket, fill out the form, and then submit it.</p> </li> </ol>"},{"location":"contribute-metadata-files/#redump","title":"Redump","text":"<p>Go to Redump's Fixes &amp; additions forum, and request that the issue be fixed.</p>"},{"location":"dat-support/","title":"DAT file support","text":"<p>While Retool understands both LogiqX and CLRMAMEPro-formatted DAT files, it only has support for DAT files released by certain groups based on their naming conventions.</p>"},{"location":"dat-support/#supported","title":"Supported","text":"<p>DAT files are supported from the following groups.</p>"},{"location":"dat-support/#no-intro","title":"No-Intro","text":"<p>No-Intro DAT files are supported, in both LogiqX(ish) and their newer XSD-validated format.</p> <p>Clone lists exist for the more popular sets, and contributions are always welcome for both maintenance and providing new lists.</p>"},{"location":"dat-support/#redump","title":"Redump","text":"<p>Redump DAT files are supported in both LogiqX(ish) and CLRMAMEPro formats. DAT files derived from Redump that keep the same title names are also supported.</p> <p>Clone lists exist for most sets except IBM PC Compatible, which is too huge and has far too much activity without community contribution to maintain.</p>"},{"location":"dat-support/#unsupported","title":"Unsupported","text":"<p>While anything not in the supported list should be considered unsupported, there are two sets in particular that need to be called out, as from time to time there are requests to add support. It is unlikely Retool will ever support these DAT files.</p>"},{"location":"dat-support/#mame-fbneo-and-other-arcade-sets","title":"MAME, FBNeo, and other arcade sets","text":"<p>There's a reason there isn't a decent 1G1R solution for MAME and FBNeo DAT files \u2014 the data structure doesn't lend itself to that sort of processing. The lack of naming standard in the DAT descriptions also makes it extremely challenging to automate anything, meaning the most likely path for 1G1R is an inflexible, curated, massive, high-effort list that needs frequent updating. This isn't a path Retool is going to take.</p> <p>You can, however, get a filtered MAME DAT file with the following options:</p> <ul> <li> <p>Do a web search for <code>All killer no filler</code>. These are lists and tools that filter MAME's   ROMs to only the top games as defined by their authors.</p> </li> <li> <p>Arcade Manager can handle filtering MAME   sets, including removing bad and non-working ROMs, and comes with built-in lists for the   \"top\" sets and \"all killer no filler\".</p> </li> <li> <p>RomLister and   Lightspeed Game List Generator   haven't been updated for a long time, but there are a lot of options in them to sate your   filtering desires.</p> </li> </ul>"},{"location":"dat-support/#tosec","title":"TOSEC","text":"<p>While TOSEC DAT files are in LogiqX format, support for their naming system hasn't been built into Retool.</p> <p>Support is technically possible, but largely pointless to implement without also supplying clone lists. This isn't a small effort \u2014 with over 3,000 TOSEC DAT files as of 2022, and with TOSEC's tendency to include many, many variants, there'd have to be significant community effort not only to bridge that gap, but to test the clone lists too. At this point in time, the momentum doesn't exist to justify the work.</p>"},{"location":"download/","title":"Download and install","text":"<p>Retool is supported on  Windows 10+,  Ubuntu 20+, and  macOS 10+.</p> <p>How you download and install Retool will depend on your level of comfort with code, and the operating system you use.</p>  Windows binary (GUI only) Git and Python (GUI and CLI) <p>If you're a Windows user and want the easiest path, you can get Retool going in a few easy steps:</p> <ol> <li> <p>Download the Windows binary ZIP file:</p> <p>retool-2.4.2-win-x86-64.zip</p> <p><code>SHA256: 4c5bcdf660378cda981597cf10d1a30a109b1ed4833c57d53127d51865db26d2</code></p> </li> <li> <p>Extract the ZIP file to a folder of your choosing.</p> </li> <li> <p>In that folder, double click <code>retoolgui.exe</code>. A Command Prompt window opens, which     shows the output when Retool is running. Don't close it, as this also closes the     GUI.</p> </li> <li>Click File &gt; Update clone lists to download the latest clone lists and     metadata files.</li> </ol> <p>Note</p> <p>Retool's binary is UPX packed to reduce its size on disk. This means that some over-zealous anti-virus software might pick it up as a false positive. If the SHA256 of the downloaded ZIP matches the checksum on this page, you're likely safe to mark an exception in your anti-virus software.</p> <p>If you're more comfortable with the command line, or are running on a non-Windows platform, then this option is for you.</p> <ol> <li> <p>Download and install Python 3.10 or higher, if you     haven't already.</p> </li> <li> <p>Clone Retool from its repository:</p> <pre><code>git clone https://github.com/unexpectedpanda/retool.git\n</code></pre> </li> <li> <p>Install Retool's dependencies, either with Pip or Hatch:</p> PipHatch <pre><code>pip install alive-progress lxml psutil pyside6 darkdetect strictyaml validators\n</code></pre> <ol> <li> <p>Install Hatch if you haven't already:</p> <pre><code>pip install hatch\n</code></pre> </li> <li> <p>Enter the Hatch virtual environment:</p> <pre><code>hatch shell\n</code></pre> <p>To exit the environment at any time, run the <code>exit</code> command.</p> </li> </ol> <p>Info</p> <p>On systems that have both Python 2 and 3 installed, you might need to run <code>pip3</code> instead of <code>pip</code>.</p> </li> <li> <p>Download the latest clone lists and metadata files:</p> <pre><code>retool.py --update\n</code></pre> <p>Info</p> <p>On some operating systems you might need to prefix Python files with <code>python3</code> or <code>python</code> to run them.</p> </li> <li> <p>You can now run <code>retool.py</code> or <code>retoolgui.py</code>.</p> </li> </ol> <p>Linux issues</p> <p>If you get a libxcb error in Linux when launching <code>retoolgui</code>, this fixed the problem for me in Ubuntu 20.04:</p> <pre><code>sudo apt-get install libxcb-randr0-dev \\\n        libxcb-xtest0-dev libxcb-xinerama0-dev libxcb-shape0-dev libxcb-xkb-dev\n</code></pre>"},{"location":"how-retool-works/","title":"How Retool works","text":"<p>This is a technical piece, and is best suited to developers who want to create similar functionality for their tools. It's correct as of Retool v2.03.0, but isn't yet finished.</p>"},{"location":"how-retool-works/#overview","title":"Overview","text":"<p>Retool has two primary functions:</p> <ol> <li> <p>To filter DAT files based on user criteria, including:</p> <ul> <li> <p>Language preference</p> </li> <li> <p>Region preference</p> </li> <li> <p>Title type (for example, demo, preproduction)</p> </li> <li> <p>User-defined strings</p> </li> </ul> </li> <li> <p>To discover titles that have relationships with each other, and use that to implement     1G1R. It does not make use of existing parent/clone data found     in DAT files.</p> </li> </ol> <p>Retool uses the following data sources to achieve this:</p> <ul> <li> <p>The input DAT file itself. This includes data like the title filename, category, and   statuses (for example, \"missing in action\"). Relevant information is broken down into   consituent parts for Retool to use later, for example, regions, languages, revisions,   and so on.</p> </li> <li> <p>Clone lists. Manually curated files that establish   relationships between titles where automatic detection fails. Also used to break   relationships where Retool gets automatic detection wrong.</p> </li> <li> <p>Metadata files. These contain language and local   name data taken from Redump and No-Intro's databases. Metadata is generally updated   every few months. Redump's site is scraped, whereas No-Intro databases are manually   downloaded to generate the metadata.</p> </li> </ul> <p>Titles are put through a series of stages in a specific order, with many stages acting like filters that remove candidates that don't meet specific criteria.</p> <p>A note about updating clone lists and metadata</p> <p>Clone lists and metadata need to be kept regularly up to date to ensure Retool's effectiveness. When they stop updating, Retool gradually becomes less accurate over time as changes are made to DAT files. Automatic detection picks up a lot, but it's not foolproof, especially as vital information is regularly missing from the DAT files themselves.</p> <p>Users are more likely to notice when Retool gets out of sync with No-Intro than Redump, particularly in the chaotic NES DAT.</p> <p>Redump's naming structure tends to be more standardized than No-Intro, there tends to be more title additions than updates, and its website can be easily scraped for metadata updates. A good cadence for Redump updates might be once every month, two at the most.</p> <p>No-Intro is more of a problem. It's prone to making sweeping naming changes across its database, and isn't particularly great at adhering to its own standards. I suspect a lack of validation in its backend and a lot of free text fields are at fault, along with multiple contributors who don't necessarily agree on how a title should be named or classified.</p> <p>This means that every now and then No-Intro makes a wide-ranging change that breaks things, which can mean updates are required for clone lists, metadata files, the Retool application, or sometimes all three. It also means that the ideal cadence for Retool's No-Intro updates is every few weeks, a pace that's hard to keep for a site that covers so many systems.</p> <p>You can download most system databases directly from No-Intro's Dat-O-Matic site, and these serve as the source for Retool's metadata. However, databases are not available for all systems. The database daily packs are often bugged or out of date, requiring you to download individual databases. The site also has incredibly aggressive anti-flood protection that can block access to resources and slows down the process. This makes keeping No-Intro data up-to-date an incredibly time consuming and frustrating task.</p>"},{"location":"how-retool-works/#stage-1-parsing-the-input-dat-and-sanitizing-the-data","title":"Stage 1: Parsing the input DAT and sanitizing the data","text":"<p>The DAT file is read in by Retool. A title object is created from each <code>&lt;game&gt;</code> or <code>&lt;machine&gt;</code> node, which contains useful, sanitized information about each title. This object is a foundational piece of Retool's comparison process.</p> <p>The data inside a title object is supplemented with data from additional sources, namely manually curated clone lists and metadata scraped from Redump and No-Intro's websites.</p> <p>The data in title objects is mutable, and changed as Retool continues throughout its process.</p>"},{"location":"how-retool-works/#building-the-title-objects","title":"Building the title objects","text":"<p>The following example shows a <code>&lt;game&gt;</code> node from Redump's <code>Sony - PlayStation</code> DAT file, and how Retool interprets it as an object of the <code>DatNode</code> class:</p> Metal Gear Solid (USA) (Disc 1) (Rev 1), from Redump's Sony - PlayStation DAT<pre><code>&lt;game name=\"Metal Gear Solid (USA) (Disc 1) (Rev 1)\"&gt;\n    &lt;category&gt;Games&lt;/category&gt;\n    &lt;description&gt;Metal Gear Solid (USA) (Disc 1) (Rev 1)&lt;/description&gt;\n    &lt;rom name=\"Metal Gear Solid (USA) (Disc 1) (Rev 1).cue\" size=\"105\" crc=\"f2ac185c\" md5=\"91fc49ae51815d04c3bb4384e9fe8bd7\" sha1=\"bb026baeb18f92365172c93494c07381f76bb8cd\"/&gt;\n    &lt;rom name=\"Metal Gear Solid (USA) (Disc 1) (Rev 1).bin\" size=\"705614112\" crc=\"21b5d15d\" md5=\"e31ce17570897c323b7a539a2c616c72\" sha1=\"37498e6598ce4eabf00630b6a9197b20861e55a0\"/&gt;\n&lt;/game&gt;\n</code></pre> The <code>DatNode</code> object Retool builds that represents Metal Gear Solid (USA) (Disc 1) (Rev 1)<pre><code>\u25cb full_name:                  Metal Gear Solid (USA) (Disc 1) (Rev 1) # (1)!\n\u251c numbered_name:              None # (2)!\n\u251c local_name:                 None # (3)!\n\u251c description:                Metal Gear Solid (USA) (Disc 1) (Rev 1) # (4)!\n\u251c region_free_name:           Metal Gear Solid (Disc 1) (Rev 1) # (5)!\n\u251c short_name:                 metal gear solid (disc 1) # (6)!\n\u251c group_name:                 metal gear solid # (7)!\n\u251c group_moved_by_condition:   False # (8)!\n\u251c tags:                       {'(USA)', '(Disc 1)', '(Rev 1)'} # (9)!\n\u251c regions:                    ('USA',) # (10)!\n\u251c primary_region:             USA # (11)!\n\u251c secondary_region:           None # (12)!\n\u251c languages_title_orig_str:   None # (13)!\n\u251c languages_title:            None # (14)!\n\u251c languages_implied:          ('En',) # (15)!\n\u251c languages_online:           ('En',) # (16)!\n\u251c languages:                  ('En',) # (17)!\n\u251c cloneof:                    None # (18)!\n\u251c is_superset:                False # (19)!\n\u251c contains_titles:            None # (20)!\n\u251c clonelist_priority:         1 # (21)!\n\u251c region_priority:            0 # (22)!\n\u251c language_priority:          0 # (23)!\n\u251c exclude_reason:             None # (24)!\n\u251c include_reason:             None # (25)!\n\u251c exclude_include_related:    False # (26)!\n\u251c categories:                 ['Games'] # (27)!\n\u2514 roms \u2510\n       \u251c name: Metal Gear Solid (USA) (Disc 1) (Rev 1).cue | header: None | mia: None | crc: f2ac185c | md5: 91fc49ae51815d04c3bb4384e9fe8bd7 | sha1: bb026baeb18f92365172c93494c07381f76bb8cd | sha256: None | size: 105\n       \u2514 name: Metal Gear Solid (USA) (Disc 1) (Rev 1).bin | header: None | mia: None | crc: 21b5d15d | md5: e31ce17570897c323b7a539a2c616c72 | sha1: 37498e6598ce4eabf00630b6a9197b20861e55a0 | sha256: None | size: 705614112\n</code></pre> <ol> <li>The <code>name</code> attribute from the <code>&lt;game&gt;</code> element as found in the DAT file. If the DAT     is a No-Intro numbered DAT, then the number prefix is removed for clone matching.</li> <li>If the DAT is a No-Intro numbered DAT, the full name as found in the DAT file is     stored here.</li> <li>If a local name is found in the metadata     or clone lists, it's stored here.</li> <li>The content of the <code>&lt;description&gt;</code> tag as found in the DAT file.</li> <li>The region-free name generated for the title.</li> <li>The short name generated for the title.</li> <li>The group name generated for the title.</li> <li>Whether the title has already been moved by clone list to another group. If <code>True</code>,     Retool won't permit it to be moved again.</li> <li>A set of all the tags of the title. This mainly exists so Retool doesn't have to     search through entire filenames when doing string and regex matches, although only     part of the code relies on it for now.</li> <li>A tuple of regions, extracted from the full name. The order is determined as follows:     larger regions first that are likey to turn up in multi-region titles: <code>USA</code>, then     <code>Europe</code>, <code>Japan</code>, <code>Asia</code>. The rest of the order is determined by the remaining     regions in the <code>defaultRegionOrder</code> key found in <code>config/internal-config.json</code>.</li> <li>The entry in the <code>regions</code> key that is the highest match in the user's region order.     Retool uses this for initial title comparisons, bundling them into individual regions     and choosing \"winners\" in each region. These regional winners ultimately get compared     against each other. Retool does this because things like revisions and versions are     usually only relevant within a single region. A <code>(USA) (Rev 2)</code> is not better than a     <code>(Europe) (Rev 1)</code> for instance.</li> <li>The second entry in the <code>regions</code> key. Not used by Retool for any processing. Should     probably be removed to improve performance.          There's no need for a <code>tertiary_region</code> key, as titles with more than two regions are     assigned wider geographical designations by No-Intro and Redump:     <ul> <li><code>World</code>: This variation of the title was released in the USA, Europe, and Japan.     Considerd a \"global\" release. Recently Redump has changed multi-region titles that     listed \"Asia\" to \"World\" as well.</li> <li><code>Europe</code>: This variation of the title was released in multiple European countries,     which you can usually figure out from the languages involved.</li> <li><code>Scandinavia</code>: This variation of the title was released in some combination of     Sweden, Denmark, Norway, or Finland.</li> <li><code>Asia</code>: Bucking the trend, it seems <code>Asia</code> tends to get used more as \"we don't     know where in Asia this came from\". Given the languages involved, the most likely     suspects are Hong Kong, Taiwan, or China.</li> </ul> </li> <li>The original language string from the title full name. For example, a full name of     <code>Ace Combat 3 - Electrosphere (Europe) (En,Fr,De,Es,It)</code> has a     <code>languages_title_orig_str</code> of <code>En,Fr,De,Es,It</code>. It's only used to create the     region-free name for the object, and to figure out if the language string uses the GBA     language formatting of <code>En+En,De</code> for assigning different language sets to different     titles inside a compilation.</li> <li>A tuple of languages as defined in the filename.</li> <li>A tuple of the implied language for the title, as     defined by the region. Only used as a guess at a title's language if it has no     languages in the filename or the metadata. Implied languages are assigned in the     <code>defaultRegionOrder</code> key in <code>config/internal-config.json</code>.</li> <li>A tuple of languages from the scraped Redump and No-Intro databases, stored in     Retool's metadata files.</li> <li>The canonical languages for the title. This is chosen from the following options, in     this order:<ol> <li><code>languages_online</code>, if it exists.</li> <li><code>languages_title</code>, if it exists.</li> <li><code>languages_implied</code>, if it exists.</li> </ol> </li> <li>What title full name the title is a clone of.</li> <li>Whether the title is a superset. This is important for title comparisons.</li> <li>If the title is a compilation, the short names of the titles that the compilation     contains.</li> <li>The priority of the title as set in a clone list. Defaults to <code>1</code>. Lower numbers are     higher priorities.</li> <li>What priority the title is based on its regions, given the user's region preferences.</li> <li>What priority the title is based on its languages, given the user's language     preferences.</li> <li>The reason the title was excluded from the final output. Used as a <code>&lt;comment&gt;</code> when     someone also exports a DAT file of all the titles that have been removed.</li> <li>The reason the title was force included by the user in the final output. Only here for     tracing if someone reports an issue.</li> <li>Whether this title is related to any other titles that have been included or excluded     by a user override. A user specifies if they want titles related to their overrides     included/excluded by wrapping their override strings in <code>&lt;&gt;</code>.</li> <li>The categories for the title, either taken from the DAT file, inferred from the full     name, or overridden by the related clone list.</li> <li>The relevant content of the <code>&lt;rom&gt;</code> nodes for the title.</li> </ol> <p>These <code>DatNode</code> objects are what's primarily used to compare titles against each other, and are updated as Retool operates.</p> <p>Tip</p> <p>You can output a <code>DatNode</code> object to screen that looks like the previous example by adding <code>input(DATNODE_OBJECT_NAME)</code> at appropriate points in the Python code, replacing <code>DATNODE_OBJECT_NAME</code> with the actual object name (often <code>title</code>, <code>title_1</code>, or <code>title_2</code>). This can give you insight as to what a title object looks like as it goes through through Retool's process.</p> <p>Make sure to use the <code>--singlecpu</code> flag when doing this, as <code>input()</code> doesn't play well with multi-processing.</p> <p>Here's how it's built:</p> <ol> <li>Many of the names Retool uses are generated from the full name taken from the DAT     file. To make sure there are no errors here, it's passed through the following checks:<ul> <li>Invalid filename characters are stripped or replaced.</li> <li>Retool has previously checked if a numbered DAT file is in use, by verifying that    all <code>&lt;game&gt;</code> or <code>&lt;machine&gt;</code> <code>name</code> attributes match the regex    <code>^([0-9]|x|z)([0-9]|B)[0-9]{2,2} -</code>. A numbered DAT file is one that prefixes    title full names with a release number, for example:  <pre><code>0001 - F-Zero for Game Boy Advance (Japan)\n</code></pre>    Is the numbered version of:    <pre><code>F-Zero for Game Boy Advance (Japan)\n</code></pre>    If a numbered DAT file is in use, the original full name is stored in    <code>numbered_name</code>, which is only used again when the output DAT file is written. The    <code>full_name</code> gets set to the <code>numbered_name</code> stripped of the first 7 characters,    which is the number prefix. This is so the release numbers don't influence    comparison later on. No-Intro metadata also doesn't include the release number, so    this name is required for metadata lookup.</li> </ul> </li> <li>Language codes are retrieved from the full name and stored in <code>languages_title</code> as a     tuple, and <code>languages_title_orig_str</code> as a string that's found by using a regular     expression. This doesn't just involve searching for individual language codes:     No-Intro Game Boy Advance titles can assign languages to a compilation's constituent     titles in the following format: <code>(En+En,De)</code>, meaning many language combinations need     to be taken into account to capture everything. As such, the languages regular     expression is generated using the following template: <pre><code>'\\(((' + LANGUAGES + ')(,\\s?)?)*\\)'\n</code></pre>     Where <code>LANGUAGES</code> is generated by doing the following:<ul> <li>Creating a list that contains the language values stored in the <code>languages</code> key in     <code>config/internal-config.json</code>.</li> <li>Creating a list that contains all two-language combinations of the previous     languages and formatting them with the <code>+</code> notation (for example, <code>(Af, Sq)</code> becomes     <code>Af+Sq</code> and <code>Sq+Af</code>).</li> <li>Creating a list with the combination <code>En+En+En</code> as an exception. No-Intro only uses     this once, so it's not worth computing triple language combinations.</li> <li>Joining all previous lists together as a string with <code>|</code> as a delimiter.</li> </ul> </li> <li>Regions are retrieved from the full name using the region order found in the     <code>defaultRegionOrder</code> key in <code>config/internal-config.json</code>. The <code>primary_region</code> is     also defined, based on the highest match found in the user's region order.</li> <li>The languages are retrieved from the matching title in the metadata, and stored in     <code>languages_online</code>.</li> <li>The implied language is set based on     <code>primary_region</code>. Implied languages are stored in the <code>defaultRegionOrder</code> key in     <code>config/internal-config.json</code>.</li> <li>The canonical languages for the title are set in <code>languages</code>. The canonical languages     are chosen from one of the following language sets, in priority order:<ol> <li>Languages taken from metadata, if they exist or don't equal <code>nolang</code>.</li> <li>Languages taken from the title full name.</li> <li>The implied language for the title.</li> </ol> </li> <li>If the language code <code>Zh</code> is specified in languages, Retool tries to determine if     it's traditional or simplified Chinese based on region. If China or Singapore are in     <code>regions</code>, the code is changed to <code>Zh-Hans</code>. If Hong Kong or Taiwan are in <code>regions</code>,     the code is changed to <code>Zh-Hant</code>.</li> <li>The short name is created. The most useful reference that Retool uses, the short name     is initially used to automatically find titles that are related to each other. It's     also used in clone lists to make referencing multiple titles easier. See     Short names for more on how this is generated.</li> <li>The region-free name is generated. This is the same as the full name, but with regions     and languages removed. It is most useful in clone lists when you need more precision     than a short name, and when <code>filters</code>     aren't an elegant solution.</li> <li>The group name is created. See Group names for more on     how this is generated.</li> <li>Local names are imported from metadata     files, but only if the title has a maximum of 2 languages. This is because Redump and     No-Intro generally only use a single alternate name field, which can't represent more     than one alternate language. There are exceptions \u2014 No-Intro sometimes includes     local names for multiple languages in different fields in their database, but these     aren't consistent so Retool ignores them. Local names are pre-sanitized before they're     stored in metadata files. After the local name has been retrieved, tags from the full     name are appended.</li> <li>The <code>&lt;description&gt;</code> and <code>&lt;rom&gt;</code> nodes are parsed from inside the <code>&lt;game&gt;</code> or     <code>&lt;machine&gt;</code> node and stored in <code>description</code> and <code>roms</code>.</li> <li>Categories are assigned. First, values from the <code>&lt;category&gt;</code> nodes are parsed from     inside the <code>&lt;game&gt;</code> or <code>&lt;machine&gt;</code> node. Then, other categories are assigned based on     the following criteria:<ul> <li>Redump BIOS DAT files come in CLRMAMEPro format. They have a DAT file category of     <code>Console</code>. As part of the ingestion process, Retool adds the CLRMAMEPro DAT file     category to all of its constituent titles. When a title object is created, all     categories of <code>Console</code> are renamed to <code>BIOS</code>.</li> <li>The <code>Applications</code> category is added to titles whose full name matches the regex     pattern <code>\\((?:Test )?Program\\)|(Check|Sample) Program</code>.</li> <li>The <code>BIOS</code> category is added to titles whose full name matches the     case-insensitive regex pattern <code>\\[BIOS\\]|\\(Enhancement Chip\\)</code>.</li> <li>The <code>Demos</code> category is added to titles whose full name matches any of the     following case-insensitive regex patterns:<ul> <li><code>\\((?:\\w[-.]?\\s*)*Demo(?:,?\\s[\\w0-9\\.]*)*\\)</code></li> <li><code>Taikenban</code></li> <li><code>\\(@barai\\)</code></li> <li><code>\\(GameCube Preview\\)</code></li> <li><code>\\(Preview\\)</code></li> <li><code>\\(Sample(?:\\s[0-9]*|\\s\\d{4}-\\d{2}-\\d{2})?\\)</code></li> <li><code>Trial (Disc|Edition|Version|ver\\.)</code></li> <li><code>\\((?:Full )?Trial\\)</code></li> <li><code>\\((?:\\w-?\\s*)*?Kiosk,?(?:\\s\\w*?)*\\)|Kiosk Demo Disc|(PSP System|PS2) Kiosk</code></li> </ul> </li> <li>The <code>Multimedia</code> category is added to titles whose full namematches the     case-insensitive regex pattern <code>\\(Magazine\\)</code>.</li> <li>The <code>Preproduction</code> category is added to titles whose full name matches any     of the following case-insensitive regex patterns:<ul> <li><code>\\((?:\\w*?\\s)*Alpha(?:\\s\\d+)?\\)</code></li> <li><code>\\((?:\\w*?\\s)*Beta(?:\\s\\d+)?\\)</code></li> <li><code>\\((?:\\w*?\\s)*Proto(?:type)?(?:\\s\\d+)?\\)</code></li> <li><code>\\((?:Pre-production|Prerelease)\\)</code></li> <li><code>\\(DEV|DEBUG\\)</code></li> </ul> </li> <li>The <code>Video</code> category is added to titles whose full name matches any of the     following case-insensitive regex patterns:<ul> <li><code>Game Boy Advance Video</code></li> <li><code>- (Preview|Movie) Trailer</code></li> <li><code>\\((?:\\w*\\s)*Trailer(?:s|\\sDisc)?(?:\\s\\w*)*\\)</code></li> </ul> </li> </ul> </li> <li>If a title has a category of <code>Demo</code>, but it doesn't have a <code>(Demo)</code> or similar tag in     the full name, Retool adds the <code>(demo)</code> tag to both <code>short_name</code> and <code>region_free</code>     name, so demos don't get mixed up with retail titles. The demo tags Retool looks for     are the same as the ones it uses for auto-assigning the <code>Demos</code> category.</li> <li>The title's <code>region_priority</code> is a 0-index number based on the user's region order and     what's stored in <code>primary_region</code>. Lower is better. For example, if a user sets USA     followed by Europe as their region order, and the title's primary region is <code>USA</code>, its     <code>region_priority</code> is set to <code>0</code>. If the title's primary region is <code>Europe</code>, it's set     to <code>1</code>.</li> <li>The title's <code>language_priority</code> is a 0-index number based on the user's language order     and what's stored in <code>languages</code>. Lower is better. If the title supports multiple     languages, the highest priority language is used for this number. If the user hasn't     provided a language order, an order is inferred using implied languages based on their     region order. For example, if a user sets English followed by Japanese as their     language order, and the title's top language is English, its <code>language_priority</code> is     set to <code>0</code>. If the title's top language is Japanese, it's set to <code>1</code>.</li> </ol>"},{"location":"how-retool-works/#assigning-title-objects-to-groups","title":"Assigning title objects to groups","text":"<p>An empty dictionary (<code>processed_titles</code>) is created, and all title objects are iterated over. Each time a new <code>group_name</code> is discovered in a title object, it is added to the dictionary as a key, with that title object added to the key's value as a set. If Retool finds another title object with the same <code>group_name</code>, it is added to the existing set found at that key in the dictionary. This groups alike titles together so they can be compared later.</p> <p>The <code>processed_titles</code> dictionary is what Retool operates on during its comparison process. The dictionary's final state is what's written to the output DAT file.</p> <p>A copy of this dictionary is made after it is initially created as an original version that is never modified, in case a user tries to force include titles and Retool needs to quickly retrieve those details.</p> <p>To be continued...</p>"},{"location":"how-to-use-retool-cli/","title":"How to use Retool CLI","text":"<p>What follows is a step-by-step walkthrough of using Retool CLI and all of its features. If you're new to DAT file management, it might be beneficial to spend some time reading about terminology, and after you've filtered a DAT file with Retool, check out the help documentation for your favorite ROM manager to learn how to use it.</p> <p>Info</p> <p>Depending on your operating system, all Python commands in this guide might need to be prefixed with <code>python</code> or <code>python3</code> to work.</p>"},{"location":"how-to-use-retool-cli/#get-started","title":"Get started","text":"<p>The following sections cover the initial setup for Retool.</p>"},{"location":"how-to-use-retool-cli/#download-dat-files-and-retool","title":"Download DAT files and Retool","text":"<p>Before you can filter DAT files, they need to be on your hard drive.</p> <ol> <li> <p>Download the DAT files for the system you want to verify. Retool supports DAT files     from the following groups:</p> <ul> <li> <p>No-Intro</p> </li> <li> <p>Redump</p> </li> </ul> <p>You might need to extract a ZIP file containing the DAT files to access them.</p> </li> <li> <p>Download Retool, and follow the installation and update instructions for     your platform.</p> </li> </ol>"},{"location":"how-to-use-retool-cli/#basic-usage","title":"Basic usage","text":"<p>In your terminal/Command Prompt, change the folder to where Retool is installed, and then run the following command:</p> <pre><code>retool.py -h\n</code></pre> <p>This shows all the options available to you.</p> <p>To process a DAT file without any options, enter the following command:</p> <pre><code>retool PATH_TO_DAT_FILE</code></pre>"},{"location":"how-to-use-retool-cli/#the-user-configyaml-file","title":"The user-config.yaml file","text":"<p>This file is user-editable, and contains the following configuration options for Retool. By default it is found in the <code>config</code> folder. See an example of a <code>user-config.yaml</code> file.</p>"},{"location":"how-to-use-retool-cli/#language-order","title":"Language order","text":"<p>Optional. This is defined by the <code>language order</code> array. If you leave all languages commented out (preceded by a <code>#</code>), then Retool includes all languages during processing, and uses an implied language order derived from your region order.</p> <p>Order is important. For example, if you have the following title names in an input DAT file:</p> <pre><code>This is a title (Europe) (En,Fr,De)\nThis is a title (Europe) (En,Fr,De,Es,It)\nThis is a title (Europe) (Es)\nThis is a title (Europe) (Fr,De,Es,It)\n</code></pre> <p>And the following language order:</p> <ol> <li> <p>English</p> </li> <li> <p>Spanish</p> </li> <li> <p>Italian</p> </li> </ol> <p>Then the following title is selected as the 1G1R title:</p> <pre><code>This is a title (Europe) (En,Fr,De,Es,It)\n</code></pre> <p>And these titles are removed from consideration:</p> <pre><code>This is a title (Europe) (Es)\nThis is a title (Europe) (Fr,De,Es,It)\nThis is a title (Europe) (En,Fr,De)\n</code></pre> <p>This is because <code>This is a title (Europe) (En,Fr,De,Es,It)</code> supports all three languages.</p> <p>The array doesn't just define an order \u2014 languages are also treated like filters. This means if you only add <code>English</code> as a language, for example, then only titles that support English or have unknown languages are included by Retool in the final result.</p> <p>The <code>language order</code> array is only used by Retool if you pass the <code>-l</code> command line option, otherwise it assumes you want all languages.</p>"},{"location":"how-to-use-retool-cli/#region-order","title":"Region order","text":"<p>This is defined by the <code>region order</code> array. At least one region must be uncommented.</p>"},{"location":"how-to-use-retool-cli/#localization-order","title":"Localization order","text":"<p>Optional. This is defined by the <code>localization order</code> array. The No-Intro and Redump standard is to romanize title names from languages that don't use a Latin-based alphabet. They also restrict filenames to the 7-bit ASCII character set, which removes vital pronunciation cues from even latin-derived alphabets.</p> <p>While this is useful as a standard for those who primarily speak English or are managing a collection, it's not great for those looking to operate in their own language, or for people who are multilingual.</p> <p>Retool can use local names for titles if they are available in metadata files or clone lists. For example, the Japanese <code>\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9\u2161 \u300e\u53e4\u306e\u5c01\u5370\u300f</code> instead of the romanized <code>Shining Force II - Inishie no Fuuin</code>.</p> <p>Language order is important, as some titles are multi-region and have multiple local names. If English is your preferred language, make sure to put it at the top of the order.</p> <p>The <code>localization order</code> array is only used by Retool if you pass the <code>-n</code> command line option.</p>"},{"location":"how-to-use-retool-cli/#video-order","title":"Video order","text":"<p>This is defined by the <code>video order</code> array. Video standards are processed after regions, languages, and many other criteria like versions and supersets. Additionally, a video standard is only determined by an explicit tag in a title's name, for example <code>This is a title (World) (NTSC)</code>. As such, the video order is effectively only used as a tie-breaker when choosing between two titles that both specify a video standard in their names. Don't expect to get NTSC titles if you prioritize NTSC as a video standard, but put Europe first in your region order.</p>"},{"location":"how-to-use-retool-cli/#list-prefix-and-suffix","title":"List prefix and suffix","text":"<p>Optional. Defined by the <code>list prefix</code> and <code>list suffix</code> arrays. Only one entry is permitted per array. If you are using the <code>--listnames</code> option, this defines the prefix and suffix to add to each line. If a prefix starts with <code>http://</code>, <code>https://</code>, or <code>ftp://</code>, then each line in the output file is URL encoded.</p>"},{"location":"how-to-use-retool-cli/#global-exclude-and-include-overrides","title":"Global exclude and include overrides","text":"<p>Optional. Defined by the <code>exclude</code> and <code>include</code> arrays.</p> <p>You can override the default choices Retool makes by force including or excluding titles whose names match a certain string. Each string must be on its own line.</p> <p>An excluded title forces Retool to act as if the title was never in the input DAT file in the first place. This means that an exclude can force Retool to select a different title when choosing 1G1R titles.</p> <p>An included title makes it into the output DAT file regardless of Retool's choices. Even if Retool has removed a title as part of the filtering process, a matching include brings it back. Only a post filter can remove an included title.</p> <p>There are rules when it comes to overrides, and how they interact at the global settings and system settings level:</p> <ul> <li>System includes override all excludes.</li> <li>System excludes override global includes.</li> <li>Global includes override global excludes.</li> </ul> <p>To read about the different ways you can match titles, see Override and post filter match types.</p> <p>Note</p> <p>If Retool has genuinely missed a relationship between titles, please don't just create an override \u2014 create an issue too so the clone lists or Retool can be updated.</p>"},{"location":"how-to-use-retool-cli/#post-filters","title":"Post filters","text":"<p>Optional. Defined by the <code>filters</code> array.</p> <p>After Retool has finished processing, you can filter the results to only include titles that match the text you provide. Each match must be on its own line.</p> <p>To read about the different ways you can match titles, see Override and post filter match types.</p>"},{"location":"how-to-use-retool-cli/#override-and-post-filter-match-types","title":"Override and post filter match types","text":"<p>There are three different match types for overrides and post filters:</p> <ul> <li>Plain text indicates a partial string match.</li> <li>A prefix of <code>/</code> indicates a regular expression match.</li> <li>A prefix of <code>|</code> indicates a full string match.</li> </ul> <p>Additionally, you can wrap any of these strings in <code>&lt;&gt;</code> when using overrides to also include or exclude any match's related clones. Wrapping strings in <code>&lt;&gt;</code> is not supported for post filters.</p> <p>Warning</p> <p>If you need to use a backslash (<code>\\</code>) or double quote (<code>\"</code>) in your overrides, you must escape them with a backslash. For example:</p> <ul> <li><code>\\\\</code></li> <li><code>\\\"</code></li> </ul>"},{"location":"how-to-use-retool-cli/#partial-matches","title":"Partial matches","text":"<p>If a line isn't prefixed with <code>|</code> (full match) or <code>/</code> (regular expression) in an Exclude or Include, then it's interpreted as a partial match. A partial match looks for the specified text inside all title names.</p> <p>For example, if an input DAT file contains the following title names:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And your <code>user-config.yaml</code> has the following excludes:</p> <pre><code>exclude:\n- \"Hot\"\n- \"Cold\"\n</code></pre> <p>Every title in the example list is excluded from the output DAT file. This is because <code>Cold</code> matches <code>It's Pretty Cold (Japan)</code>, and <code>Hot</code> matches every other title, as it's found in both the word <code>Hot</code> and <code>Hotel</code>.</p> <p>Now let's add an include:</p> <pre><code>exclude:\n- \"Hot\"\n- \"Cold\"\n\ninclude:\n- \"Ho\"\n</code></pre> <p>The behavior changes again:</p> <ul> <li>The include for <code>Ho</code> overrides the exclude for <code>Hot</code>.</li> <li>The include for <code>Ho</code> prevents Retool from assigning   <code>Do You Think it's Hot (USA) (Alt)</code> to <code>Do You Think it's Hot (USA)</code> as a clone,   meaning both titles end up in the output DAT file.</li> </ul> <p>As you can see, you need to be careful when using partial matches.</p>"},{"location":"how-to-use-retool-cli/#regular-expressions","title":"Regular expressions","text":"<p>If you're familiar with regular expressions, also known as \"regexes\", you know the power (and pain) that they can bring. To define an include or exclude as a regex, prefix it with a forward slash (<code>/</code>).</p> <p>Tip</p> <p>If you don't know regex, you can learn the basics at regexlearn.com. You want to be well practiced before using them, as without proper care they can lead to unintended consequences.</p> <p>For example, if an input DAT file contains the following title names:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And your <code>user-config.yaml</code> has the following exclude:</p> <pre><code>exclude:\n- \"/^I\n</code></pre> <p>All titles beginning with <code>I</code> are excluded from the output DAT file.</p> <p>Now let's add an include:</p> <pre><code>exclude:\n- \"/^I\n\ninclude:\n- \"/\\(USA\\)\"\n</code></pre> <p>Here all USA titles are kept, even if they start with <code>I</code>, because includes override excludes. In the example list the <code>(Alt)</code> title is usually removed by Retool as a clone of the original, but the include filter of <code>/\\(USA\\)</code> makes sure it's kept.</p>"},{"location":"how-to-use-retool-cli/#full-matches","title":"Full matches","text":"<p>Full matches only apply to titles with the exact same name. To define an include or exclude as a full match, prefix it with a pipe (<code>|</code>).</p> <p>For example, if an input DAT file contains the following titles:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And your <code>user-config.yaml</code> has the following exclude:</p> <pre><code>exclude:\n- \"|Do You Think it's Hot (USA)\"\n</code></pre> <p>Then that title is excluded from the output DAT file.</p> <p>If you remove the exclude, and then put the following include in:</p> <pre><code>include:\n- \"|Do You Think it's Hot (USA) (Alt)\"\n</code></pre> <p>Then that title is kept in the output DAT file, and the final titles chosen are:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>In the example list the <code>(Alt)</code> title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept.</p>"},{"location":"how-to-use-retool-cli/#gui-settings","title":"GUI settings","text":"<p>Don't edit these. They are used by the GUI and ignored during CLI operation.</p>"},{"location":"how-to-use-retool-cli/#system-settings-config-files","title":"System settings config files","text":"<p>Settings are available at two levels in Retool: global and system.</p> <ul> <li> <p>Global settings are applied to every DAT file Retool processes, so long as system   settings don't override them. These are stored in <code>config/user-config.yaml</code>.</p> </li> <li> <p>System settings are applied to a specific system named in a DAT file. For example,   you can have settings for just the Sony - PlayStation DAT file from Redump.   System settings are mostly the same as global settings, although their config files are   slightly different. They are stored in the <code>config/systems</code> folder, and are YAML files   named after their system and release group.   See an example of a system settings config file.</p> </li> </ul> <p>While it's possible to construct a system settings file by hand, it's more convenient to set the options in Retool's GUI and let it generate one for you. After the system config file exists, Retool CLI references it every time it processes that system.</p>"},{"location":"how-to-use-retool-cli/#command-line-options","title":"Command line options","text":"<p>In addition to the settings found in <code>user-config.yaml</code>, you can pass other settings via command line options.</p>"},{"location":"how-to-use-retool-cli/#options","title":"Options","text":"<p>These options change how Retool handles certain titles.</p> <ul> <li> <p><code>-c</code> Prefer titles with RetroAchievements The data source uses hashes from CHD/RVZ files for disc-based images, so for this   feature to work on Redump DAT files you need to use CHD/RVZ versions, like those found   at MAME Redump.</p> </li> <li> <p><code>-d</code> Disable 1G1R filtering Ignore clone lists, and treat each title as unique. Useful if you want to keep   everything from a specific set of regions and/or languages. You can use this in   combination with <code>--regionsplit</code> to treat Retool as a region splitter   and nothing more.    This option isn't compatible with <code>--legacy</code>.</p> </li> <li> <p><code>-l</code> Filter by languages using a list If a title doesn't support any of the languages on the list, it's removed (see   <code>config/user-config.yaml</code>).</p> </li> <li> <p><code>-n</code> Use local names for titles if available For example, <code>\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9\u2161 \u300e\u53e4\u306e\u5c01\u5370\u300f</code> instead of   <code>Shining Force II - Inishie no Fuuin</code> (see <code>config/user-config.yaml</code>).</p> </li> <li> <p><code>-o</code> * Prefer oldest production versions instead of newest Useful for speedrunners and those concerned about censorship, who often want   unpatched versions of games.</p> </li> <li> <p><code>-r</code> Prefer regions over languages By default, if a title from a higher priority region doesn't support your preferred   languages but a lower priority region does, Retool selects the latter. This option   disables this behavior, forcing strict adherence to region priority regardless of   language support.    This option also overrides similar behavior in superset selection, which means you   might get a title that was released in your preferred region that has less content,   instead of one that was released in another region that contains more content and   supports your preferred languages.</p> </li> <li> <p><code>-y</code> Prefer licensed versions over unlicensed, aftermarket, or homebrew titles Sometimes games are rereleased long after the lifespan of a console, in regions they   weren't originally available in. By default Retool selects these titles if they match   your preferred region/language priorities.    Enable this option to choose a production version of a title over the   unlicensed/aftermarket/homebrew title if possible. This might select titles from a lower   priority region, or with lower priority languages, or with less features.</p> </li> <li> <p><code>-z</code> Prefer titles ripped from modern rereleases over original system releases For the sake of emulator compatibility, Retool prefers versions of games released   on the original system instead of those ripped from rereleases on platforms like   Virtual Console and Steam. This option reverses that behavior.</p> </li> <li> <p><code>--compilations</code> How compilations should be handled By default, Retool chooses individual titles most of the time. It only chooses   compilations when they have a higher region, language, or clone list priority, or   contain unique titles. When choosing a compilation for unique titles, if other titles in   the compilation have individual equivalents, the individual titles are also included,   leading to some title duplication.    To change this behavior, use this flag and add one of the following single letters   afterwards to select a mode:   </p> <ul> <li><code>i</code> Always prefer individual titles Choose individual titles regardless of region, language, and clone list   priorities, and discard compilations unless they contain unique games. You're likely   to prefer this mode if you use ROM hacks or Retro Achievements. When choosing a   compilation for unique titles, if other titles in the compilation have individual   equivalents, the individual titles are also included, leading to some title   duplication.</li> <li><code>k</code> Keep individual titles and compilations Ignores the relationship between individual titles and compilations, meaning   individual titles are only compared against other individual titles, and compilations   against other compilations. This option has the most title duplication.</li> <li><code>o</code> Optimize for the least possible title duplication (Beta) Not recommended. While this mode can save disk space, it can be hard to tell what   compilations contain based on their filename. This mode might not choose the optimal   solution when supersets or clone list priorities are involved.</li> </ul> </li> <li> <p><code>--nooverrides</code> Disable global and system overrides Ignore both global and system overrides.</p> </li> </ul>"},{"location":"how-to-use-retool-cli/#exclusions","title":"Exclusions","text":"<p>Retool can exclude specific types of titles from the output DAT file. These exclusions are either based on the <code>&lt;category&gt;</code> tag found in DAT files, or on a string in the title's name.</p> <p>To add exclusions, use the <code>--exclude</code> option followed by the single letter filters that indicate each title type. For example, <code>--exclude aAbcdD</code>.</p> <p>The available exclusions are as follows:</p> <ul> <li> <p><code>a</code> Applications Titles with the DAT file category <code>Applications</code>, or with the following text in the name:</p> <ul> <li><code>(Program)</code></li> <li><code>(Test Program)</code></li> <li><code>Check Program</code></li> <li><code>Sample Program</code></li> </ul> </li> <li> <p><code>A</code> Audio Titles with the DAT file category <code>Audio</code>. These might be used as soundtracks by games.</p> </li> <li> <p><code>b</code> Bad dumps Titles marked as bad dumps with a <code>[b]</code> in the name.</p> </li> <li> <p><code>B</code> BIOS and other chips Titles with the DAT file category <code>Console</code>, or with the following text in the name:</p> <ul> <li><code>[BIOS]</code></li> <li><code>(Enhancement Chip)</code></li> </ul> </li> <li> <p><code>c</code> Coverdiscs Titles with the DAT file category <code>Coverdiscs</code>. These were discs that were attached to   the front of magazines, and could contain demos, or rarely, full games.</p> </li> <li> <p><code>d</code> Demos, kiosks, and samples Titles with the DAT file category <code>Demos</code>, or with the following text in the name:</p> <ul> <li><code>@barai</code></li> <li><code>(Demo [1-9])</code></li> <li><code>(Demo-CD)</code></li> <li><code>(GameCube Preview)</code></li> <li><code>(Kiosk *|* Kiosk)</code></li> <li><code>(Preview)</code></li> <li><code>Kiosk Demo Disc</code></li> <li><code>PS2 Kiosk</code></li> <li><code>PSP System Kiosk</code></li> <li><code>Sample</code></li> <li><code>Taikenban</code></li> <li><code>Trial Edition</code></li> </ul> </li> <li> <p><code>D</code> Add-ons Titles with the DAT file category <code>Add-Ons</code>. This includes expansion packs and additional   materials for titles.</p> </li> <li> <p><code>e</code> Educational Titles with the DAT file category <code>Educational</code>.</p> </li> <li> <p><code>g</code> Games Titles with the DAT file category <code>Games</code>, or no DAT file category.</p> </li> <li> <p><code>k</code> MIA Titles with ROMs declared as missing in action in the clone lists or DAT files.</p> </li> <li> <p><code>m</code> Manuals Titles with <code>(Manual)</code> in the name.</p> </li> <li> <p><code>M</code> Multimedia Titles with the DAT file category <code>Multimedia</code>. These might include games.</p> </li> <li> <p><code>o</code> Bonus discs Titles with the DAT file category <code>Bonus Discs</code>. These could be anything other than   the main title content, like patches, manuals, collector discs, or otherwise.</p> </li> <li> <p><code>p</code> Pirate Titles with <code>(Pirate)</code> in the name.</p> </li> <li> <p><code>P</code> Preproduction Titles with the DAT file category <code>Preproduction</code>, or with the following text in the   name:</p> <ul> <li><code>(Alpha [0-99])</code></li> <li><code>(Beta [0-99])</code></li> <li><code>(Pre-Production)</code></li> <li><code>(Possible Proto)</code></li> <li><code>(Proto [0-99])</code></li> <li><code>(Review Code)</code></li> </ul> </li> <li> <p><code>r</code> Promotional Titles with the DAT file category <code>Promotional</code>, or with the following text in the   name:</p> <ul> <li><code>(Promo)</code></li> <li><code>EPK</code></li> <li><code>Press Kit</code></li> </ul> </li> <li> <p><code>u</code> Unlicensed Titles unauthorized by console manufacturers, marked by the following text in the   name:</p> <ul> <li><code>(Unl)</code></li> <li><code>(Aftermarket)</code></li> <li><code>(Pirate)</code></li> </ul> </li> <li> <p><code>v</code> Video Titles with the DAT file category <code>Video</code>.</p> </li> </ul>"},{"location":"how-to-use-retool-cli/#outputs","title":"Outputs","text":"<ul> <li> <p><code>--labelmia</code> Mark files as MIA with an mia=\"yes\" attribute Don't use this if you're a DATVault subscriber.</p> </li> <li> <p><code>--labelretro</code> Mark titles with a retroachievements=\"yes\" attribute The data source uses hashes from CHD/RVZ files for disc-based images, so for this   feature to work on Redump DAT files you need to use CHD/RVZ versions, like those found   at MAME Redump.</p> </li> <li> <p><code>--listnames</code> Also output a TXT file of just the kept title names See <code>config/user-config.yaml</code> to add a prefix and/or   suffix to each line.</p> </li> <li> <p><code>--machine</code> Export each title node to the output DAT file using the MAME standard of <code>&lt;machine&gt;</code> instead of <code>&lt;game&gt;</code></p> </li> <li> <p><code>--originalheader</code> Use the original input DAT file headers in output DAT files Useful if you want to load Retool DAT files as an update to original Redump and No-Intro   DAT files already in CLRMAMEPro.</p> </li> <li> <p><code>--output &lt;folder&gt;</code> Set an output folder where the new 1G1R DAT file/s will be created</p> </li> <li> <p><code>--regionsplit</code> Split the result into multiple DAT files based on region Use with <code>-d</code> to only split by region with no 1G1R processing. Not compatible with   <code>--legacy</code>.</p> </li> <li> <p><code>--removesdat</code> Also output DAT files containing titles that were removed from 1G1R DAT files</p> </li> <li> <p><code>--replace</code> Replace input DAT files with Retool versions Only use this if you can recover the original DAT files from elsewhere. Useful for   RomVault or DatVault users operating directly on their DatRoot files. Not compatible   with <code>--output</code>.</p> </li> <li> <p><code>--report</code> Also output a report of the titles that have been kept, removed, and set as clones</p> </li> <li> <p><code>--reprocess</code> Let DAT files be processed even if Retool has already processed them</p> </li> </ul>"},{"location":"how-to-use-retool-cli/#debug","title":"Debug","text":"<ul> <li> <p><code>--config &lt;file&gt;</code> Set a custom user config file to use instead of the default Useful for testing.</p> </li> <li> <p><code>--clonelist &lt;file&gt;</code> Set a custom clone list to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT file   and the clone list isn't automatically detected anymore. Often used together with   <code>--metadata</code>, <code>--mia</code>, and <code>--ra</code>.</p> </li> <li> <p><code>--legacy</code> Output DAT files in legacy parent/clone format   Not recommended unless you're debugging or comparing outputs between DAT file versions.   Not compatible with <code>-d</code>.</p> </li> <li> <p><code>--metadata &lt;file&gt;</code> Set a custom metadata file to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT   file and the metadata file isn't automatically detected anymore. Often used together   with <code>--clonelist</code>, <code>--mia</code>, and <code>--ra</code>.</p> </li> <li> <p><code>--mia &lt;file&gt;</code> Set a custom MIA file to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT, and   the MIA file isn't automatically detected anymore. Often used together with   <code>--clonelist</code>, <code>--metadata</code>, and <code>--ra</code>.</p> </li> <li> <p><code>--ra &lt;file&gt;</code> Set a custom RetroAchievements file to use instead of the default Useful if you want to use your own, or if Redump or No-Intro renames their DAT, and   the RetroAchievements file isn't automatically detected anymore. Often used together   with <code>--clonelist</code>, <code>--metadata</code>, and <code>--mia</code>.</p> </li> <li> <p><code>--singlecpu</code> Disable multiprocessor usage   br&gt;Forces Retool to use only a single CPU core, at the cost of performance. This can   be useful when debugging Retool, as multiprocessor doesn't cope well with <code>input</code>   statements.</p> </li> <li> <p><code>--trace  [ ...]</code> Trace a title through the Retool process for debugging Follows a title through Retool's selection process for debugging. Accepts a regular   expression. To function properly, this disables using multiple processors during parent   selection.    Usage:    <pre><code>--trace \"regex of titles to trace\"\n</code></pre></p> </li> <li> <p><code>--warnings</code> Report clone list warnings during processing</p> </li> <li> <p><code>--warningpause</code> Pause when a clone list warning is found Useful when batch processing DAT files.</p> </li> </ul> <p>Tip</p> <p>If you don't know regular expressions, also known as \"regexes\", you can learn the basics at regexlearn.com. You want to be well practiced before using them, as without proper care they can lead to unintended consequences.</p>"},{"location":"how-to-use-retool-gui-exclusions/","title":"Exclusions","text":"<p>Retool can exclude specific types of titles from the output DAT file. These exclusions are either based on the <code>&lt;category&gt;</code> tag found in DAT files, or on a string in the title's name.</p> <p>To add exclusions, in the Global settings or System settings tab, click the Exclusions tab.</p> <p></p> <p>Note</p> <p>Clearing an exclusion checkbox doesn't mean that the type is included, just that it's not excluded. For example, if you don't select Games, this doesn't mean that all games get included in the output DAT file \u2014 some might still be removed due to other processes in Retool, like 1G1R filtering.</p> <p>The available exclusions are as follows:</p> <ul> <li> <p>Add-ons Titles with the DAT file category <code>Add-Ons</code>. This includes expansion packs and   additional materials for titles.</p> </li> <li> <p>Applications Titles with the DAT file category <code>Applications</code>, or with the following text in the   name:</p> <ul> <li><code>(Program)</code></li> <li><code>(Test Program)</code></li> <li><code>Check Program</code></li> <li><code>Sample Program</code></li> </ul> </li> <li> <p>Audio Titles with the DAT file category <code>Audio</code>. These might be used as soundtracks by   games.</p> </li> <li> <p>Bad dumps Titles marked as bad dumps with a <code>[b]</code> in the name.</p> </li> <li> <p>BIOS and other chips Titles with the DAT file category <code>Console</code>, or with the following text in the name:</p> <ul> <li><code>[BIOS]</code></li> <li><code>(Enhancement Chip)</code></li> </ul> </li> <li> <p>Bonus discs Titles with the DAT file category <code>Bonus Discs</code>. These could be anything other than   the main title content, like patches, manuals, collector discs, or otherwise.</p> </li> <li> <p>Coverdiscs Titles with the DAT file category <code>Coverdiscs</code>. These were discs that were attached   to the front of magazines, and could contain demos, or rarely, full games.</p> </li> <li> <p>Demos, kiosks, and samples Titles with the DAT file category <code>Demos</code>, or with the following text in the name:</p> <ul> <li><code>@barai</code></li> <li><code>(Demo [1-9])</code></li> <li><code>(Demo-CD)</code></li> <li><code>(GameCube Preview)</code></li> <li><code>(Kiosk *|* Kiosk)</code></li> <li><code>(Preview)</code></li> <li><code>Kiosk Demo Disc</code></li> <li><code>PS2 Kiosk</code></li> <li><code>PSP System Kiosk</code></li> <li><code>Sample</code></li> <li><code>Taikenban</code></li> <li><code>Trial Edition</code></li> </ul> </li> <li> <p>Educational Titles with the DAT file category <code>Educational</code>.</p> </li> <li> <p>Games Titles with the DAT file category <code>Games</code>, or no DAT file category.</p> </li> <li> <p>Manuals Titles with <code>(Manual)</code> in the name.</p> </li> <li> <p>MIA Titles with ROMs declared as missing in action in the clone lists or DAT files.</p> </li> <li> <p>Multimedia Titles with the DAT file category <code>Multimedia</code>. These might include games.</p> </li> <li> <p>Pirate Titles with <code>(Pirate)</code> in the name.</p> </li> <li> <p>Preproduction Titles with the DAT file category <code>Preproduction</code>, or with the following text in the   name:</p> <ul> <li><code>(Alpha [0-99])</code></li> <li><code>(Beta [0-99])</code></li> <li><code>(Pre-Production)</code></li> <li><code>(Possible Proto)</code></li> <li><code>(Proto [0-99])</code></li> <li><code>(Review Code)</code></li> </ul> </li> <li> <p>Promotional Titles with the DAT file category <code>Promotional</code>, or with the following text in the   name:</p> <ul> <li><code>(Promo)</code></li> <li><code>EPK</code></li> <li><code>Press Kit</code></li> </ul> </li> <li> <p>Unlicensed Titles unauthorized by console manufacturers, marked by the following text in the   name:</p> <ul> <li><code>(Unl)</code></li> <li><code>(Aftermarket)</code></li> <li><code>(Pirate)</code></li> </ul> </li> <li> <p>Video Titles with the DAT file category <code>Video</code>.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-local-names/","title":"Local names","text":"<p>Note</p> <p>Local names are a work in progress, and need community help to complete. You can contribute directly by editing clone lists and filing a pull request, or if you're not familiar with code, by filing an issue.</p> <p>The No-Intro and Redump standard is to romanize title names from languages that don't use a Latin-based alphabet. They also restrict filenames to the 7-bit ASCII character set, which removes vital pronunciation cues from even latin-derived alphabets.</p> <p>While this is useful as a standard for those who primarily speak English or are managing a collection, it's not great for those looking to operate in their own language, or for people who are multilingual.</p> <p>Retool can use local names for titles if they are available in metadata files or clone lists. For example, the Japanese <code>\u30b7\u30e3\u30a4\u30cb\u30f3\u30b0\u25cf\u30d5\u30a9\u30fc\u30b9\u2161 \u300e\u53e4\u306e\u5c01\u5370\u300f</code> instead of the romanized <code>Shining Force II - Inishie no Fuuin</code>.</p>"},{"location":"how-to-use-retool-gui-local-names/#change-the-local-names-order","title":"Change the local names order","text":"<p>To view the languages you can use for local names, in the Global settings or System settings tab, click the Local names tab.</p> <p></p> <p>Note</p> <p>Some titles are multi-region, and have multiple local names. If English is your preferred language, make sure to put it at the top of the order.</p> <p>You can move languages from the Available languages box to the Localize in this language order box in the following ways:</p> <ul> <li>Drag and drop with the mouse.</li> <li>Select one or more languages in the Localize in this language order box, and then   click  Remove languages.</li> <li>Click  Remove all languages, which returns all languages to the Available languages   box.</li> </ul> <p>You can change the order of the languages in the Localize in this language order box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more languages in the Localize in this language order box, and then   click  Up or  Down.</p> </li> </ul> <p>Tip</p> <p>A combination of Ctrl (Cmd on macOS), Shift, and clicking allows for multiple language selections.</p>"},{"location":"how-to-use-retool-gui-local-names/#wip","title":"Local names status","text":"<p>Providing local names for titles is a large job and a work in progress. For now, Retool is focusing on completing the priority systems detailed in the following table, in order. Other systems are being handled on an ad-hoc basis.</p> System name Stage Nintendo - Nintendo Entertainment System Adding local names to clone lists Sony - PlayStation Partially cleaned metadata Sony - PlayStation 2 Partially cleaned metadata Nintendo - Super Nintendo Entertainment System Adding local names to clone lists Sega - Megadrive/Genesis Adding local names to clone lists Sega - Master System/Mark III Adding local names to clone lists Nintendo - Nintendo 64 Adding local names to clone lists Nintendo - Game Boy Adding local names to clone lists Nintendo - Game Boy Advance Adding local names to clone lists Nintendo - Nintendo 3DS Adding local names to clone lists Nintendo - Nintendo DS Adding local names to clone lists Nintendo - Wii Partially cleaned metadata Microsoft - Xbox 360 Partially cleaned metadata Sony - PlayStation 3 Partially cleaned metadata Microsoft - Xbox Partially cleaned metadata <p>There are three stages to providing local names:</p> <ol> <li> <p>Cleaning up the original metadata from No-Intro and Redump. This involves removing    incorrect or unsuitable alternate names, and making changes in clone lists where    necessary to compensate for multi-region games with multiple names.    During this stage, you mostly get local names straight from the No-Intro and Redump    databases. These might be incorrect.</p> </li> <li> <p>Adding local names to clone lists. This involves going through non-English region    games and multi-language games in each DAT file, and checking for local names.    During this stage, you'll start getting more correct local names, especially for titles    that have multiple local names.</p> </li> <li> <p>Complete. The first two passes are complete. This doesn't mean the job is done    \u2014 DAT files are always updating, titles are going to be missed, and some might be    incorrect due to not being a contributor's native language. Community contributions are    absolutely welcome to fill the gaps.</p> </li> </ol>"},{"location":"how-to-use-retool-gui-options/","title":"Options","text":"<p>Options change Retool's behavior either at the title level, or the broader DAT file level.</p> <p>To set options, in the Global settings or System settings tab, click the Options tab.</p> <p></p>"},{"location":"how-to-use-retool-gui-options/#title-options","title":"Title options","text":"<p>These options change how Retool handles certain titles.</p> <ul> <li> <p>Disable 1G1R filtering Ignore clone lists, and treat each title as unique. Useful if you want to keep   everything from a specific set of regions and/or languages. You can use this in   combination with Split output into multiple DAT files based on region to treat   Retool as a region splitter and nothing more.    If this option is disabled, it's because you've enabled   Output DAT files in legacy parent/clone format, which isn't compatible with this feature.</p> </li> <li> <p>Prefer regions over languages By default, if a title from a higher priority region doesn't support your preferred   languages but a lower priority region does, Retool selects the latter. This option   disables this behavior, forcing strict adherence to region priority regardless of   language support    This option also overrides similar behavior in superset selection, which means you   might get a title that was released in your preferred region that has less content,   instead of one that was released in another region that contains more content and   supports your preferred languages.</p> </li> <li> <p>Prefer titles ripped from modern rereleases over original system releases For the sake of emulator compatibility, Retool prefers versions of games released   on the original system instead of those ripped from rereleases on platforms like   Virtual Console and Steam. This option reverses that behavior.</p> </li> <li> <p>Prefer oldest production versions instead of newest Useful for speedrunners and those concerned about censorship, who often want   unpatched versions of games.</p> </li> <li> <p>Prefer licensed versions over unlicensed titles Sometimes games are rereleased long after the lifespan of a console, in regions they   weren't originally available in. By default Retool selects these titles if they match   your preferred region/language priorities.    Enable this option to choose a production version of a title over the unlicensed or   aftermarket title if possible. This might select titles from a lower priority region, or   with lower priority languages, or with less features.</p> </li> <li> <p>Disable global and system overrides Ignore both global and system overrides.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-options/#compilations-handling","title":"Compilations handling","text":"<p>This option changes how compilations are managed by Retool.</p> <ul> <li> <p>Default Chooses individual titles most of the time. Only chooses compilations when they have   a higher region, language, or clone list priority, or contain unique titles. When   choosing a compilation for unique titles, if other titles in the compilation have   individual equivalents, the individual titles are also included, leading to some title   duplication.</p> </li> <li> <p>Prefer individual titles Chooses individual titles regardless of region, language, and clone list priorities,   and discards compilations unless they contain unique games. You\\'re likely to prefer   this mode if you use ROM hacks or Retro Achievements. When choosing a compilation for   unique titles, if other titles in the compilation have individual equivalents, the   individual titles are also included, leading to some title duplication.</p> </li> <li> <p>Keep individual titles and compilations Ignores the relationship between individual titles and compilations, meaning   individual titles are only compared against other individual titles, and compilations   against other compilations. This option has the most title duplication.</p> </li> <li> <p>Optimize for least possible title duplication Beta. Not recommended. Prefers compilations to minimize file count. While this   mode can save disk space, it can be hard to tell what compilations contain based on   their filename. This mode might not choose the most optimal solution when supersets or   clone list priorities are involved.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-options/#output-options","title":"Output options","text":"<p>These options change the files that Retool outputs as part of its process.</p> <ul> <li> <p>Allow processing of already processed files Let DAT files be processed even if Retool has already processed them.</p> </li> <li> <p>Don't modify input DAT file's existing header fields By default Retool changes header fields so you can tell in ROM managers if DAT files   have been modified. Enable this if you want to load Retool DAT files as updates to   original Redump and No-Intro DAT files already loaded in your ROM manager.</p> </li> <li> <p>Use <code>&lt;machine&gt;</code> instead of <code>&lt;game&gt;</code> in output DAT files Exports each title node using the MAME standard of <code>&lt;machine&gt;</code> instead of <code>&lt;game&gt;</code>.</p> </li> <li> <p>Split the output into multiple DAT files based on region Instead of one output DAT file containing all the filtered results, split the output   into multiple DAT files based on the regions you've selected. If this is disabled, it's   because you've enabled Output DAT files in legacy parent/clone format, which isn't   compatible with this option.</p> </li> <li> <p>Also output DAT files of all the removed titles In addition to output DAT files, create DAT files containing the titles Retool   removed.</p> </li> <li> <p>Also output reports of what titles have been kept and removed In addition to output DAT files, produce TXT files that list what titles have been   kept, and what titles have been removed.</p> </li> <li> <p>Also output lists of title names from output DAT files In addition to output DAT files, produce TXT files that list only the name of each   title in the output DAT files, and optionally add a prefix and suffix to each name.   If you add a prefix that starts with <code>http://</code>, <code>https://</code> or <code>ftp://</code>, each line in the   file is URL encoded.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-options/#online-features","title":"Online features","text":"<p>These features use data supplied by third parties. When those third parties stop updating, Retool might make choices that are out of date.</p> <ul> <li> <p>Add MIA attributes to DAT files For files that no one has, adds <code>mia=\"yes\"</code> to <code>rom/file</code> tags.</p> </li> <li> <p>Add RetroAchievements attributes to DAT files For titles that support RetroAchievements, adds <code>retroachievements=\"yes\"</code> to   <code>game/machine</code> tags. The data source uses hashes from CHD/RVZ files for disc-based   images, so for this feature to work on Redump DAT files you need to use CHD/RVZ   versions, like those found at MAME Redump.</p> </li> <li> <p>Prefer titles with RetroAchievements Prioritizes titles that support RetroAchievements. The data source uses hashes from   CHD/RVZ files for disc-based images, so for this feature to work on Redump DAT files you   need to use CHD/RVZ versions, like those found at   MAME Redump.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-options/#debug-options","title":"Debug options","text":"<p>These options are useful for developing and testing Retool.</p> <ul> <li> <p>Report clone list warnings during processing Turn on warnings when there are mismatches between the clone list and the DAT file.</p> </li> <li> <p>Pause on clone list warnings Pause Retool each time a clone list warning is issued.</p> </li> <li> <p>Output DAT files in legacy parent/clone format Not recommended unless you're debugging or comparing outputs between DAT file   versions. If this is disabled, it's because you've disabled 1G1R filtering or chosen to   split by region, which isn't compatible with this option.</p> </li> <li> <p>Disable multiprocessor usage Forces Retool to use only a single CPU core, at the cost of performance. This can   be useful when debugging Retool, as multiprocessor doesn't cope well with <code>input</code>   statements.</p> </li> <li> <p>Trace a title through Retool's process Follows a title through Retool's selection process for debugging. Accepts a regular   expression. To function properly, this disables using multiple processors during parent   selection.</p> </li> </ul> <p>Tip</p> <p>If you don't know regular expressions, also known as \"regexes\", you can learn the basics at regexlearn.com. You want to be well practiced before using them, as without proper care they can lead to unintended consequences.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/","title":"Overrides and post filters","text":"<p>There are two ways you can remove or include specific titles in Retool: overrides and post filters.</p> <p>Note</p> <p>If Retool has genuinely missed a relationship between titles, don't just create an override or post filter \u2014 create an issue too so the clone lists or Retool can be updated.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#overrides","title":"Overrides","text":"<p>You can override the default choices Retool makes by force including or excluding titles whose names match against text you provide. Each match must be on its own line.</p> <p>To set overrides, in the Global settings or System settings tab, click the Overrides tab.</p> <p></p> <p>An excluded title forces Retool to act as if the title was never in the input DAT file in the first place. This means that an exclude can force Retool to select a different title when choosing 1G1R titles.</p> <p>An included title makes it into the output DAT file regardless of Retool's choices. Even if Retool has removed a title as part of the filtering process, a matching include brings it back. Only a post filter can remove an included title.</p> <p>There are rules when it comes to overrides, and how they interact at the global settings and system settings level:</p> <ul> <li>System includes override all excludes.</li> <li>System excludes override global includes.</li> <li>Global includes override global excludes.</li> </ul> <p>To read about the different ways you can match titles, see Match types.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#post-filters","title":"Post filters","text":"<p>After Retool has finished processing, you can filter the results to only include titles that match the text you provide. Each match must be on its own line.</p> <p>To set post filters, in the Global settings or System settings tab, click the Post filters tab.</p> <p></p> <p>To read about the different ways you can match titles, see Match types.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#match-types","title":"Match types","text":"<p>There are three different match types for overrides and post filters:</p> <ul> <li>Plain text indicates a partial string match.</li> <li>A prefix of <code>/</code> indicates a regular expression match.</li> <li>A prefix of <code>|</code> indicates a full string match.</li> </ul> <p>Additionally, you can wrap any of these strings in <code>&lt;&gt;</code> when using overrides to also include or exclude any match's related clones. Wrapping strings in <code>&lt;&gt;</code> is not supported for post filters.</p> <p>Regardless of whether you use an override or a post filter, matches are case insensitive.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#partial-matches","title":"Partial matches","text":"<p>If a line isn't prefixed with <code>|</code> (full match) or <code>/</code> (regular expression) in an Exclude or Include box, then it's interpreted as a partial match. A partial match looks for the specified text inside all title names.</p> <p>For example, if an input DAT file contains the following title names:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And you put the following text in the Exclude box:</p> <pre><code>Hot\nCold\n</code></pre> <p>Every title in the example list is excluded from the output DAT file. This is because <code>Cold</code> matches <code>It's Pretty Cold (Japan)</code>, and <code>Hot</code> matches every other title, as it's found in both the word <code>Hot</code> and <code>Hotel</code>.</p> <p>If we also add the following text to the Include box:</p> <pre><code>Ho\n</code></pre> <p>The behavior changes again:</p> <ul> <li>The include for <code>Ho</code> overrides the exclude for <code>Hot</code>.</li> <li>The include for <code>Ho</code> prevents Retool from assigning   <code>Do You Think it's Hot (USA) (Alt)</code> to <code>Do You Think it's Hot (USA)</code> as a clone,   meaning both titles end up in the output DAT file.</li> </ul> <p>As you can see, you need to be careful when using partial matches.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#regular-expressions","title":"Regular expressions","text":"<p>If you're familiar with regular expressions, also known as \"regexes\", you know the power (and pain) that they can bring. To define an include or exclude as a regex, prefix it with a forward slash (<code>/</code>).</p> <p>Tip</p> <p>If you don't know regex, you can learn the basics at regexlearn.com. You want to be well practiced before using them, as without proper care they can lead to unintended consequences.</p> <p>For example, if an input DAT file contains the following title names:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And you put the following text in an Exclude box:</p> <pre><code>/^I\n</code></pre> <p>All titles beginning with <code>I</code> are excluded from the output DAT file.</p> <p>If you also put the following text in an Include box:</p> <pre><code>/\\(USA\\)\n</code></pre> <p>All USA titles are kept, even if they start with <code>I</code>. In the example list the <code>(Alt)</code> title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept.</p>"},{"location":"how-to-use-retool-gui-overrides-post-filters/#full-matches","title":"Full matches","text":"<p>Full matches only apply to titles with the exact same name. To define an include or exclude as a full match, prefix it with a pipe (<code>|</code>).</p> <p>For example, if an input DAT file contains the following titles:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>And you put the following text in an Exclude box:</p> <pre><code>|Do You Think it's Hot (USA)\n</code></pre> <p>Then that title is excluded from the output DAT file.</p> <p>If you remove the exclude, and then put the following text in an Include box:</p> <pre><code>|Do You Think it's Hot (USA) (Alt)\n</code></pre> <p>Then that title is kept in the output DAT file, and the final titles chosen are:</p> <pre><code>Do You Think it's Hot (USA)\nDo You Think it's Hot (USA) (Alt)\nIt's Pretty Cold (Japan)\nI Can't Find My Hotel (Europe)\n</code></pre> <p>In the example list the <code>(Alt)</code> title is usually removed by Retool as a clone of the original, but the include filter makes sure it's kept.</p>"},{"location":"how-to-use-retool-gui-priorities/","title":"Region, language, and video priorities","text":"<p>Retool supports three different types of priorities: regions, languages, and video.</p>"},{"location":"how-to-use-retool-gui-priorities/#regions","title":"Regions","text":"<p>You must have at least one region in the Filter by these regions box for the Process DAT files button to be enabled. Only regions in Filter by these regions box are considered when Retool is processing a DAT file. If a title is from another region, it's removed from the output DAT file.</p> <p>Order in the Filter by these regions box is important. For example, if you place USA above Europe, and the title exists in both regions, during processing Retool chooses the USA title.</p>"},{"location":"how-to-use-retool-gui-priorities/#change-the-region-order","title":"Change the region order","text":"<p>To view the regions, in the Global settings or System settings tab, click the Regions tab.</p> <p></p> <p>You can move regions from the Available regions box to the Filter by these regions box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more regions in the Available regions box, and then click    Add regions.</p> </li> <li> <p>Click    Add remaining regions, which adds the regions in the Available regions box to   the end of the list in the Filter by these regions box.</p> </li> <li> <p>Click Use default order for English speakers to add the recommended region order   if English is your first language. This also attempts to prioritize NTSC regions over   PAL regions.</p> </li> </ul> <p>You can move regions from the Filter by these regions box to the Available regions box in the following ways:</p> <ul> <li>Drag and drop with the mouse.</li> <li>Select one or more regions in the Filter by these regions box, and then click    Remove regions.</li> <li>Click    Remove all regions, which returns all regions to the Available regions box.</li> </ul> <p>You can change the order of the regions in the Filter by these regions box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more regions in the Filter by these regions box, and then click    Up or  Down.</p> </li> </ul> <p>Tip</p> <p>A combination of Ctrl (Cmd on macOS), Shift, and clicking allows for multiple region selections.</p>"},{"location":"how-to-use-retool-gui-priorities/#languages","title":"Languages","text":"<p>If no languages are in the Filter by these languages box, then Retool considers all languages during processing, and infers a language order from your region order.</p> <p>If you add languages to the Filter by these languages box, then only those languages are considered when Retool is processing a DAT file. If a title doesn't support a language in that list, it's removed from the output DAT file unless the language is unknown.</p> <p>Order in the Filter by these languages box is important. For example, if you have the following title names in an input DAT file:</p> <pre><code>This is a title (Europe) (En,Fr,De)\nThis is a title (Europe) (En,Fr,De,Es,It)\nThis is a title (Europe) (Es)\nThis is a title (Europe) (Fr,De,Es,It)\n</code></pre> <p>And the following language order:</p> <ol> <li> <p>English</p> </li> <li> <p>Spanish</p> </li> <li> <p>Italian</p> </li> </ol> <p>Then the following title is selected as the 1G1R title:</p> <pre><code>This is a title (Europe) (En,Fr,De,Es,It)\n</code></pre> <p>And these titles are removed from consideration:</p> <pre><code>This is a title (Europe) (Es)\nThis is a title (Europe) (Fr,De,Es,It)\nThis is a title (Europe) (En,Fr,De)\n</code></pre> <p>This is because <code>This is a title (Europe) (En,Fr,De,Es,It)</code> supports all three languages.</p>"},{"location":"how-to-use-retool-gui-priorities/#change-the-language-order","title":"Change the language order","text":"<p>To view the languages, in the Global settings or Sytem settings tab, click the Languages tab.</p> <p></p> <p>You can move languages from the Available languages box to the Filter by these languages box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more languages in the Available languages box, and then click    Add languages.</p> </li> <li> <p>Click    Add remaining languages, which adds the languages in the Available languages box to   the end of the list in the Filter by these languages box.</p> </li> </ul> <p>You can move languages from the Filter by these languages box to the Available languages box in the following ways:</p> <ul> <li>Drag and drop with the mouse.</li> <li>Select one or more languages in the Filter by these languages box, and then click    Remove languages.</li> <li>Click    Remove all languages, which returns all languages to the Available languages box.</li> </ul> <p>You can change the order of the languages in the Filter by these languages box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more languages in the Filter by these languages box, and then click    Up or  Down.</p> </li> </ul> <p>Tip</p> <p>A combination of Ctrl (Cmd on macOS), Shift, and clicking allows for multiple language selections.</p>"},{"location":"how-to-use-retool-gui-priorities/#video","title":"Video","text":"<p>Video standards are processed after regions, languages, and many other criteria like versions and supersets. Additionally, a video standard is only determined by an explicit tag in a title's name, for example <code>This is a title (World) (NTSC)</code>. As such, the video order is effectively only used as a tie-breaker when choosing between two titles that both specify a video standard in their names. Don't expect to get NTSC titles if you prioritize NTSC as a video standard, but put Europe first in your region order.</p>"},{"location":"how-to-use-retool-gui-priorities/#change-the-video-order","title":"Change the video order","text":"<p>To view the video order, in the Global settings or Sytem settings tab, click the Video tab.</p> <p></p> <p>You can change the order of the video standards in the Video order box in the following ways:</p> <ul> <li> <p>Drag and drop with the mouse.</p> </li> <li> <p>Select one or more video standards in the Video order box, and then click    Up or  Down.</p> </li> </ul> <p>Tip</p> <p>A combination of Ctrl (Cmd on macOS), Shift, and clicking allows for multiple language selections.</p>"},{"location":"how-to-use-retool-gui-settings/","title":"Global and system settings","text":"<p>Settings are available at two levels in Retool: global and system.</p> <ul> <li> <p>Global settings are applied to every DAT file Retool processes, so long as system   settings don't override them.</p> </li> <li> <p>System settings are applied to a specific system named in a DAT file. For example,   you can have settings for just the Sony - PlayStation DAT file from Redump.   System settings mostly mirror what's   available in the global settings, although there are some unique features.</p> </li> </ul>"},{"location":"how-to-use-retool-gui-system-settings/","title":"System settings","text":"<p>To view a DAT file's system settings, click the System settings tab, and then click a DAT file that you've added to your list.</p> <p></p> <p>System settings are applied to a specific system named in a DAT file. For example, you can have settings for just the Sony - PlayStation DAT file from Redump. When you load a different version of that DAT file in Retool, so long as the system name and release group haven't changed, the system settings still apply.</p> <p>On most system settings tabs there is an Override global settings checkbox. When selected, this means that the system settings are used for those settings instead of the global ones whenever that DAT file is processed.</p> <p>System settings mostly mirror what's available in the global settings, although there are some unique features.</p>"},{"location":"how-to-use-retool-gui-system-settings/#paths","title":"Paths","text":"<p>The Paths tab is unique to system settings, and lets you select a custom output folder, clone list, and metadata file for the selected system. If the override checkbox is selected and a path hasn't been chosen for one of these options, then that option uses the default or global setting instead.</p>"},{"location":"how-to-use-retool-gui-system-settings/#system-overrides","title":"System overrides","text":"<p>The Overrides tab in the system settings has no override checkbox. Instead, it interacts with the global settings overrides. See Overrides for how the global and system overrides interact, and the rules for creating the overrides.</p>"},{"location":"how-to-use-retool-gui/","title":"How to use Retool GUI","text":"<p>What follows is a step-by-step walkthrough of using Retool GUI and all of its features. If you're new to DAT file management, it might be beneficial to spend some time reading about terminology, and after you've filtered a DAT file with Retool, check out the help documentation for your favorite ROM manager to learn how to use it.</p> <p>Info</p> <p>Depending on your operating system, all Python commands in this guide might need to be prefixed with <code>python</code> or <code>python3</code> to work.</p>"},{"location":"how-to-use-retool-gui/#get-started","title":"Get started","text":"<p>The following sections cover the initial setup for Retool.</p>"},{"location":"how-to-use-retool-gui/#download-dat-files-and-retool","title":"Download DAT files and Retool","text":"<p>Before you can filter DAT files, they need to be on your hard drive.</p> <ol> <li> <p>Download the DAT files for the system you want to verify. Retool supports DAT files     from the following groups:</p> <ul> <li> <p>No-Intro</p> </li> <li> <p>Redump</p> </li> </ul> <p>You might need to extract a ZIP file containing the DAT files to access them.</p> </li> <li> <p>Download Retool, and follow the installation and update instructions for     your platform.</p> </li> </ol>"},{"location":"how-to-use-retool-gui/#open-retool","title":"Open Retool","text":"Windows binary Python GUI <p>Navigate to the folder you extracted Retool to, and double click <code>retoolgui.exe</code>. A terminal window shows, which in turn loads the GUI. Don't close the terminal window, as it's used for output.</p> <p>In your terminal/Command Prompt, change the folder to where Retool is installed, and then run the following command:</p> <pre><code>retoolgui.py\n</code></pre> <p></p>"},{"location":"how-to-use-retool-gui/#add-or-remove-dat-files","title":"Add or remove DAT files","text":"<p>To process DAT files, you first need to add them to your list:</p> <ul> <li>Click  Add DAT files to the list to add individual files to the list.</li> <li>Click  Add a folder of DAT files to the list to add all the DAT files in a single folder to the   list.</li> <li>Click  Add a folder of DAT files recursively to the list to add all the DAT files in a folder   and its subfolders to the list.</li> </ul> <p>You can also remove DAT files from your list:</p> <ul> <li>Select one or more DAT files in the list, and then click    Remove selected DAT files from the list to remove the DAT files from the list.</li> <li>Click  Remove all DAT files from the list to clear the list.</li> </ul> <p>You must have at least one DAT file in the list for the Process DAT files button to be enabled.</p>"},{"location":"how-to-use-retool-gui/#set-an-output-folder","title":"Set an output folder","text":"<p>Click  Choose an output folder to set where you want Retool to output processed DAT files. Retool doesn't modify any of the DAT files added to the list; instead, it creates new versions of them in the specified folder.</p>"},{"location":"how-to-use-retool-gui/#global-and-system-settings","title":"Global and system settings","text":"<p>Settings are available at two levels in Retool: global and system.</p> <ul> <li> <p>Global settings are applied to every DAT file Retool processes, so long as system   settings don't override them.</p> </li> <li> <p>System settings are applied to a specific system named in a DAT file. For example,   you can have settings for just the Sony - PlayStation DAT file from Redump.   System settings mostly mirror what's   available in the global settings, although there are some unique features.</p> </li> </ul>"},{"location":"integrate/","title":"Integrate Retool into your own software","text":"<p>Retool CLI supports <code>stdout</code> redirects instead of writing to DAT files, meaning it can be used as an intermediary filter tool for existing software workflows.</p> <p>If you'd prefer not to integrate Retool itself but find value in its clone lists, they are kept in a separate repository from the main program and are free to use.</p>"},{"location":"naming-system/","title":"Retool's naming system","text":"<p>Retool generates multiple names for each title in a DAT file to help match and group together titles more accurately. These names are used directly in the code, and also clone lists. If you plan to contribute to Retool, it helps to understand this standard.</p>"},{"location":"naming-system/#title-tool","title":"Title tool","text":"<p>Retool's different naming conventions can take a while to get used to. To help you start, you can use the title tool in Retool GUI. Open Retool GUI, then click File &gt; Title tool to launch it. Paste in the full name you've found in the DAT file you're working on, and it shows you the other names Retool assigns to that title by default.</p> <p></p>"},{"location":"naming-system/#full-names","title":"Full names","text":"<p>Full names are the names of titles as presented in the DAT file, including tags. For example:</p> <pre><code>This is a title (USA) (En,Fr) (Disc A) (Best Collection)\n</code></pre>"},{"location":"naming-system/#short-names","title":"Short names","text":"<p>Short names are a shortened version of full names, most often used in clone lists as a handy way to reference many titles at once without having to list the full name of every variant.</p> <p>For example, all of the following title full names:</p> <pre><code>This is a title (USA) (En,Fr) (Disc A) (Best Collection)\nThis is a title (Canada) (Disc 1)\nThis is a title (Europe) (De,It) (Disc A)\nThis is a title V3 (Spain) (Disco Uno)\n</code></pre> <p>Have the following short name:</p> <pre><code>this is a title (disc 1)\n</code></pre> <p>Adding this short name to a clone list finds all the full name titles previously listed.</p> <p>A short name is built by making the following changes to the full name:</p> <ol> <li> <p>Normalizing disc names. Retool attempts to align all naming variants for discs to the     one standard for better automated matching of titles. That is, variants like     (Disc 1), (Disc A), (Disco Uno), and (Side A) are all (Disc 1) as far as     Retool is concerned. Normalized disc names should also be used in clone lists     wherever short names are used.</p> <p>The replace strings for normalized disc names are in the <code>disc_rename</code> object in <code>config/internal-config.json</code>. This is not a 1:1 mapping of what the disc name is and what it should be. Instead, it's a sequential set of string replacements that's iterated over when processing a title's full name, so the order is important.</p> </li> <li> <p>Removing tags and version-like strings as defined in the     <code>ignore_tags</code>, <code>promote_editions</code>, <code>demote_editions</code>, and <code>modern_editions</code> arrays in     <code>config/internal-config.json</code>.</p> </li> <li> <p>Removing regions and languages.</p> </li> <li> <p>Converting the name to lowercase.</p> </li> </ol> <p>The short name also acts as a differentiator for titles that get bundled into the same group, but shouldn't be treated as 1:1 matches.</p> <p>For example, the following full names:</p> <pre><code>This is a title (USA) (En,Fr) (Disc A) (Best Collection)\nThis is a title (USA) (En,Fr) (Disc B) (Best Collection)\n</code></pre> <p>Are both assigned to the same group by default:</p> <pre><code>this is a title\n</code></pre> <p>However, because they are different discs from the same set and not equivalent titles, they get assigned different short names:</p> <pre><code>this is a title (disc 1)\nthis is a title (disc 2)\n</code></pre> <p>This prevents them from being considered as clones of each other.</p>"},{"location":"naming-system/#group-names","title":"Group names","text":"<p>Group names are how Retool bundles together similar titles to compare against each other.</p> <p>By default, group names are discovered by Retool taking only the content before the first <code>(</code> in full names, and then converting to lowercase. Additionally, any string that looks like a version is removed.</p> <p>For example, the following full names:</p> <pre><code>This is a title v1.00 (USA) (En,Fr) (Disc A) (Best Collection)\nThis is a title v1.00 (USA) (En,Fr) (Disc B) (Best Collection)\n</code></pre> <p>Are both assigned to the same group by default:</p> <pre><code>this is a title\n</code></pre> <p>Group names can also be set manually in the <code>variants</code> array in a clone list.</p>"},{"location":"naming-system/#region-free-names","title":"Region-free names","text":"<p>Region-free names are the same as full names, except their regions and languages have been removed. They're used in clone lists when specifying a short name or using a filter isn't appropriate.</p> <p>For example, the following full name:</p> <pre><code>This is a title (USA) (En,Fr) (Disc A) (Best Collection)\n</code></pre> <p>Has the following region-free name:</p> <pre><code>This is a title (Disc A) (Best Collection)\n</code></pre>"},{"location":"retool-1g1r/","title":"Why Retool's 1G1R is better","text":"<p>1G1R \u2014 One Game, One ROM</p> <p>Putting aside the fact that not everything is a ROM, 1G1R is an ideal that states that for the many, many different variants of a title that are available around the world, you should only really keep one. It then becomes a question of which one... which is what Retool is designed to help with.</p> <p>Standard 1G1R has problems.</p> <p>Way back in 2008 Eric Bole-Feysot, the developer of RomCenter, raised that 1G1R would be an appealing concept to implement in No-Intro DAT files. The various groups involved at the time ultimately settled on repurposing the existing parent/clone implementation established by MAME, added an extra <code>&lt;release&gt;</code> tag to define what region a title was from and what languages it supported, and built user-enabled 1G1R support into ROM managers to select titles based on the user's region and language preferences. It was, at the time, enough.</p> <p>As DAT files became more detailed, 1G1R capability failed to keep pace.</p>"},{"location":"retool-1g1r/#the-problems-with-rom-manager-1g1r-and-parentclone-dat-files","title":"The problems with ROM manager 1G1R and parent/clone DAT files","text":"<p>The criteria for 1G1R title selection outside of Retool is based purely on regions and languages, and the way ROM managers like CLRMAMEPro and Romcenter handle this is far from ideal. For a more code-focused approach to how this works, check out LogiqX's pseudo-code on the No-Intro forums (search the page for \"I do this kind of thing for a living\").</p> <p>The code essentially sets up the following standard:</p> <ol> <li> <p>Titles are given a score based on a combination of region and language priorities     provided by the user.</p> </li> <li> <p>Regions are more important than languages.</p> </li> <li> <p>Titles should be prioritized and filtered by user-defined regions.</p> </li> <li> <p>Languages are added as a prioritized bonus score to a title's region score. They     should not be used as a filter.</p> </li> </ol> <p>Unfortunately, this creates a few problems.</p>"},{"location":"retool-1g1r/#the-language-filterpriority-problem","title":"The language filter/priority problem","text":"<p>The existing parent/clone algorithm creates uncomfortable situations like the following. For example, consider a DAT file with the following three titles:</p> <pre><code>&lt;game name=\"Test Title (Canada) (Fr)\"&gt;\n    &lt;description&gt;Test Title (Canada) (Fr)&lt;/description&gt;\n    &lt;release name=\"Test Title (Canada) (Fr)\" region=\"Canada\" language=\"Fr\"/&gt;\n    &lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Canada) (Fr).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Japan)\" cloneof=\"Test Title (Canada) (Fr)\"&gt;\n    &lt;description&gt;Test Title (Japan)&lt;/description&gt;\n    &lt;release name=\"Test Title (Japan)\" region=\"Japan\" language=\"Ja\"/&gt;\n    &lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Japan).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Norway)\" cloneof=\"Test Title (Canada) (Fr)\"&gt;\n    &lt;description&gt;Test Title (Norway)&lt;/description&gt;\n    &lt;release name=\"Test Title (Norway)\" region=\"Norway\" language=\"En\"/&gt;\n    &lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Norway).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n</code></pre> <p>You want to filter the DAT file in a 1G1R fashion, and you only speak English. You set your regions in an order that you hope should give you a balance between English titles and higher frame rates courtesy of NTSC:</p> <ol> <li> <p>Canada</p> </li> <li> <p>Japan</p> </li> <li> <p>Norway</p> </li> </ol> <p>As insurance, you set your languages in an order that prioritizes English:</p> <ol> <li> <p>En</p> </li> <li> <p>Ja</p> </li> <li> <p>Fr</p> </li> </ol> <p>A cursory look at the XML data shows that the Norwegian title is the only one that supports English, and is arguably what the user would want.</p> <p>What title gets chosen in CLRMAMEPro's 1G1R process? Test Title (Canada) (Fr), because Canada is the highest priority region.</p> <p>What if you remove Fr from the language list? You still get Test Title (Canada) (Fr), as languages are treated as a bonus score, not a filter.</p>"},{"location":"retool-1g1r/#the-version-problem","title":"The version problem","text":"<p>The current DAT file and ROM manager ecosystem doesn't have a concept of versioning. Say you have the following titles in a DAT file:</p> <pre><code>&lt;game name=\"Test Title (USA) (v1.2)\"&gt;\n    &lt;description&gt;Test Title (USA) (v1.2)&lt;/description&gt;\n    &lt;release name=\"Test Title (USA) (v1.2)\" region=\"USA\" language=\"En\"/&gt;\n    &lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (USA) (v1.2).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (USA) (v1.1)\" cloneof=\"Test Title (USA) (v1.2)\"&gt;\n    &lt;description&gt;Test Title (USA) (v1.1)&lt;/description&gt;\n    &lt;release name=\"Test Title (USA) (v1.1)\" region=\"USA\" language=\"En\"/&gt;\n    &lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (USA) (v1.1).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Europe) (v0.6)\" cloneof=\"Test Title (USA) (v1.2)\"&gt;\n    &lt;description&gt;Test Title (Europe) (v0.6)&lt;/description&gt;\n    &lt;release name=\"Test Title (Europe) (v0.6)\" region=\"Europe\" language=\"En\"/&gt;\n    &lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Europe) (v0.6).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Europe) (v2.0)\" cloneof=\"Test Title (USA) (v1.2)\"&gt;\n    &lt;description&gt;Test Title (Europe) (v2.0)&lt;/description&gt;\n    &lt;release name=\"Test Title (Europe) (v2.0)\" region=\"Europe\" language=\"En\"/&gt;\n    &lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Europe) (v2.0).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n&lt;game name=\"Test Title (Europe) (v1.1)\" cloneof=\"Test Title (USA) (v1.2)\"&gt;\n    &lt;description&gt;Test Title (Europe) (v1.1)&lt;/description&gt;\n    &lt;release name=\"Test Title (Europe) (v1.1)\" region=\"Europe\" language=\"En\"/&gt;\n    &lt;rom crc=\"00000000\" md5=\"00000000000000000000000000000000\" name=\"Test Title (Europe) (v1.1).bin\" sha1=\"0000000000000000000000000000000000000000\" size=\"100000000\"/&gt;\n&lt;/game&gt;\n</code></pre> <p>If you set USA as the top priority region in your ROM manager, you get whatever title is marked as the parent, in this case, Test Title (USA) (v1.2).</p> <p>However, if you set Europe as the top priority region, since the parent is from the USA, you get something unexpected. In CLRMAMEPro, you get whatever is the first European title in the DAT file: in this case Test Title (Europe) (v0.6). In RomCenter, you get whatever is the last: in this case Test Title (Europe) (v1.1). In both cases, the wrong version of the title gets selected: it should be Test Title (Europe) (v2.0).</p>"},{"location":"retool-1g1r/#the-broader-priority-problem","title":"The broader priority problem","text":"<p>These issues expand beyond language issues and easily identifiable versions: how do you deal with versions vs revisions? Production vs preproduction? How about Hibaihin/Not for Resale titles? What about disc IDs used by the likes of PlayStation? Or OEM titles or release dates? What do you do when you have a production title in a lower priority region, but only an unlicensed, badly dumped, or preproduction version in a higher priority region? How do compilations play a part, or supersets like Game of the Year editions, or DVD rereleases of games that were originally on multiple CDs?</p> <p>There are numerous questions like these that crop up when trying to determine the best possible 1G1R title to select, which is complicated again by user defined and ordered regions and languages, and their own specific curation desires.</p>"},{"location":"retool-1g1r/#the-human-problem","title":"The human problem","text":"<p>Parent/clone DAT files are generally administered by hand. There's no automatic logic that highlights that titles might be related as a human enters them into a database \u2014 they need to manually make that link themselves, and be aware that the clones of multiple different names might exist. On a single DAT file with multiple contributors, where the focus can be \"DAT all the things\" over attention to detail, this lends itself to clones being missed.</p>"},{"location":"retool-1g1r/#what-retool-does-differently","title":"What Retool does differently","text":"<p>Retool ignores the parent/clone data manually entered into DAT files, and analyzes title names to automatically group them together. It makes use of clone lists to not only close the gap where automatic detection doesn't work out, but to recategorize and prioritize titles accordingly.</p> <p>It doesn't use a scoring system based on region and language to determine which title to pick, but instead puts titles through a series of filters based on detailed criteria. It makes use of scraped data from Redump and No-Intro's websites to provide additional language details not present in title names.</p> <p>Finally, it can treat languages as both a filter and something that should have higher priority than regions, although you can prioritize regions if you desire.</p>"},{"location":"romvault/","title":"Integrating with ROMVault","text":"<p>If you use ROMVault or have a subscription to DATVault and want to integrate Retool into your flow, complete the following steps.</p>"},{"location":"romvault/#setup","title":"Setup","text":"<ol> <li> <p>Add your Redump and No-Intro DAT files to a subfolder in your ROMVault <code>DATRoot</code>     that is separate from your other DAT files. For example, <code>DATRoot\\Retool\\</code>.</p> <p>This is so Retool only processes these files and no others.</p> </li> <li> <p>Configure Retool as follows:</p> Retool GUIRetool CLI <ol> <li> <p>Open Retool.</p> </li> <li> <p>Click File, and then click Settings.</p> </li> <li> <p>Set the Quick folder import location to where DATVault downloads your     Redump and No-Intro DAT files.</p> </li> <li> <p>Close the settings dialog box.</p> </li> <li> <p>Optional: In the Paths tab, enable Replace input DAT files.</p> </li> <li> <p>Optional: In the Options tab, enable     Don't modify the input DAT file's existing header fields.</p> </li> <li> <p>DATVault only: In the Options tab, disable     Add MIA attributes to files.</p> </li> <li> <p>Set your preferences for the ROMVault DAT files in Retool.</p> </li> </ol> <p>Note</p> <p>If you use system settings, you might also have to change these settings there.</p> <p>Use the following flags, along with the path to the separate folder you've set up for Redump and No-Intro DAT files. Add any other settings you want.</p> <ul> <li> <p><code>--replace</code>:  Replace input DAT files with Retool versions. Only use this if   you can recover the original DAT files from elsewhere.</p> </li> <li> <p><code>--originalheader</code>: Optional. Use the original input DAT headers in output DAT   files.</p> </li> </ul> </li> </ol>"},{"location":"romvault/#process-the-dat-files-and-update-romvault","title":"Process the DAT files and update ROMVault","text":"<p>After you've got your DAT files where you want them in ROMVault's <code>DatRoot</code>:</p> <ol> <li> <p>In Retool, click  Add DAT files recursively from your quick import folder to add     your ROMVault Redump and No-Intro DAT files.</p> </li> <li> <p>Click Process DAT files to replace the DAT files with those that have been     processed by Retool.</p> </li> <li> <p>In ROMVault, click Update DATs to load the Retool-processed version of your DAT     files.</p> </li> </ol>"},{"location":"system-config/","title":"System config example","text":"<p>This file should be stored in <code>config/systems</code>, and named after the DAT file system and group, for example: <code>Sony - PlayStation (Redump).yaml</code>.</p> <pre><code>---\n# This file contains the system settings for Sony - PlayStation (Redump).\n#\n# It might override settings in config/user-config.yaml specifically for that\n# DAT.\n#\n# ==============================================\n# CLONE LIST, METADATA FILE, AND OUTPUT LOCATION\n# ==============================================\npaths:\n- override: false\n- clone list: # clonelists/your-clone-list.json\n- metadata file: # metadata/your-metadata-file.json\n- output: # C:\\path\n#\n# ==============\n# LANGUAGE ORDER\n# ==============\n# If the -l option is used, only include titles with the following languages.\n# Comment out languages you don't want. Order is important.\nlanguage order:\n- override: false\n# - Afrikaans\n# - Albanian\n# - Arabic\n# - Basque\n# - Bulgarian\n# - Catalan\n# - Cornish\n# - Croatian\n# - Czech\n# - Danish\n# - Dutch\n# - Estonian\n# - Finnish\n# - French\n# - Gaelic\n# - German\n# - Greek\n# - Hebrew\n# - Hindi\n# - Hungarian\n# - Icelandic\n# - Indonesian\n# - Italian\n# - Japanese\n# - Korean\n# - Latvian\n# - Lithuanian\n# - Macedonian\n# - Norwegian\n# - Polish\n# - Portuguese\n# - Punjabi\n# - Romanian\n# - Russian\n# - Serbian\n# - Slovak\n# - Slovenian\n# - Spanish\n# - Swedish\n# - Tamil\n# - Thai\n# - Turkish\n# - Ukranian\n- Chinese\n- English\n\n# ============\n# REGION ORDER\n# ============\n# Only include titles with the following regions. Comment out the regions you\n# don't want. Order is important.\nregion order:\n- override: true\n- China\n- Hong Kong\n- Taiwan\n- Singapore\n- Asia\n- World\n- USA\n- Canada\n- UK\n- Australia\n- New Zealand\n- Ireland\n- Europe\n- Japan\n- Thailand\n- Spain\n- Mexico\n- Argentina\n- Latin America\n- Brazil\n- Portugal\n- France\n- Belgium\n- Netherlands\n- Germany\n- Austria\n- Italy\n- Switzerland\n- Korea\n- Russia\n- Ukraine\n- Estonia\n- Poland\n- Latvia\n- Lithuania\n- Denmark\n- Norway\n- Sweden\n- Scandinavia\n- Finland\n- Iceland\n- Hungary\n- Czech\n- Greece\n- Macedonia\n- India\n- South Africa\n- Israel\n- Slovakia\n- Turkey\n- Croatia\n- Slovenia\n- United Arab Emirates\n- Bulgaria\n- Romania\n- Albania\n- Serbia\n- Indonesia\n- Unknown\n\n# ==================\n# LOCALIZATION ORDER\n# ==================\n# If the -n option is used, use local names where available for titles with the\n# following languages. Comment out languages you don't want. Order is important.\n# If all languages are commented out and -n is used, the language order is used\n# instead.\nlocalization order:\n- override: false\n# - Afrikaans\n# - Albanian\n# - Arabic\n# - Basque\n# - Bulgarian\n# - Catalan\n# - Chinese (Simplified)\n# - Chinese (Traditional)\n# - Cornish\n# - Croatian\n# - Czech\n# - Danish\n# - Dutch\n# - English\n# - Estonian\n# - Finnish\n# - French\n# - French (Canadian)\n# - Gaelic\n# - German\n# - Greek\n# - Hebrew\n# - Hindi\n# - Hungarian\n# - Icelandic\n# - Indonesian\n# - Italian\n# - Japanese\n# - Korean\n# - Latvian\n# - Lithuanian\n# - Macedonian\n# - Norwegian\n# - Polish\n# - Portuguese\n# - Portuguese (Brazilian)\n# - Punjabi\n# - Romanian\n# - Russian\n# - Serbian\n# - Slovak\n# - Slovenian\n# - Spanish\n# - Spanish (Latin American)\n# - Spanish (Mexican)\n# - Swedish\n# - Tamil\n# - Thai\n# - Turkish\n# - Ukranian\n\n# ===========\n# VIDEO ORDER\n# ===========\n# Priority for titles with a video tag in their name. Do not comment out any\n# lines.\nvideo order:\n- override: true\n- PAL\n- PAL 60Hz\n- MPAL\n- NTSC\n- SECAM\n\n# ============================\n# LIST NAMES PREFIX AND SUFFIX\n# ============================\n# If the --listnames option is used, you can optionally add a prefix and\n# suffix to each title.\n#\n# If you start a prefix with http://, https://, or ftp://, each line in the\n# list will be URL encoded.\n#\n# The text must be inside double quotes. You must escape other double quotes\n# and backslashes inside the quotes like so: \\\", \\\\\nlist prefix:\n- \"http://www.example.com/\"\n\nlist suffix:\n- \".zip\"\n\n# ====================================\n# GLOBAL EXCLUDE AND INCLUDE OVERRIDES\n# ====================================\n# Override Retool and force exclude or include specific titles by adding your own\n# text to match against. Items in the list are case sensitive. See the\n# documentation for more information, and pay particular attention to how system\n# overrides interact with global overrides.\n#\n# The formatting is as follows:\n#\n# * Plain text indicates a partial string match.\n# * A prefix of / indicates a regular expression match.\n# * A prefix of | indicates a full string match.\n# * Additionally, wrap a string in &lt;&gt; to also remove any match's related clones.\n#\n# The text must be inside double quotes. You must escape double quotes and\n# backslashes like so: \\\", \\\\\n#\n# Comment out lines you don't want.\nexclude:\n# - \"[b]\"\n# - \"/.*?\\(Virtual*\"\n\ninclude:\n# - \"|My favorite title (Japan)\"\n\n# ============\n# POST FILTERS\n# ============\n# After Retool has finished processing, remove all titles except the ones that\n# match the text listed here. Items in the list are case sensitive. See the\n# documentation for more information.\n#\n# The formatting is as follows:\n#\n# * Plain text indicates a partial string match.\n# * A prefix of / indicates a regular expression match.\n# * A prefix of | indicates a full string match.\n#\n# The text must be inside double quotes. You must escape double quotes and\n# backslashes like so: \\\", \\\\\n#\n# Comment out lines you don't want\nfilters:\n- override: false\n# - \"/.*?\\(Virtual*\"\n# - \"|My favorite title (Japan)\"\n\n# ======================\n# EXCLUSIONS AND OPTIONS\n# ======================\n# You should use the GUI to generate these options, even if you\n# intend to use the CLI. Add a DAT, go the the System settings\n# tab, and then change the exclusions and options to populate\n# this section.\nexclusions and options:\n- override exclusions: true\n- override options: true\n- d\n- e\n- listnames\n- nodtd\n- nofilters\n- r\n- regionsplit\n- removesdat\n- report\n- singlecpu\n- trace: \"Metal Gear Solid\"\n- warningpause\n- warnings\n- y\n- z\n- exclude: AaBbcdDekmMopPruv\n</code></pre>"},{"location":"terminology/","title":"Terminology","text":"<p>Retool inherits a lot of terminology already established by ROM managers, and adds its own. This page contains the definitions for many of the terms used in Retool and its documentation.</p>"},{"location":"terminology/#1g1r","title":"1G1R","text":"<p>\"One game, one ROM.\" Putting aside the fact that not everything is a ROM, 1G1R is an ideal that states that for the many, many different versions of a single title that are available around the world, you should only really possess one. It then becomes a question of which one... which is what Retool is designed to help with.</p>"},{"location":"terminology/#clone-lists","title":"Clone lists","text":"<p>Clone lists are JSON files that manually define relationships between titles that Retool ordinarily wouldn't automatically pick up. They're useful both for matching titles of completely different names, and for overriding some of the default choices that Retool makes.</p>"},{"location":"terminology/#compilations","title":"Compilations","text":"<p>A title that in itself contains multiple titles. They might be from the same series of games, a single publisher, or completely unrelated.</p>"},{"location":"terminology/#datsdat-files","title":"DATs/DAT files","text":"<p>Short for \"data files\", they're called DATs or DAT files because they usually have the extension <code>.dat</code>. They contain a catalog of titles, usually focused on a single system like the Atari 2600 or Sega Master System. A DAT file often contains attributes for each of its titles, including file names, hashes, and sizes.</p> <p>Used in combination with a ROM manager, the information in a DAT file can be used to audit files on your hard drive to ensure that they are named correctly, and that they match the recorded attributes in the file.</p> <p>DAT files usually follow one of two standards: either a variant on the XML-based LogiqX format, or the less commonly used CLRMAMEPro format. There are many more less common formats.</p> <p>Retool supports DAT files released by two groups: No-Intro and Redump.</p>"},{"location":"terminology/#implied-languages","title":"Implied languages","text":"<p>An implied language is the dominant language for a region. For the USA, it's English, Brazil has an implied language of Portuguese, and so on. Implied languages are used when a title doesn't have languages listed explicitly in its name, or in an associated metadata file. They're also used when a user doesn't set an explicit language priority \u2014 when this happens, Retool builds an implied language priority based on the user's region choices.</p> <p>Implied languages help Retool to determine the intent of a user when it comes to selecting a 1G1R title. For example, if a user has set the following region order:</p> <ol> <li> <p>USA</p> </li> <li> <p>Canada</p> </li> </ol> <p>And Retool is considering the following titles:</p> <pre><code>This is a title (USA) (Es)\nThis is a title (Canada)\n</code></pre> <p>If the user doesn't explicitly set any language priorities, Retool implies from the choice of USA as the top region that the user's preferred language in this situation is English, and the USA title in this example only supports Spanish. It also knows that English is the dominant anguage in Canada, and so even though that title has no explicit language tags, there's a good chance it's in English. In this scenario, even though USA is ranked higher than Canada, the Canadian title is chosen as it has a higher chance of being in English.</p> <p>Some regions don't have an implied language. For example, a title from Asia could be in Chinese, Japanese, English, or otherwise, but because you can't tell without explicit data, an implied language isn't assigned.</p>"},{"location":"terminology/#metadata-files","title":"Metadata files","text":"<p>Metadata files are JSON files that contain scraped data from No-Intro's and Redump's websites. They're stored in the <code>metadata</code> folder, and are used to provide extra language information and local title names not included in DAT files.</p>"},{"location":"terminology/#parents-and-clones","title":"Parents and clones","text":"<p>DAT files can mark titles as being a \"clone\" of a \"parent\" title \u2014 effectively setting up a relationship between two or more titles. Some DAT files are even marked as specifically containing parent/clone relationships, and these relationships are used to produce the poor standard of 1G1R experienced in most other tools.</p> <p>The parent/clone concept comes from MAME, and enables one of the ways in which it organizes its ROMs. In a split set, the parent ROM contains the base or common files for a game, and is often the latest version of a game. It is in itself a complete version of a game. Clone ROMs, on the other hand, only contain files that are different from the parent. If you load a clone game in MAME, it's smart enough to load the required base files from the parent, and then any of the modified files it needs from the clone to create a full title.</p> <p>This existing parent/clone infrastructure in DAT files was taken advantage of by No-Intro as a way to introduce 1G1R into its sets. The parent and clone designation starts to lose meaning here, as all ROMs, discs, or otherwise are complete titles in No-Intro, not a series of files. In this scenario it doesn't matter which title is designated as a parent or clone in the DAT \u2014 it's just a way to indicate a relationship so ROM managers can select a 1G1R title based on a user's region and language preferences.</p> <p>In the case of Retool, when using this terminology every title that's related to each other is considered a clone. The selected 1G1R title is called exactly that \u2014 the 1G1R title.</p>"},{"location":"terminology/#rom-managers","title":"ROM managers","text":"<p>ROM managers read DAT files, and organize files on your hard drive according to the data found inside those DAT files. They are primarily used to verify that you have a known good dumps of ROMs or disc images according to certain datting groups like No-Intro, Redump, and TOSEC, and authors of emulators like MAME.</p> <p>The most popular ROM managers are CLRMamePro and RomVault. If you've never used a ROM manager before, the learning curve can be quite steep.</p>"},{"location":"terminology/#supersets","title":"Supersets","text":"<p>Supersets are versions of titles that contain more content, or for some reason are superior to another version. This might include, for example, a Game of the Year edition, an all-in-one pack that bundles a game and all its DLC, or a DVD version of a title previously released on multiple CDs.</p> <p>Occasionally a superset might be a title with a minor advantage compared to the others in its group: for example, the Japanese version of Sonic the Hedgehog is in English, but compared to the USA version has additional parallax effects. Fahrenheit, the European version of Indigo Prophecy has uncensored content. These are still considered supersets.</p> <p>Caution</p> <p>Censorship or licensing changes aren't always a reason for designating something as a superset. Quite often such changes involve a simple sprite or palette swap that doesn't materially affect a game, and there's no guarantee there weren't other bug fixes included along the way. If you disagree with a choice Retool makes, you can always set your own overrides.</p>"},{"location":"terminology/#tags","title":"Tags","text":"<p>Tags indicate properties of a title, and are usually appended to a title's name in a DAT file. They are always surround by parentheses. For example, <code>(USA)</code>, <code>(Disc 1)</code>, <code>(En,De)</code>, <code>(Special Edition)</code> and so on.</p>"},{"location":"terminology/#titles","title":"Titles","text":"<p>Entire games or applications. A title has properties, like a name, the regions it was released in, the languages it supports, and more. In an XML-based DAT file, it's often represented by the <code>&lt;game&gt;</code> node.</p>"},{"location":"user-config/","title":"user-config.yaml example","text":"<p>This file should be stored in the <code>config</code> folder.</p> <pre><code>---\n# ==============\n# LANGUAGE ORDER\n# ==============\n# If the -l option is used, only include titles with the following languages.\n# Comment out languages you don't want. Order is important.\nlanguage order:\n# - English\n# - Afrikaans\n# - Albanian\n# - Arabic\n# - Basque\n# - Bulgarian\n# - Catalan\n# - Chinese (Simplified)\n# - Chinese (Traditional)\n# - Chinese (Unspecified)\n# - Cornish\n# - Croatian\n# - Czech\n# - Danish\n# - Dutch\n# - Estonian\n# - Finnish\n# - French\n# - French (Canadian)\n# - Gaelic\n# - German\n# - Greek\n# - Hebrew\n# - Hindi\n# - Hungarian\n# - Icelandic\n# - Indonesian\n# - Italian\n# - Japanese\n# - Korean\n# - Latvian\n# - Lithuanian\n# - Macedonian\n# - Norwegian\n# - Polish\n# - Portuguese\n# - Portuguese (Brazilian)\n# - Punjabi\n# - Romanian\n# - Russian\n# - Serbian\n# - Slovak\n# - Slovenian\n# - Spanish\n# - Spanish (Latin American)\n# - Spanish (Mexican)\n# - Swedish\n# - Tamil\n# - Thai\n# - Turkish\n# - Ukranian\n\n# ============\n# REGION ORDER\n# ============\n# Only include titles with the following regions. Comment out the regions you\n# don't want. Order is important.\nregion order:\n- USA\n- World\n- Canada\n- Europe\n- UK\n- Australia\n- New Zealand\n- Singapore\n- Ireland\n- Japan\n- Asia\n- Thailand\n- Spain\n- Mexico\n- Argentina\n- Latin America\n- Brazil\n- Portugal\n- France\n- Belgium\n- Netherlands\n- Germany\n- Austria\n- Italy\n- Switzerland\n- Hong Kong\n- China\n- Taiwan\n- Korea\n- Russia\n- Ukraine\n- Estonia\n- Poland\n- Latvia\n- Lithuania\n- Denmark\n- Norway\n- Sweden\n- Scandinavia\n- Finland\n- Iceland\n- Hungary\n- Czech\n- Greece\n- Macedonia\n- India\n- South Africa\n- Israel\n- Slovakia\n- Turkey\n- Croatia\n- Slovenia\n- United Arab Emirates\n- Bulgaria\n- Romania\n- Albania\n- Serbia\n- Indonesia\n- Unknown\n\n# ==================\n# LOCALIZATION ORDER\n# ==================\n# If the -n option is used, use local names where available for titles with the\n# following languages. Comment out languages you don't want. Order is important.\n# If all languages are commented out and -n is used, the language order is used\n# instead.\nlocalization order:\n# - Afrikaans\n# - Albanian\n# - Arabic\n# - Basque\n# - Bulgarian\n# - Catalan\n# - Chinese (Simplified)\n# - Chinese (Traditional)\n# - Cornish\n# - Croatian\n# - Czech\n# - Danish\n# - Dutch\n# - English\n# - Estonian\n# - Finnish\n# - French\n# - French (Canadian)\n# - Gaelic\n# - German\n# - Greek\n# - Hebrew\n# - Hindi\n# - Hungarian\n# - Icelandic\n# - Indonesian\n# - Italian\n# - Japanese\n# - Korean\n# - Latvian\n# - Lithuanian\n# - Macedonian\n# - Norwegian\n# - Polish\n# - Portuguese\n# - Portuguese (Brazilian)\n# - Punjabi\n# - Romanian\n# - Russian\n# - Serbian\n# - Slovak\n# - Slovenian\n# - Spanish\n# - Spanish (Latin American)\n# - Spanish (Mexican)\n# - Swedish\n# - Tamil\n# - Thai\n# - Turkish\n# - Ukranian\n\n# ===========\n# VIDEO ORDER\n# ===========\n# Priority for titles with a video tag in their name. Do not comment out any\n# lines.\nvideo order:\n- NTSC\n- PAL\n- PAL 60Hz\n- MPAL\n- SECAM\n\n# ============================\n# LIST NAMES PREFIX AND SUFFIX\n# ============================\n# If the --listnames option is used, you can optionally add a prefix and\n# suffix to each title.\n#\n# If you start a prefix with http://, https://, or ftp://, each line in the\n# list will be URL encoded.\n#\n# The text must be inside double quotes. You must escape other double quotes\n# and backslashes inside the quotes like so: \\\", \\\\\nlist prefix:\n# - \"This text will be at the start of each line\"\n\nlist suffix:\n# - \"This text will be at the end of each line\"\n\n# ====================================\n# GLOBAL EXCLUDE AND INCLUDE OVERRIDES\n# ====================================\n# Override Retool and force exclude or include specific titles by adding your own\n# text to match against. Items in the list are case sensitive. See the\n# documentation for more information, and pay particular attention to how system\n# overrides interact with global overrides.\n#\n# The formatting is as follows:\n#\n# * Plain text indicates a partial string match.\n# * A prefix of / indicates a regular expression match.\n# * A prefix of | indicates a full string match.\n# * Additionally, wrap a string in &lt;&gt; to also remove any match's related clones.\n#\n# The text must be inside double quotes. You must escape double quotes and\n# backslashes like so: \\\", \\\\\n#\n# Comment out lines you don't want.\nexclude:\n# - \"[b]\"\n# - \"/.*?\\(Virtual*\"\n\ninclude:\n# - \"|My favorite title (Japan)\"\n\n# ============\n# POST FILTERS\n# ============\n# After Retool has finished processing, remove all titles except the ones that\n# match the text listed here. Items in the list are case sensitive. See the\n# documentation for more information.\n#\n# The formatting is as follows:\n#\n# * Plain text indicates a partial string match.\n# * A prefix of / indicates a regular expression match.\n# * A prefix of | indicates a full string match.\n#\n# The text must be inside double quotes. You must escape double quotes and\n# backslashes like so: \\\", \\\\\n#\n# Comment out lines you don't want\nfilters:\n# - \"/.*?\\(Virtual*\"\n# - \"|My favorite title (Japan)\"\n\n# ============\n# GUI SETTINGS\n# ============\n# GUI settings only, not used by the CLI.\ngui settings:\n- exclude:\n- output:\n</code></pre>"},{"location":"what-qualifies-as-a-clone/","title":"What qualifies as a clone?","text":"<p>There's a lot of subjectivity in deciding whether a title is a clone of another. Retool follows these guidelines to identify clones when looking at a set of titles:</p> <ul> <li>Revisions, rereleases, and preproduction variations of the same title.</li> <li>Titles that are identical aside from their title screen or the languages available.</li> <li>Titles with only cosmetic differences, such as reskins or sprite swaps.</li> </ul> <p>The decision isn't always clear-cut. A game might not qualify as a clone, for example, if it has unique levels or gameplay attributes that aren't a superset of another title. Every situation is approached on a case-by-case basis.</p> <p>Demos are not considered clones of their complete variants. This is because some demos provide a unique experience not replicated in the full version of a game.</p> <p>BIOSes are never considered clones of other titles, even if they contain games, come from different regions, or are different revisions. This is because some emulators can be sensitive to the BIOS being run in combination with a particular game.</p> <p>Remasters and remakes are usually considered their own games.</p>"},{"location":"includes/file/","title":"File","text":"<p>retool-2.4.2-win-x86-64.zip</p>"},{"location":"includes/sha256/","title":"Sha256","text":"<p>4c5bcdf660378cda981597cf10d1a30a109b1ed4833c57d53127d51865db26d2</p>"}]}